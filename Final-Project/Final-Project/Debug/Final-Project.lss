
Final-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003aa  00800100  00001238  000012cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008004aa  008004aa  00001676  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001676  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000016e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000233a  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090a  00000000  00000000  00003b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001190  00000000  00000000  00004494  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00005624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000730  00000000  00000000  00005920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000142e  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000747e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e3       	ldi	r30, 0x38	; 56
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 3a       	cpi	r26, 0xAA	; 170
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	aa ea       	ldi	r26, 0xAA	; 170
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 3c       	cpi	r26, 0xC4	; 196
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b3 03 	call	0x766	; 0x766 <main>
      9e:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCDBusyLoop>:
	// Humidity average
	DHT11Data[0] = bufferRH / DHT_NR_OF_SAMPLES;
	
	// Temperature average
	DHT11Data[2] = (bufferTemp / DHT_NR_OF_SAMPLES) + DHT_TEMP_ERROR_OFFSET;
}
      a6:	87 b1       	in	r24, 0x07	; 7
      a8:	83 7c       	andi	r24, 0xC3	; 195
      aa:	87 b9       	out	0x07, r24	; 7
      ac:	8b b1       	in	r24, 0x0b	; 11
      ae:	88 60       	ori	r24, 0x08	; 8
      b0:	8b b9       	out	0x0b, r24	; 11
      b2:	8b b1       	in	r24, 0x0b	; 11
      b4:	8b 7f       	andi	r24, 0xFB	; 251
      b6:	8b b9       	out	0x0b, r24	; 11
      b8:	8b b1       	in	r24, 0x0b	; 11
      ba:	80 61       	ori	r24, 0x10	; 16
      bc:	8b b9       	out	0x0b, r24	; 11
      be:	85 e0       	ldi	r24, 0x05	; 5
      c0:	98 2f       	mov	r25, r24
      c2:	9a 95       	dec	r25
      c4:	f1 f7       	brne	.-4      	; 0xc2 <LCDBusyLoop+0x1c>
      c6:	96 b1       	in	r25, 0x06	; 6
      c8:	96 95       	lsr	r25
      ca:	96 95       	lsr	r25
      cc:	92 95       	swap	r25
      ce:	90 7f       	andi	r25, 0xF0	; 240
      d0:	2b b1       	in	r18, 0x0b	; 11
      d2:	2f 7e       	andi	r18, 0xEF	; 239
      d4:	2b b9       	out	0x0b, r18	; 11
      d6:	28 2f       	mov	r18, r24
      d8:	2a 95       	dec	r18
      da:	f1 f7       	brne	.-4      	; 0xd8 <LCDBusyLoop+0x32>
      dc:	2b b1       	in	r18, 0x0b	; 11
      de:	20 61       	ori	r18, 0x10	; 16
      e0:	2b b9       	out	0x0b, r18	; 11
      e2:	28 2f       	mov	r18, r24
      e4:	2a 95       	dec	r18
      e6:	f1 f7       	brne	.-4      	; 0xe4 <LCDBusyLoop+0x3e>
      e8:	2b b1       	in	r18, 0x0b	; 11
      ea:	2f 7e       	andi	r18, 0xEF	; 239
      ec:	2b b9       	out	0x0b, r18	; 11
      ee:	8a 95       	dec	r24
      f0:	f1 f7       	brne	.-4      	; 0xee <LCDBusyLoop+0x48>
      f2:	99 23       	and	r25, r25
      f4:	0c f3       	brlt	.-62     	; 0xb8 <LCDBusyLoop+0x12>
      f6:	8b b1       	in	r24, 0x0b	; 11
      f8:	87 7f       	andi	r24, 0xF7	; 247
      fa:	8b b9       	out	0x0b, r24	; 11
      fc:	8b b1       	in	r24, 0x0b	; 11
      fe:	84 60       	ori	r24, 0x04	; 4
     100:	8b b9       	out	0x0b, r24	; 11
     102:	87 b1       	in	r24, 0x07	; 7
     104:	8c 63       	ori	r24, 0x3C	; 60
     106:	87 b9       	out	0x07, r24	; 7
     108:	08 95       	ret

0000010a <FlashEnable>:
     10a:	8b b1       	in	r24, 0x0b	; 11
     10c:	80 61       	ori	r24, 0x10	; 16
     10e:	8b b9       	out	0x0b, r24	; 11
     110:	88 ec       	ldi	r24, 0xC8	; 200
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	01 97       	sbiw	r24, 0x01	; 1
     116:	f1 f7       	brne	.-4      	; 0x114 <FlashEnable+0xa>
     118:	8b b1       	in	r24, 0x0b	; 11
     11a:	8f 7e       	andi	r24, 0xEF	; 239
     11c:	8b b9       	out	0x0b, r24	; 11
     11e:	08 95       	ret

00000120 <LCDByte>:
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	c8 2f       	mov	r28, r24
     126:	d6 2f       	mov	r29, r22
     128:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
     12c:	d1 11       	cpse	r29, r1
     12e:	0d c0       	rjmp	.+26     	; 0x14a <LCDByte+0x2a>
     130:	8b b1       	in	r24, 0x0b	; 11
     132:	8b 7f       	andi	r24, 0xFB	; 251
     134:	8b b9       	out	0x0b, r24	; 11
     136:	c0 38       	cpi	r28, 0x80	; 128
     138:	11 f0       	breq	.+4      	; 0x13e <LCDByte+0x1e>
     13a:	c1 30       	cpi	r28, 0x01	; 1
     13c:	71 f4       	brne	.+28     	; 0x15a <LCDByte+0x3a>
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <cursorPosition>
     144:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <cursorLine>
     148:	08 c0       	rjmp	.+16     	; 0x15a <LCDByte+0x3a>
     14a:	8b b1       	in	r24, 0x0b	; 11
     14c:	84 60       	ori	r24, 0x04	; 4
     14e:	8b b9       	out	0x0b, r24	; 11
     150:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <cursorPosition>
     154:	8f 5f       	subi	r24, 0xFF	; 255
     156:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <cursorPosition>
     15a:	8b b1       	in	r24, 0x0b	; 11
     15c:	87 7f       	andi	r24, 0xF7	; 247
     15e:	8b b9       	out	0x0b, r24	; 11
     160:	9c 2f       	mov	r25, r28
     162:	90 7f       	andi	r25, 0xF0	; 240
     164:	28 b1       	in	r18, 0x08	; 8
     166:	89 2f       	mov	r24, r25
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	95 95       	asr	r25
     16c:	87 95       	ror	r24
     16e:	95 95       	asr	r25
     170:	87 95       	ror	r24
     172:	82 2b       	or	r24, r18
     174:	88 b9       	out	0x08, r24	; 8
     176:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     17a:	88 b1       	in	r24, 0x08	; 8
     17c:	83 7c       	andi	r24, 0xC3	; 195
     17e:	88 b9       	out	0x08, r24	; 8
     180:	20 e1       	ldi	r18, 0x10	; 16
     182:	c2 9f       	mul	r28, r18
     184:	c0 01       	movw	r24, r0
     186:	11 24       	eor	r1, r1
     188:	28 b1       	in	r18, 0x08	; 8
     18a:	99 27       	eor	r25, r25
     18c:	95 95       	asr	r25
     18e:	87 95       	ror	r24
     190:	95 95       	asr	r25
     192:	87 95       	ror	r24
     194:	82 2b       	or	r24, r18
     196:	88 b9       	out	0x08, r24	; 8
     198:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     19c:	88 b1       	in	r24, 0x08	; 8
     19e:	83 7c       	andi	r24, 0xC3	; 195
     1a0:	88 b9       	out	0x08, r24	; 8
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <LCDGotoXY>:
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	c8 2f       	mov	r28, r24
     1ae:	d6 2f       	mov	r29, r22
     1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	8c 0f       	add	r24, r28
     1b8:	8e 3f       	cpi	r24, 0xFE	; 254
     1ba:	08 f0       	brcs	.+2      	; 0x1be <LCDGotoXY+0x16>
     1bc:	c1 e0       	ldi	r28, 0x01	; 1
     1be:	c0 93 09 01 	sts	0x0109, r28	; 0x800109 <cursorPosition>
     1c2:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <cursorLine>
     1c6:	d2 30       	cpi	r29, 0x02	; 2
     1c8:	41 f0       	breq	.+16     	; 0x1da <LCDGotoXY+0x32>
     1ca:	28 f0       	brcs	.+10     	; 0x1d6 <LCDGotoXY+0x2e>
     1cc:	d4 30       	cpi	r29, 0x04	; 4
     1ce:	49 f0       	breq	.+18     	; 0x1e2 <LCDGotoXY+0x3a>
     1d0:	30 f0       	brcs	.+12     	; 0x1de <LCDGotoXY+0x36>
     1d2:	df 3f       	cpi	r29, 0xFF	; 255
     1d4:	39 f4       	brne	.+14     	; 0x1e4 <LCDGotoXY+0x3c>
     1d6:	c1 50       	subi	r28, 0x01	; 1
     1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <LCDGotoXY+0x3c>
     1da:	c1 5c       	subi	r28, 0xC1	; 193
     1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <LCDGotoXY+0x3c>
     1de:	c1 5f       	subi	r28, 0xF1	; 241
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <LCDGotoXY+0x3c>
     1e2:	c1 5b       	subi	r28, 0xB1	; 177
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	8c 2f       	mov	r24, r28
     1e8:	80 68       	ori	r24, 0x80	; 128
     1ea:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <LCDWriteString>:
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	ec 01       	movw	r28, r24
     1fe:	01 e0       	ldi	r16, 0x01	; 1
     200:	11 e0       	ldi	r17, 0x01	; 1
     202:	19 c0       	rjmp	.+50     	; 0x236 <LCDWriteString+0x42>
     204:	11 31       	cpi	r17, 0x11	; 17
     206:	90 f0       	brcs	.+36     	; 0x22c <LCDWriteString+0x38>
     208:	01 30       	cpi	r16, 0x01	; 1
     20a:	29 f4       	brne	.+10     	; 0x216 <LCDWriteString+0x22>
     20c:	62 e0       	ldi	r22, 0x02	; 2
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDGotoXY>
     214:	02 e0       	ldi	r16, 0x02	; 2
     216:	02 30       	cpi	r16, 0x02	; 2
     218:	30 f0       	brcs	.+12     	; 0x226 <LCDWriteString+0x32>
     21a:	88 81       	ld	r24, Y
     21c:	80 32       	cpi	r24, 0x20	; 32
     21e:	29 f4       	brne	.+10     	; 0x22a <LCDWriteString+0x36>
     220:	21 96       	adiw	r28, 0x01	; 1
     222:	11 e0       	ldi	r17, 0x01	; 1
     224:	03 c0       	rjmp	.+6      	; 0x22c <LCDWriteString+0x38>
     226:	11 e0       	ldi	r17, 0x01	; 1
     228:	01 c0       	rjmp	.+2      	; 0x22c <LCDWriteString+0x38>
     22a:	11 e0       	ldi	r17, 0x01	; 1
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	89 91       	ld	r24, Y+
     230:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     234:	1f 5f       	subi	r17, 0xFF	; 255
     236:	88 81       	ld	r24, Y
     238:	81 11       	cpse	r24, r1
     23a:	e4 cf       	rjmp	.-56     	; 0x204 <LCDWriteString+0x10>
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	08 95       	ret

00000246 <LCDWriteInt>:
     246:	8f 92       	push	r8
     248:	9f 92       	push	r9
     24a:	af 92       	push	r10
     24c:	bf 92       	push	r11
     24e:	df 92       	push	r13
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
     260:	2a 97       	sbiw	r28, 0x0a	; 10
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	4b 01       	movw	r8, r22
     26e:	5c 01       	movw	r10, r24
     270:	14 2f       	mov	r17, r20
     272:	fe 01       	movw	r30, r28
     274:	31 96       	adiw	r30, 0x01	; 1
     276:	8a e0       	ldi	r24, 0x0A	; 10
     278:	df 01       	movw	r26, r30
     27a:	1d 92       	st	X+, r1
     27c:	8a 95       	dec	r24
     27e:	e9 f7       	brne	.-6      	; 0x27a <LCDWriteInt+0x34>
     280:	81 14       	cp	r8, r1
     282:	91 04       	cpc	r9, r1
     284:	a1 04       	cpc	r10, r1
     286:	b1 04       	cpc	r11, r1
     288:	11 f0       	breq	.+4      	; 0x28e <LCDWriteInt+0x48>
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	01 c0       	rjmp	.+2      	; 0x290 <LCDWriteInt+0x4a>
     28e:	01 e0       	ldi	r16, 0x01	; 1
     290:	a5 01       	movw	r20, r10
     292:	94 01       	movw	r18, r8
     294:	09 c0       	rjmp	.+18     	; 0x2a8 <LCDWriteInt+0x62>
     296:	0f 5f       	subi	r16, 0xFF	; 255
     298:	ca 01       	movw	r24, r20
     29a:	b9 01       	movw	r22, r18
     29c:	2a e0       	ldi	r18, 0x0A	; 10
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__divmodsi4>
     2a8:	21 15       	cp	r18, r1
     2aa:	31 05       	cpc	r19, r1
     2ac:	41 05       	cpc	r20, r1
     2ae:	51 05       	cpc	r21, r1
     2b0:	91 f7       	brne	.-28     	; 0x296 <LCDWriteInt+0x50>
     2b2:	10 1b       	sub	r17, r16
     2b4:	0a f4       	brpl	.+2      	; 0x2b8 <LCDWriteInt+0x72>
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	bb 20       	and	r11, r11
     2ba:	64 f4       	brge	.+24     	; 0x2d4 <LCDWriteInt+0x8e>
     2bc:	b0 94       	com	r11
     2be:	a0 94       	com	r10
     2c0:	90 94       	com	r9
     2c2:	80 94       	com	r8
     2c4:	81 1c       	adc	r8, r1
     2c6:	91 1c       	adc	r9, r1
     2c8:	a1 1c       	adc	r10, r1
     2ca:	b1 1c       	adc	r11, r1
     2cc:	0f 5f       	subi	r16, 0xFF	; 255
     2ce:	dd 24       	eor	r13, r13
     2d0:	d3 94       	inc	r13
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <LCDWriteInt+0x90>
     2d4:	d1 2c       	mov	r13, r1
     2d6:	10 0f       	add	r17, r16
     2d8:	22 c0       	rjmp	.+68     	; 0x31e <LCDWriteInt+0xd8>
     2da:	1a 30       	cpi	r17, 0x0A	; 10
     2dc:	a8 f4       	brcc	.+42     	; 0x308 <LCDWriteInt+0xc2>
     2de:	e1 2e       	mov	r14, r17
     2e0:	f1 2c       	mov	r15, r1
     2e2:	b1 e0       	ldi	r27, 0x01	; 1
     2e4:	eb 1a       	sub	r14, r27
     2e6:	f1 08       	sbc	r15, r1
     2e8:	c5 01       	movw	r24, r10
     2ea:	b4 01       	movw	r22, r8
     2ec:	2a e0       	ldi	r18, 0x0A	; 10
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__divmodsi4>
     2f8:	e1 e0       	ldi	r30, 0x01	; 1
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	ec 0f       	add	r30, r28
     2fe:	fd 1f       	adc	r31, r29
     300:	ee 0d       	add	r30, r14
     302:	ff 1d       	adc	r31, r15
     304:	60 5d       	subi	r22, 0xD0	; 208
     306:	60 83       	st	Z, r22
     308:	c5 01       	movw	r24, r10
     30a:	b4 01       	movw	r22, r8
     30c:	2a e0       	ldi	r18, 0x0A	; 10
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__divmodsi4>
     318:	49 01       	movw	r8, r18
     31a:	5a 01       	movw	r10, r20
     31c:	11 50       	subi	r17, 0x01	; 1
     31e:	11 11       	cpse	r17, r1
     320:	dc cf       	rjmp	.-72     	; 0x2da <LCDWriteInt+0x94>
     322:	dd 20       	and	r13, r13
     324:	11 f0       	breq	.+4      	; 0x32a <LCDWriteInt+0xe4>
     326:	8d e2       	ldi	r24, 0x2D	; 45
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	ce 01       	movw	r24, r28
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     332:	2a 96       	adiw	r28, 0x0a	; 10
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	df 90       	pop	r13
     34c:	bf 90       	pop	r11
     34e:	af 90       	pop	r10
     350:	9f 90       	pop	r9
     352:	8f 90       	pop	r8
     354:	08 95       	ret

00000356 <LCDSetup>:
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	f8 2e       	mov	r15, r24
     362:	88 ee       	ldi	r24, 0xE8	; 232
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	05 c0       	rjmp	.+10     	; 0x372 <LCDSetup+0x1c>
     368:	e0 e9       	ldi	r30, 0x90	; 144
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <LCDSetup+0x16>
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	c9 f7       	brne	.-14     	; 0x368 <LCDSetup+0x12>
     376:	87 b1       	in	r24, 0x07	; 7
     378:	8c 63       	ori	r24, 0x3C	; 60
     37a:	87 b9       	out	0x07, r24	; 7
     37c:	88 b1       	in	r24, 0x08	; 8
     37e:	83 7c       	andi	r24, 0xC3	; 195
     380:	88 b9       	out	0x08, r24	; 8
     382:	8a b1       	in	r24, 0x0a	; 10
     384:	84 60       	ori	r24, 0x04	; 4
     386:	8a b9       	out	0x0a, r24	; 10
     388:	8a b1       	in	r24, 0x0a	; 10
     38a:	88 60       	ori	r24, 0x08	; 8
     38c:	8a b9       	out	0x0a, r24	; 10
     38e:	8a b1       	in	r24, 0x0a	; 10
     390:	8c 61       	ori	r24, 0x1C	; 28
     392:	8a b9       	out	0x0a, r24	; 10
     394:	8b b1       	in	r24, 0x0b	; 11
     396:	8f 7e       	andi	r24, 0xEF	; 239
     398:	8b b9       	out	0x0b, r24	; 11
     39a:	8b b1       	in	r24, 0x0b	; 11
     39c:	87 7f       	andi	r24, 0xF7	; 247
     39e:	8b b9       	out	0x0b, r24	; 11
     3a0:	8b b1       	in	r24, 0x0b	; 11
     3a2:	8b 7f       	andi	r24, 0xFB	; 251
     3a4:	8b b9       	out	0x0b, r24	; 11
     3a6:	88 b1       	in	r24, 0x08	; 8
     3a8:	8c 60       	ori	r24, 0x0C	; 12
     3aa:	88 b9       	out	0x08, r24	; 8
     3ac:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     3b0:	88 b1       	in	r24, 0x08	; 8
     3b2:	83 7c       	andi	r24, 0xC3	; 195
     3b4:	88 b9       	out	0x08, r24	; 8
     3b6:	00 e4       	ldi	r16, 0x40	; 64
     3b8:	1c e9       	ldi	r17, 0x9C	; 156
     3ba:	c8 01       	movw	r24, r16
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <LCDSetup+0x66>
     3c0:	88 b1       	in	r24, 0x08	; 8
     3c2:	8c 60       	ori	r24, 0x0C	; 12
     3c4:	88 b9       	out	0x08, r24	; 8
     3c6:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     3ca:	88 b1       	in	r24, 0x08	; 8
     3cc:	83 7c       	andi	r24, 0xC3	; 195
     3ce:	88 b9       	out	0x08, r24	; 8
     3d0:	c0 ea       	ldi	r28, 0xA0	; 160
     3d2:	df e0       	ldi	r29, 0x0F	; 15
     3d4:	ce 01       	movw	r24, r28
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <LCDSetup+0x80>
     3da:	88 b1       	in	r24, 0x08	; 8
     3dc:	8c 60       	ori	r24, 0x0C	; 12
     3de:	88 b9       	out	0x08, r24	; 8
     3e0:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     3e4:	88 b1       	in	r24, 0x08	; 8
     3e6:	83 7c       	andi	r24, 0xC3	; 195
     3e8:	88 b9       	out	0x08, r24	; 8
     3ea:	ce 01       	movw	r24, r28
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCDSetup+0x96>
     3f0:	88 b1       	in	r24, 0x08	; 8
     3f2:	88 60       	ori	r24, 0x08	; 8
     3f4:	88 b9       	out	0x08, r24	; 8
     3f6:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     3fa:	88 b1       	in	r24, 0x08	; 8
     3fc:	83 7c       	andi	r24, 0xC3	; 195
     3fe:	88 b9       	out	0x08, r24	; 8
     400:	ce 01       	movw	r24, r28
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     406:	88 b1       	in	r24, 0x08	; 8
     408:	88 60       	ori	r24, 0x08	; 8
     40a:	88 b9       	out	0x08, r24	; 8
     40c:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     410:	88 b1       	in	r24, 0x08	; 8
     412:	83 7c       	andi	r24, 0xC3	; 195
     414:	88 b9       	out	0x08, r24	; 8
     416:	ce 01       	movw	r24, r28
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     41c:	88 b1       	in	r24, 0x08	; 8
     41e:	80 62       	ori	r24, 0x20	; 32
     420:	88 b9       	out	0x08, r24	; 8
     422:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     426:	88 b1       	in	r24, 0x08	; 8
     428:	83 7c       	andi	r24, 0xC3	; 195
     42a:	88 b9       	out	0x08, r24	; 8
     42c:	ce 01       	movw	r24, r28
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     432:	88 b1       	in	r24, 0x08	; 8
     434:	84 60       	ori	r24, 0x04	; 4
     436:	88 b9       	out	0x08, r24	; 8
     438:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     43c:	88 b1       	in	r24, 0x08	; 8
     43e:	83 7c       	andi	r24, 0xC3	; 195
     440:	88 b9       	out	0x08, r24	; 8
     442:	80 e2       	ldi	r24, 0x20	; 32
     444:	9e e4       	ldi	r25, 0x4E	; 78
     446:	01 97       	sbiw	r24, 0x01	; 1
     448:	f1 f7       	brne	.-4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     44a:	88 b1       	in	r24, 0x08	; 8
     44c:	88 61       	ori	r24, 0x18	; 24
     44e:	88 b9       	out	0x08, r24	; 8
     450:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     454:	88 b1       	in	r24, 0x08	; 8
     456:	83 7c       	andi	r24, 0xC3	; 195
     458:	88 b9       	out	0x08, r24	; 8
     45a:	ce 01       	movw	r24, r28
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     460:	88 b1       	in	r24, 0x08	; 8
     462:	80 63       	ori	r24, 0x30	; 48
     464:	88 b9       	out	0x08, r24	; 8
     466:	21 97       	sbiw	r28, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     46a:	88 b1       	in	r24, 0x08	; 8
     46c:	83 7c       	andi	r24, 0xC3	; 195
     46e:	88 b9       	out	0x08, r24	; 8
     470:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     474:	88 b1       	in	r24, 0x08	; 8
     476:	88 60       	ori	r24, 0x08	; 8
     478:	88 b9       	out	0x08, r24	; 8
     47a:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     47e:	88 b1       	in	r24, 0x08	; 8
     480:	83 7c       	andi	r24, 0xC3	; 195
     482:	88 b9       	out	0x08, r24	; 8
     484:	c8 01       	movw	r24, r16
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	8f 2d       	mov	r24, r15
     48e:	8c 60       	ori	r24, 0x0C	; 12
     490:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	80 e8       	ldi	r24, 0x80	; 128
     4a0:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	08 95       	ret

000004b0 <DHT11Setup>:
     4b0:	80 e2       	ldi	r24, 0x20	; 32
     4b2:	9e e4       	ldi	r25, 0x4E	; 78
     4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <DHT11Setup+0x10>
     4b6:	e0 e9       	ldi	r30, 0x90	; 144
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <DHT11Setup+0xa>
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	c9 f7       	brne	.-14     	; 0x4b6 <DHT11Setup+0x6>
     4c4:	84 b1       	in	r24, 0x04	; 4
     4c6:	81 60       	ori	r24, 0x01	; 1
     4c8:	84 b9       	out	0x04, r24	; 4
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <__data_end>
     4d0:	08 95       	ret

000004d2 <DHT11DisplayTemperatureF>:
     4d2:	8e e0       	ldi	r24, 0x0E	; 14
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     4da:	60 91 ad 04 	lds	r22, 0x04AD	; 0x8004ad <DHT11Data+0x2>
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__floatsisf>
     4e8:	26 e6       	ldi	r18, 0x66	; 102
     4ea:	36 e6       	ldi	r19, 0x66	; 102
     4ec:	46 ee       	ldi	r20, 0xE6	; 230
     4ee:	5f e3       	ldi	r21, 0x3F	; 63
     4f0:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	52 e4       	ldi	r21, 0x42	; 66
     4fc:	0e 94 33 06 	call	0xc66	; 0xc66 <__addsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	a9 01       	movw	r20, r18
     506:	0e 94 33 06 	call	0xc66	; 0xc66 <__addsf3>
     50a:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fixsfsi>
     50e:	42 e0       	ldi	r20, 0x02	; 2
     510:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	8f ed       	ldi	r24, 0xDF	; 223
     518:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	86 e4       	ldi	r24, 0x46	; 70
     520:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     524:	08 95       	ret

00000526 <DHT11DisplayTemperatureC>:
     526:	8e e0       	ldi	r24, 0x0E	; 14
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     52e:	60 91 ad 04 	lds	r22, 0x04AD	; 0x8004ad <DHT11Data+0x2>
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	42 e0       	ldi	r20, 0x02	; 2
     53a:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	8f ed       	ldi	r24, 0xDF	; 223
     542:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	83 e4       	ldi	r24, 0x43	; 67
     54a:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     54e:	08 95       	ret

00000550 <DHT11WriteTemperatureEEPROM>:
     550:	f9 99       	sbic	0x1f, 1	; 31
     552:	fe cf       	rjmp	.-4      	; 0x550 <DHT11WriteTemperatureEEPROM>
     554:	f8 94       	cli
     556:	60 91 ad 04 	lds	r22, 0x04AD	; 0x8004ad <DHT11Data+0x2>
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 f7 08 	call	0x11ee	; 0x11ee <eeprom_write_word>
     564:	78 94       	sei
     566:	08 95       	ret

00000568 <DHT11DisplayHumidity>:
     568:	81 e1       	ldi	r24, 0x11	; 17
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     570:	60 91 ab 04 	lds	r22, 0x04AB	; 0x8004ab <DHT11Data>
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	42 e0       	ldi	r20, 0x02	; 2
     57c:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	85 e2       	ldi	r24, 0x25	; 37
     584:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     588:	08 95       	ret

0000058a <DHT11WriteHumidityEEPROM>:
     58a:	f9 99       	sbic	0x1f, 1	; 31
     58c:	fe cf       	rjmp	.-4      	; 0x58a <DHT11WriteHumidityEEPROM>
     58e:	f8 94       	cli
     590:	60 91 ab 04 	lds	r22, 0x04AB	; 0x8004ab <DHT11Data>
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	83 e0       	ldi	r24, 0x03	; 3
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <eeprom_write_word>
     59e:	78 94       	sei
     5a0:	08 95       	ret

000005a2 <DHT11ReadData>:
     5a2:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <__data_end>
     5a6:	81 11       	cpse	r24, r1
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DHT11ReadData+0xc>
     5aa:	0e 94 58 02 	call	0x4b0	; 0x4b0 <DHT11Setup>
     5ae:	84 b1       	in	r24, 0x04	; 4
     5b0:	81 60       	ori	r24, 0x01	; 1
     5b2:	84 b9       	out	0x04, r24	; 4
     5b4:	85 b1       	in	r24, 0x05	; 5
     5b6:	8e 7f       	andi	r24, 0xFE	; 254
     5b8:	85 b9       	out	0x05, r24	; 5
     5ba:	88 ec       	ldi	r24, 0xC8	; 200
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <DHT11ReadData+0x28>
     5c0:	e0 e9       	ldi	r30, 0x90	; 144
     5c2:	f1 e0       	ldi	r31, 0x01	; 1
     5c4:	31 97       	sbiw	r30, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <DHT11ReadData+0x22>
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	00 97       	sbiw	r24, 0x00	; 0
     5cc:	c9 f7       	brne	.-14     	; 0x5c0 <DHT11ReadData+0x1e>
     5ce:	84 b1       	in	r24, 0x04	; 4
     5d0:	8e 7f       	andi	r24, 0xFE	; 254
     5d2:	84 b9       	out	0x04, r24	; 4
     5d4:	8a ea       	ldi	r24, 0xAA	; 170
     5d6:	8a 95       	dec	r24
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <DHT11ReadData+0x34>
     5da:	18 99       	sbic	0x03, 0	; 3
     5dc:	5f c0       	rjmp	.+190    	; 0x69c <DHT11ReadData+0xfa>
     5de:	88 e4       	ldi	r24, 0x48	; 72
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <DHT11ReadData+0x40>
     5e6:	18 9b       	sbis	0x03, 0	; 3
     5e8:	5b c0       	rjmp	.+182    	; 0x6a0 <DHT11ReadData+0xfe>
     5ea:	88 e4       	ldi	r24, 0x48	; 72
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <DHT11ReadData+0x4c>
     5f2:	18 99       	sbic	0x03, 0	; 3
     5f4:	57 c0       	rjmp	.+174    	; 0x6a4 <DHT11ReadData+0x102>
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	33 c0       	rjmp	.+102    	; 0x660 <DHT11ReadData+0xbe>
     5fa:	8f 5f       	subi	r24, 0xFF	; 255
     5fc:	89 30       	cpi	r24, 0x09	; 9
     5fe:	38 f4       	brcc	.+14     	; 0x60e <DHT11ReadData+0x6c>
     600:	95 e3       	ldi	r25, 0x35	; 53
     602:	9a 95       	dec	r25
     604:	f1 f7       	brne	.-4      	; 0x602 <DHT11ReadData+0x60>
     606:	01 c0       	rjmp	.+2      	; 0x60a <DHT11ReadData+0x68>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	18 9b       	sbis	0x03, 0	; 3
     60c:	f6 cf       	rjmp	.-20     	; 0x5fa <DHT11ReadData+0x58>
     60e:	18 9b       	sbis	0x03, 0	; 3
     610:	4b c0       	rjmp	.+150    	; 0x6a8 <DHT11ReadData+0x106>
     612:	85 ed       	ldi	r24, 0xD5	; 213
     614:	8a 95       	dec	r24
     616:	f1 f7       	brne	.-4      	; 0x614 <DHT11ReadData+0x72>
     618:	18 9b       	sbis	0x03, 0	; 3
     61a:	0c c0       	rjmp	.+24     	; 0x634 <DHT11ReadData+0x92>
     61c:	47 e0       	ldi	r20, 0x07	; 7
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	42 1b       	sub	r20, r18
     622:	51 09       	sbc	r21, r1
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	02 c0       	rjmp	.+4      	; 0x62e <DHT11ReadData+0x8c>
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	4a 95       	dec	r20
     630:	e2 f7       	brpl	.-8      	; 0x62a <DHT11ReadData+0x88>
     632:	38 2b       	or	r19, r24
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	06 c0       	rjmp	.+12     	; 0x644 <DHT11ReadData+0xa2>
     638:	8f 5f       	subi	r24, 0xFF	; 255
     63a:	89 30       	cpi	r24, 0x09	; 9
     63c:	28 f4       	brcc	.+10     	; 0x648 <DHT11ReadData+0xa6>
     63e:	95 e3       	ldi	r25, 0x35	; 53
     640:	9a 95       	dec	r25
     642:	f1 f7       	brne	.-4      	; 0x640 <DHT11ReadData+0x9e>
     644:	18 99       	sbic	0x03, 0	; 3
     646:	f8 cf       	rjmp	.-16     	; 0x638 <DHT11ReadData+0x96>
     648:	2f 5f       	subi	r18, 0xFF	; 255
     64a:	02 c0       	rjmp	.+4      	; 0x650 <DHT11ReadData+0xae>
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	28 30       	cpi	r18, 0x08	; 8
     652:	d0 f2       	brcs	.-76     	; 0x608 <DHT11ReadData+0x66>
     654:	e6 2f       	mov	r30, r22
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	e5 55       	subi	r30, 0x55	; 85
     65a:	fb 4f       	sbci	r31, 0xFB	; 251
     65c:	30 83       	st	Z, r19
     65e:	6f 5f       	subi	r22, 0xFF	; 255
     660:	65 30       	cpi	r22, 0x05	; 5
     662:	a0 f3       	brcs	.-24     	; 0x64c <DHT11ReadData+0xaa>
     664:	80 ef       	ldi	r24, 0xF0	; 240
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <DHT11ReadData+0xc6>
     66c:	eb ea       	ldi	r30, 0xAB	; 171
     66e:	f4 e0       	ldi	r31, 0x04	; 4
     670:	30 81       	ld	r19, Z
     672:	21 81       	ldd	r18, Z+1	; 0x01
     674:	92 81       	ldd	r25, Z+2	; 0x02
     676:	83 81       	ldd	r24, Z+3	; 0x03
     678:	23 0f       	add	r18, r19
     67a:	92 0f       	add	r25, r18
     67c:	89 0f       	add	r24, r25
     67e:	94 81       	ldd	r25, Z+4	; 0x04
     680:	89 13       	cpse	r24, r25
     682:	14 c0       	rjmp	.+40     	; 0x6ac <DHT11ReadData+0x10a>
     684:	80 e1       	ldi	r24, 0x10	; 16
     686:	97 e2       	ldi	r25, 0x27	; 39
     688:	05 c0       	rjmp	.+10     	; 0x694 <DHT11ReadData+0xf2>
     68a:	e0 e9       	ldi	r30, 0x90	; 144
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <DHT11ReadData+0xec>
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	00 97       	sbiw	r24, 0x00	; 0
     696:	c9 f7       	brne	.-14     	; 0x68a <DHT11ReadData+0xe8>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	08 95       	ret
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	08 95       	ret
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	08 95       	ret
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	08 95       	ret
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	08 95       	ret
     6ac:	8f ef       	ldi	r24, 0xFF	; 255
     6ae:	08 95       	ret

000006b0 <adc_init>:
		}
    }
}

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));		//16Mhz/128 = 125Khz the ADC reference clock
     6b0:	ea e7       	ldi	r30, 0x7A	; 122
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	87 60       	ori	r24, 0x07	; 7
     6b8:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);								//Voltage reference from Avcc (5v)
     6ba:	ac e7       	ldi	r26, 0x7C	; 124
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	8c 91       	ld	r24, X
     6c0:	80 64       	ori	r24, 0x40	; 64
     6c2:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);								//Turn on ADC
     6c4:	80 81       	ld	r24, Z
     6c6:	80 68       	ori	r24, 0x80	; 128
     6c8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);								//Do an initial conversion because this one is the slowest
     6ca:	80 81       	ld	r24, Z
     6cc:	80 64       	ori	r24, 0x40	; 64
     6ce:	80 83       	st	Z, r24
     6d0:	08 95       	ret

000006d2 <read_adc>:
}

uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;						//Clear the older channel that was read
     6d2:	ec e7       	ldi	r30, 0x7C	; 124
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	90 81       	ld	r25, Z
     6d8:	90 7f       	andi	r25, 0xF0	; 240
     6da:	90 83       	st	Z, r25
	ADMUX |= channel;					//Defines the new ADC channel to be read
     6dc:	90 81       	ld	r25, Z
     6de:	89 2b       	or	r24, r25
     6e0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
     6e2:	ea e7       	ldi	r30, 0x7A	; 122
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	80 64       	ori	r24, 0x40	; 64
     6ea:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
     6ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6f0:	86 fd       	sbrc	r24, 6
     6f2:	fc cf       	rjmp	.-8      	; 0x6ec <read_adc+0x1a>
	return (ADCW*5);                    //Returns the ADC value of the chosen channel
     6f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     6fc:	9c 01       	movw	r18, r24
     6fe:	22 0f       	add	r18, r18
     700:	33 1f       	adc	r19, r19
     702:	22 0f       	add	r18, r18
     704:	33 1f       	adc	r19, r19
}
     706:	82 0f       	add	r24, r18
     708:	93 1f       	adc	r25, r19
     70a:	08 95       	ret

0000070c <USART_init>:

void USART_init(void){
	UBRR0H = (uint8_t)(BAUD_PRESCALER>>8);	//Setting Baud rate
     70c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALER);		//Setting Baud rate
     710:	87 e6       	ldi	r24, 0x67	; 103
     712:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);			//Enable receiver (RXEN0) and transmitter (TXENO)
     716:	e1 ec       	ldi	r30, 0xC1	; 193
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	88 e1       	ldi	r24, 0x18	; 24
     71c:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSR0B)|(3<<UCSZ00);		//From datasheet, set format:8data, 2stop bit
     71e:	20 81       	ld	r18, Z
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	02 c0       	rjmp	.+4      	; 0x72a <USART_init+0x1e>
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	2a 95       	dec	r18
     72c:	e2 f7       	brpl	.-8      	; 0x726 <USART_init+0x1a>
     72e:	86 60       	ori	r24, 0x06	; 6
     730:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt 
     734:	80 81       	ld	r24, Z
     736:	80 68       	ori	r24, 0x80	; 128
     738:	80 83       	st	Z, r24
	sei(); // Enable the Global Interrupt Enable flag so that interrupts can be processed
     73a:	78 94       	sei
     73c:	08 95       	ret

0000073e <USART_send>:
	UDR0 = ReceivedByte; //echo
	ReceivedByte = UDR0; // Next char
}

void USART_send(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));			//While UDRE0 (USART Data Register flag) is clear,
     73e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     742:	95 ff       	sbrs	r25, 5
     744:	fc cf       	rjmp	.-8      	; 0x73e <USART_send>
	UDR0 = data;	
     746:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     74a:	08 95       	ret

0000074c <USART_putstring>:
}

void USART_putstring(char* StringPtr){
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
     752:	03 c0       	rjmp	.+6      	; 0x75a <USART_putstring+0xe>
		USART_send(*StringPtr);
     754:	0e 94 9f 03 	call	0x73e	; 0x73e <USART_send>
	StringPtr++;}	
     758:	21 96       	adiw	r28, 0x01	; 1
	while(!(UCSR0A & (1<<UDRE0)));			//While UDRE0 (USART Data Register flag) is clear,
	UDR0 = data;	
}

void USART_putstring(char* StringPtr){
	while(*StringPtr != 0x00){
     75a:	88 81       	ld	r24, Y
     75c:	81 11       	cpse	r24, r1
     75e:	fa cf       	rjmp	.-12     	; 0x754 <USART_putstring+0x8>
		USART_send(*StringPtr);
	StringPtr++;}	
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <main>:
int readValue = 2;
char buffer[5];	

int main(void)
{
	all = 1;
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <all+0x1>
     76e:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <all>
	dt = 1;
     772:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <dt+0x1>
     776:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <dt>
	fahren = 0;
     77a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <fahren+0x1>
     77e:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <fahren>
	LCDSetup(LCD_CURSOR_NONE);	
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	0e 94 ab 01 	call	0x356	; 0x356 <LCDSetup>
	adc_init();
     788:	0e 94 58 03 	call	0x6b0	; 0x6b0 <adc_init>
	USART_init();
     78c:	0e 94 86 03 	call	0x70c	; 0x70c <USART_init>

	USART_putstring("Measurements are being taken 1s apart. \r \n");
     790:	84 e1       	ldi	r24, 0x14	; 20
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("To specify the spacing of measurements in seconds, enter the command Sx, where x is desired seconds. \r \n");
     798:	8f e3       	ldi	r24, 0x3F	; 63
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("To specify which measurement to view, enter the command: \r \n");
     7a0:	88 ea       	ldi	r24, 0xA8	; 168
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("T for temperature, \r \n");
     7a8:	85 ee       	ldi	r24, 0xE5	; 229
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("B for brightness, \r \n");
     7b0:	8c ef       	ldi	r24, 0xFC	; 252
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("H for humidity, or \r \n");
     7b8:	82 e1       	ldi	r24, 0x12	; 18
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("A for all measurements. \r \n");
     7c0:	89 e2       	ldi	r24, 0x29	; 41
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("To display temperature in Fahrenheit, enter the command F. \r \n");
     7c8:	85 e4       	ldi	r24, 0x45	; 69
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("To display temperature in Celsius, enter the command C. \r \n");
     7d0:	84 e8       	ldi	r24, 0x84	; 132
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("To store brightness in EEPROM, enter the command W. \r \n");
     7d8:	80 ec       	ldi	r24, 0xC0	; 192
     7da:	92 e0       	ldi	r25, 0x02	; 2
     7dc:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("To read brightness stored in EEPROM, enter the command D. \r \n");
     7e0:	88 ef       	ldi	r24, 0xF8	; 248
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("To store temperature (in C) in EEPROM, enter the command Q. \r \n");
     7e8:	86 e3       	ldi	r24, 0x36	; 54
     7ea:	93 e0       	ldi	r25, 0x03	; 3
     7ec:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("To read temperature (in C) stored in EEPROM, enter the command G. \r \n");	
     7f0:	86 e7       	ldi	r24, 0x76	; 118
     7f2:	93 e0       	ldi	r25, 0x03	; 3
     7f4:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("To store humidity in EEPROM, enter the command J. \r \n");
     7f8:	8c eb       	ldi	r24, 0xBC	; 188
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	USART_putstring("To read humidity stored in EEPROM, enter the command K. \r \n");
     800:	82 ef       	ldi	r24, 0xF2	; 242
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
		
    while (1) 
    {
		_delay_ms(dt*1000);
     808:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <dt>
     80c:	30 91 bd 04 	lds	r19, 0x04BD	; 0x8004bd <dt+0x1>
     810:	88 ee       	ldi	r24, 0xE8	; 232
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	28 9f       	mul	r18, r24
     816:	b0 01       	movw	r22, r0
     818:	29 9f       	mul	r18, r25
     81a:	70 0d       	add	r23, r0
     81c:	38 9f       	mul	r19, r24
     81e:	70 0d       	add	r23, r0
     820:	11 24       	eor	r1, r1
     822:	07 2e       	mov	r0, r23
     824:	00 0c       	add	r0, r0
     826:	88 0b       	sbc	r24, r24
     828:	99 0b       	sbc	r25, r25
     82a:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__floatsisf>
     82e:	4b 01       	movw	r8, r22
     830:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	4a e7       	ldi	r20, 0x7A	; 122
     838:	55 e4       	ldi	r21, 0x45	; 69
     83a:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3>
     83e:	6b 01       	movw	r12, r22
     840:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	40 e8       	ldi	r20, 0x80	; 128
     848:	5f e3       	ldi	r21, 0x3F	; 63
     84a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__cmpsf2>
     84e:	88 23       	and	r24, r24
     850:	24 f1       	brlt	.+72     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
		__ticks = 1;
	else if (__tmp > 65535)
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	3f ef       	ldi	r19, 0xFF	; 255
     856:	4f e7       	ldi	r20, 0x7F	; 127
     858:	57 e4       	ldi	r21, 0x47	; 71
     85a:	c7 01       	movw	r24, r14
     85c:	b6 01       	movw	r22, r12
     85e:	0e 94 fe 07 	call	0xffc	; 0xffc <__gesf2>
     862:	18 16       	cp	r1, r24
     864:	ac f4       	brge	.+42     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e2       	ldi	r20, 0x20	; 32
     86c:	51 e4       	ldi	r21, 0x41	; 65
     86e:	c5 01       	movw	r24, r10
     870:	b4 01       	movw	r22, r8
     872:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3>
     876:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fixunssfsi>
     87a:	06 c0       	rjmp	.+12     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     87c:	80 e9       	ldi	r24, 0x90	; 144
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     884:	61 50       	subi	r22, 0x01	; 1
     886:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     888:	61 15       	cp	r22, r1
     88a:	71 05       	cpc	r23, r1
     88c:	b9 f7       	brne	.-18     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     88e:	0a c0       	rjmp	.+20     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     890:	c7 01       	movw	r24, r14
     892:	b6 01       	movw	r22, r12
     894:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fixunssfsi>
     898:	02 c0       	rjmp	.+4      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	cb 01       	movw	r24, r22
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
	
		DHTreturnCode = DHT11ReadData();		//Function to read and check the sensor data
     8a4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DHT11ReadData>
     8a8:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <DHTreturnCode>
		if(DHTreturnCode == -1){
     8ac:	8f 3f       	cpi	r24, 0xFF	; 255
     8ae:	49 f4       	brne	.+18     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
			LCDHome();
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	80 e8       	ldi	r24, 0x80	; 128
     8b4:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
			LCDWriteString("Checksum Error");	//Error message on lcd to show data was received incorrectly
     8b8:	8e e2       	ldi	r24, 0x2E	; 46
     8ba:	94 e0       	ldi	r25, 0x04	; 4
     8bc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     8c0:	a3 cf       	rjmp	.-186    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
		} else {
			if (all == 1) {
     8c2:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <all>
     8c6:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <all+0x1>
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
     8ce:	41 c0       	rjmp	.+130    	; 0x952 <__stack+0x53>
				LCDHome();
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	80 e8       	ldi	r24, 0x80	; 128
     8d4:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				if (fahren == 1) {
     8d8:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <fahren>
     8dc:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <fahren+0x1>
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	19 f4       	brne	.+6      	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
					DHT11DisplayTemperatureF();			//Display Temp F
     8e4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DHT11DisplayTemperatureF>
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
				} else {
					DHT11DisplayTemperatureC();			//Display Temp C
     8ea:	0e 94 93 02 	call	0x526	; 0x526 <DHT11DisplayTemperatureC>
				}
				LCDGotoXY(8,1);
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	88 e0       	ldi	r24, 0x08	; 8
     8f2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDGotoXY>
				LCDWriteString("B:");				//Display Brightness
     8f6:	8d e3       	ldi	r24, 0x3D	; 61
     8f8:	94 e0       	ldi	r25, 0x04	; 4
     8fa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
				adc_value =  ((float)read_adc(0)/2000)*100;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	0e 94 69 03 	call	0x6d2	; 0x6d2 <read_adc>
     904:	bc 01       	movw	r22, r24
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	4a ef       	ldi	r20, 0xFA	; 250
     914:	54 e4       	ldi	r21, 0x44	; 68
     916:	0e 94 a4 06 	call	0xd48	; 0xd48 <__divsf3>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	48 ec       	ldi	r20, 0xC8	; 200
     920:	52 e4       	ldi	r21, 0x42	; 66
     922:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3>
     926:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fixunssfsi>
     92a:	70 93 b6 04 	sts	0x04B6, r23	; 0x8004b6 <adc_value+0x1>
     92e:	60 93 b5 04 	sts	0x04B5, r22	; 0x8004b5 <adc_value>
				LCDWriteInt(adc_value,3);
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	43 e0       	ldi	r20, 0x03	; 3
     938:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
				LCDWriteString("%");
     93c:	80 e4       	ldi	r24, 0x40	; 64
     93e:	94 e0       	ldi	r25, 0x04	; 4
     940:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
				LCDGotoXY(1,2);
     944:	62 e0       	ldi	r22, 0x02	; 2
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDGotoXY>
				DHT11DisplayHumidity();				//Display Humidity
     94c:	0e 94 b4 02 	call	0x568	; 0x568 <DHT11DisplayHumidity>
     950:	5b cf       	rjmp	.-330    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
			}
			else if (temp == 1) {
     952:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <temp>
     956:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <temp+0x1>
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	81 f4       	brne	.+32     	; 0x97e <__stack+0x7f>
				LCDHome(); 
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	80 e8       	ldi	r24, 0x80	; 128
     962:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				if (fahren == 1) {
     966:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <fahren>
     96a:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <fahren+0x1>
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	19 f4       	brne	.+6      	; 0x978 <__stack+0x79>
					DHT11DisplayTemperatureF();			//Display Temp F
     972:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DHT11DisplayTemperatureF>
     976:	48 cf       	rjmp	.-368    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
				} else {
					DHT11DisplayTemperatureC();			//Display Temp C
     978:	0e 94 93 02 	call	0x526	; 0x526 <DHT11DisplayTemperatureC>
     97c:	45 cf       	rjmp	.-374    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
				}
			}
			else if (bright == 1) {
     97e:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <bright>
     982:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <bright+0x1>
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	61 f5       	brne	.+88     	; 0x9e2 <__stack+0xe3>
				LCDHome();
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	80 e8       	ldi	r24, 0x80	; 128
     98e:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				LCDWriteString("B:");				//Display Brightness
     992:	8d e3       	ldi	r24, 0x3D	; 61
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
				adc_value =  ((float)read_adc(0)/5050)*100;
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <read_adc>
     9a0:	bc 01       	movw	r22, r24
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 ed       	ldi	r19, 0xD0	; 208
     9ae:	4d e9       	ldi	r20, 0x9D	; 157
     9b0:	55 e4       	ldi	r21, 0x45	; 69
     9b2:	0e 94 a4 06 	call	0xd48	; 0xd48 <__divsf3>
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	48 ec       	ldi	r20, 0xC8	; 200
     9bc:	52 e4       	ldi	r21, 0x42	; 66
     9be:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3>
     9c2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fixunssfsi>
     9c6:	70 93 b6 04 	sts	0x04B6, r23	; 0x8004b6 <adc_value+0x1>
     9ca:	60 93 b5 04 	sts	0x04B5, r22	; 0x8004b5 <adc_value>
				LCDWriteInt(adc_value,3);
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	43 e0       	ldi	r20, 0x03	; 3
     9d4:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
				LCDWriteString("%");
     9d8:	80 e4       	ldi	r24, 0x40	; 64
     9da:	94 e0       	ldi	r25, 0x04	; 4
     9dc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     9e0:	13 cf       	rjmp	.-474    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
			}
			else if (humid == 1) {
     9e2:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <humid>
     9e6:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <humid+0x1>
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <__stack+0xf1>
     9ee:	0c cf       	rjmp	.-488    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
				LCDHome();
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	80 e8       	ldi	r24, 0x80	; 128
     9f4:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				DHT11DisplayHumidity();				//Display Humidity
     9f8:	0e 94 b4 02 	call	0x568	; 0x568 <DHT11DisplayHumidity>
     9fc:	05 cf       	rjmp	.-502    	; 0x808 <__DATA_REGION_LENGTH__+0x8>

000009fe <__vector_18>:
	UCSR0C = (1<<UCSR0B)|(3<<UCSZ00);		//From datasheet, set format:8data, 2stop bit
	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt 
	sei(); // Enable the Global Interrupt Enable flag so that interrupts can be processed
}

ISR(USART_RX_vect) {
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	cf 93       	push	r28
     a1e:	ef 93       	push	r30
     a20:	ff 93       	push	r31
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
     a22:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (ReceivedByte == 'S') {
     a26:	c3 35       	cpi	r28, 0x53	; 83
     a28:	51 f4       	brne	.+20     	; 0xa3e <__vector_18+0x40>
		ReceivedByte = UDR0;
     a2a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		dt = ReceivedByte - 48; //Change interval with which measurements are taken
     a2e:	8c 2f       	mov	r24, r28
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	c0 97       	sbiw	r24, 0x30	; 48
     a34:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <dt+0x1>
     a38:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <dt>
     a3c:	fd c0       	rjmp	.+506    	; 0xc38 <__vector_18+0x23a>
	}
	else if (ReceivedByte == 'T') {
     a3e:	c4 35       	cpi	r28, 0x54	; 84
     a40:	b9 f4       	brne	.+46     	; 0xa70 <__vector_18+0x72>
		LCDClear();
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		temp = 1;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <temp+0x1>
     a52:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <temp>
		all = 0;
     a56:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <all+0x1>
     a5a:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <all>
		bright = 0;
     a5e:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <bright+0x1>
     a62:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <bright>
		humid = 0;
     a66:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <humid+0x1>
     a6a:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <humid>
     a6e:	e4 c0       	rjmp	.+456    	; 0xc38 <__vector_18+0x23a>
	}
	else if (ReceivedByte == 'B') {
     a70:	c2 34       	cpi	r28, 0x42	; 66
     a72:	b9 f4       	brne	.+46     	; 0xaa2 <__vector_18+0xa4>
		LCDClear();
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		bright = 1;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <bright+0x1>
     a84:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <bright>
		all = 0;
     a88:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <all+0x1>
     a8c:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <all>
		temp = 0;
     a90:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <temp+0x1>
     a94:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <temp>
		humid = 0;
     a98:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <humid+0x1>
     a9c:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <humid>
     aa0:	cb c0       	rjmp	.+406    	; 0xc38 <__vector_18+0x23a>
	}
	else if (ReceivedByte == 'H') {
     aa2:	c8 34       	cpi	r28, 0x48	; 72
     aa4:	b9 f4       	brne	.+46     	; 0xad4 <__vector_18+0xd6>
		LCDClear();
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		humid = 1;
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <humid+0x1>
     ab6:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <humid>
		all = 0;
     aba:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <all+0x1>
     abe:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <all>
		bright = 0;
     ac2:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <bright+0x1>
     ac6:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <bright>
		temp = 0;
     aca:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <temp+0x1>
     ace:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <temp>
     ad2:	b2 c0       	rjmp	.+356    	; 0xc38 <__vector_18+0x23a>
	}
	else if (ReceivedByte == 'A') {
     ad4:	c1 34       	cpi	r28, 0x41	; 65
     ad6:	b9 f4       	brne	.+46     	; 0xb06 <__vector_18+0x108>
		LCDClear();
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		all = 1;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <all+0x1>
     ae8:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <all>
		temp = 0;
     aec:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <temp+0x1>
     af0:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <temp>
		bright = 0;
     af4:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <bright+0x1>
     af8:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <bright>
		humid = 0;
     afc:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <humid+0x1>
     b00:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <humid>
     b04:	99 c0       	rjmp	.+306    	; 0xc38 <__vector_18+0x23a>
	}
	else if (ReceivedByte == 'F') {
     b06:	c6 34       	cpi	r28, 0x46	; 70
     b08:	39 f4       	brne	.+14     	; 0xb18 <__vector_18+0x11a>
		fahren = 1;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <fahren+0x1>
     b12:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <fahren>
     b16:	90 c0       	rjmp	.+288    	; 0xc38 <__vector_18+0x23a>
	}
	else if (ReceivedByte == 'C') {
     b18:	c3 34       	cpi	r28, 0x43	; 67
     b1a:	29 f4       	brne	.+10     	; 0xb26 <__vector_18+0x128>
		fahren = 0;
     b1c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <fahren+0x1>
     b20:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <fahren>
     b24:	89 c0       	rjmp	.+274    	; 0xc38 <__vector_18+0x23a>
	}
	else if (ReceivedByte == 'W') { //store brightness in EEPROM
     b26:	c7 35       	cpi	r28, 0x57	; 87
     b28:	79 f4       	brne	.+30     	; 0xb48 <__vector_18+0x14a>
		while (!eeprom_is_ready());
     b2a:	f9 99       	sbic	0x1f, 1	; 31
     b2c:	fe cf       	rjmp	.-4      	; 0xb2a <__vector_18+0x12c>
		cli();
     b2e:	f8 94       	cli
		eeprom_write_word((uint16_t*)Baddr, adc_value);
     b30:	60 91 b5 04 	lds	r22, 0x04B5	; 0x8004b5 <adc_value>
     b34:	70 91 b6 04 	lds	r23, 0x04B6	; 0x8004b6 <adc_value+0x1>
     b38:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Baddr>
     b3c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Baddr+0x1>
     b40:	0e 94 f7 08 	call	0x11ee	; 0x11ee <eeprom_write_word>
		sei();
     b44:	78 94       	sei
     b46:	78 c0       	rjmp	.+240    	; 0xc38 <__vector_18+0x23a>
	}
	else if (ReceivedByte == 'D') { //read brightness stored in EEPROM
     b48:	c4 34       	cpi	r28, 0x44	; 68
     b4a:	09 f5       	brne	.+66     	; 0xb8e <__vector_18+0x190>
		while (!eeprom_is_ready());
     b4c:	f9 99       	sbic	0x1f, 1	; 31
     b4e:	fe cf       	rjmp	.-4      	; 0xb4c <__vector_18+0x14e>
		cli();
     b50:	f8 94       	cli
		readValue = eeprom_read_word((uint16_t*)Baddr); // => sensorValue
     b52:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Baddr>
     b56:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Baddr+0x1>
     b5a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <eeprom_read_word>
     b5e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b62:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		sei();
     b66:	78 94       	sei
		itoa(readValue, buffer,10);
     b68:	4a e0       	ldi	r20, 0x0A	; 10
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	67 eb       	ldi	r22, 0xB7	; 183
     b6e:	74 e0       	ldi	r23, 0x04	; 4
     b70:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b74:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b78:	0e 94 b1 08 	call	0x1162	; 0x1162 <itoa>
		USART_putstring("\r \n Stored brightness value = ");
     b7c:	82 e4       	ldi	r24, 0x42	; 66
     b7e:	94 e0       	ldi	r25, 0x04	; 4
     b80:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
		USART_putstring(buffer);
     b84:	87 eb       	ldi	r24, 0xB7	; 183
     b86:	94 e0       	ldi	r25, 0x04	; 4
     b88:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
     b8c:	55 c0       	rjmp	.+170    	; 0xc38 <__vector_18+0x23a>
	}
	else if (ReceivedByte == 'Q') { //store temperature (in C) in EEPROM
     b8e:	c1 35       	cpi	r28, 0x51	; 81
     b90:	19 f4       	brne	.+6      	; 0xb98 <__vector_18+0x19a>
		DHT11WriteTemperatureEEPROM();
     b92:	0e 94 a8 02 	call	0x550	; 0x550 <DHT11WriteTemperatureEEPROM>
     b96:	50 c0       	rjmp	.+160    	; 0xc38 <__vector_18+0x23a>
	}
	else if (ReceivedByte == 'G') { //read temperature (in C) stored in EEPROM
     b98:	c7 34       	cpi	r28, 0x47	; 71
     b9a:	29 f5       	brne	.+74     	; 0xbe6 <__vector_18+0x1e8>
		while (!eeprom_is_ready());
     b9c:	f9 99       	sbic	0x1f, 1	; 31
     b9e:	fe cf       	rjmp	.-4      	; 0xb9c <__vector_18+0x19e>
		cli();
     ba0:	f8 94       	cli
		readValue = eeprom_read_word((uint16_t*)Taddr); // => sensorValue
     ba2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Taddr>
     ba6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Taddr+0x1>
     baa:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <eeprom_read_word>
     bae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bb2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		sei();
     bb6:	78 94       	sei
		itoa(readValue, buffer,10);
     bb8:	4a e0       	ldi	r20, 0x0A	; 10
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	67 eb       	ldi	r22, 0xB7	; 183
     bbe:	74 e0       	ldi	r23, 0x04	; 4
     bc0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bc4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bc8:	0e 94 b1 08 	call	0x1162	; 0x1162 <itoa>
		USART_putstring("\r \n Stored temperature value = ");
     bcc:	81 e6       	ldi	r24, 0x61	; 97
     bce:	94 e0       	ldi	r25, 0x04	; 4
     bd0:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
		USART_putstring(buffer);
     bd4:	87 eb       	ldi	r24, 0xB7	; 183
     bd6:	94 e0       	ldi	r25, 0x04	; 4
     bd8:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
		USART_putstring("C \r \n");
     bdc:	81 e8       	ldi	r24, 0x81	; 129
     bde:	94 e0       	ldi	r25, 0x04	; 4
     be0:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
     be4:	29 c0       	rjmp	.+82     	; 0xc38 <__vector_18+0x23a>
	}
	else if (ReceivedByte == 'J') { //store humidity in EEPROM
     be6:	ca 34       	cpi	r28, 0x4A	; 74
     be8:	19 f4       	brne	.+6      	; 0xbf0 <__vector_18+0x1f2>
		DHT11WriteHumidityEEPROM();
     bea:	0e 94 c5 02 	call	0x58a	; 0x58a <DHT11WriteHumidityEEPROM>
     bee:	24 c0       	rjmp	.+72     	; 0xc38 <__vector_18+0x23a>
	}
	else if (ReceivedByte == 'K') { //read humidity stored in EEPROMwhile (!eeprom_is_ready());
     bf0:	cb 34       	cpi	r28, 0x4B	; 75
     bf2:	11 f5       	brne	.+68     	; 0xc38 <__vector_18+0x23a>
		cli();
     bf4:	f8 94       	cli
		readValue = eeprom_read_word((uint16_t*)Haddr); // => sensorValue
     bf6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Haddr>
     bfa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Haddr+0x1>
     bfe:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <eeprom_read_word>
     c02:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c06:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		sei();
     c0a:	78 94       	sei
		itoa(readValue, buffer,10);
     c0c:	4a e0       	ldi	r20, 0x0A	; 10
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	67 eb       	ldi	r22, 0xB7	; 183
     c12:	74 e0       	ldi	r23, 0x04	; 4
     c14:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c18:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c1c:	0e 94 b1 08 	call	0x1162	; 0x1162 <itoa>
		USART_putstring("\r \n Stored humidity value = ");
     c20:	87 e8       	ldi	r24, 0x87	; 135
     c22:	94 e0       	ldi	r25, 0x04	; 4
     c24:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
		USART_putstring(buffer);
     c28:	87 eb       	ldi	r24, 0xB7	; 183
     c2a:	94 e0       	ldi	r25, 0x04	; 4
     c2c:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
		USART_putstring("% \r \n");
     c30:	84 ea       	ldi	r24, 0xA4	; 164
     c32:	94 e0       	ldi	r25, 0x04	; 4
     c34:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_putstring>
	}
	
	
	UDR0 = ReceivedByte; //echo
     c38:	e6 ec       	ldi	r30, 0xC6	; 198
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	c0 83       	st	Z, r28
	ReceivedByte = UDR0; // Next char
     c3e:	80 81       	ld	r24, Z
}
     c40:	ff 91       	pop	r31
     c42:	ef 91       	pop	r30
     c44:	cf 91       	pop	r28
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	18 95       	reti

00000c64 <__subsf3>:
     c64:	50 58       	subi	r21, 0x80	; 128

00000c66 <__addsf3>:
     c66:	bb 27       	eor	r27, r27
     c68:	aa 27       	eor	r26, r26
     c6a:	0e 94 4a 06 	call	0xc94	; 0xc94 <__addsf3x>
     c6e:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_round>
     c72:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_pscA>
     c76:	38 f0       	brcs	.+14     	; 0xc86 <__addsf3+0x20>
     c78:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fp_pscB>
     c7c:	20 f0       	brcs	.+8      	; 0xc86 <__addsf3+0x20>
     c7e:	39 f4       	brne	.+14     	; 0xc8e <__addsf3+0x28>
     c80:	9f 3f       	cpi	r25, 0xFF	; 255
     c82:	19 f4       	brne	.+6      	; 0xc8a <__addsf3+0x24>
     c84:	26 f4       	brtc	.+8      	; 0xc8e <__addsf3+0x28>
     c86:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_nan>
     c8a:	0e f4       	brtc	.+2      	; 0xc8e <__addsf3+0x28>
     c8c:	e0 95       	com	r30
     c8e:	e7 fb       	bst	r30, 7
     c90:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_inf>

00000c94 <__addsf3x>:
     c94:	e9 2f       	mov	r30, r25
     c96:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fp_split3>
     c9a:	58 f3       	brcs	.-42     	; 0xc72 <__addsf3+0xc>
     c9c:	ba 17       	cp	r27, r26
     c9e:	62 07       	cpc	r22, r18
     ca0:	73 07       	cpc	r23, r19
     ca2:	84 07       	cpc	r24, r20
     ca4:	95 07       	cpc	r25, r21
     ca6:	20 f0       	brcs	.+8      	; 0xcb0 <__addsf3x+0x1c>
     ca8:	79 f4       	brne	.+30     	; 0xcc8 <__addsf3x+0x34>
     caa:	a6 f5       	brtc	.+104    	; 0xd14 <__addsf3x+0x80>
     cac:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_zero>
     cb0:	0e f4       	brtc	.+2      	; 0xcb4 <__addsf3x+0x20>
     cb2:	e0 95       	com	r30
     cb4:	0b 2e       	mov	r0, r27
     cb6:	ba 2f       	mov	r27, r26
     cb8:	a0 2d       	mov	r26, r0
     cba:	0b 01       	movw	r0, r22
     cbc:	b9 01       	movw	r22, r18
     cbe:	90 01       	movw	r18, r0
     cc0:	0c 01       	movw	r0, r24
     cc2:	ca 01       	movw	r24, r20
     cc4:	a0 01       	movw	r20, r0
     cc6:	11 24       	eor	r1, r1
     cc8:	ff 27       	eor	r31, r31
     cca:	59 1b       	sub	r21, r25
     ccc:	99 f0       	breq	.+38     	; 0xcf4 <__addsf3x+0x60>
     cce:	59 3f       	cpi	r21, 0xF9	; 249
     cd0:	50 f4       	brcc	.+20     	; 0xce6 <__addsf3x+0x52>
     cd2:	50 3e       	cpi	r21, 0xE0	; 224
     cd4:	68 f1       	brcs	.+90     	; 0xd30 <__addsf3x+0x9c>
     cd6:	1a 16       	cp	r1, r26
     cd8:	f0 40       	sbci	r31, 0x00	; 0
     cda:	a2 2f       	mov	r26, r18
     cdc:	23 2f       	mov	r18, r19
     cde:	34 2f       	mov	r19, r20
     ce0:	44 27       	eor	r20, r20
     ce2:	58 5f       	subi	r21, 0xF8	; 248
     ce4:	f3 cf       	rjmp	.-26     	; 0xccc <__addsf3x+0x38>
     ce6:	46 95       	lsr	r20
     ce8:	37 95       	ror	r19
     cea:	27 95       	ror	r18
     cec:	a7 95       	ror	r26
     cee:	f0 40       	sbci	r31, 0x00	; 0
     cf0:	53 95       	inc	r21
     cf2:	c9 f7       	brne	.-14     	; 0xce6 <__addsf3x+0x52>
     cf4:	7e f4       	brtc	.+30     	; 0xd14 <__addsf3x+0x80>
     cf6:	1f 16       	cp	r1, r31
     cf8:	ba 0b       	sbc	r27, r26
     cfa:	62 0b       	sbc	r22, r18
     cfc:	73 0b       	sbc	r23, r19
     cfe:	84 0b       	sbc	r24, r20
     d00:	ba f0       	brmi	.+46     	; 0xd30 <__addsf3x+0x9c>
     d02:	91 50       	subi	r25, 0x01	; 1
     d04:	a1 f0       	breq	.+40     	; 0xd2e <__addsf3x+0x9a>
     d06:	ff 0f       	add	r31, r31
     d08:	bb 1f       	adc	r27, r27
     d0a:	66 1f       	adc	r22, r22
     d0c:	77 1f       	adc	r23, r23
     d0e:	88 1f       	adc	r24, r24
     d10:	c2 f7       	brpl	.-16     	; 0xd02 <__addsf3x+0x6e>
     d12:	0e c0       	rjmp	.+28     	; 0xd30 <__addsf3x+0x9c>
     d14:	ba 0f       	add	r27, r26
     d16:	62 1f       	adc	r22, r18
     d18:	73 1f       	adc	r23, r19
     d1a:	84 1f       	adc	r24, r20
     d1c:	48 f4       	brcc	.+18     	; 0xd30 <__addsf3x+0x9c>
     d1e:	87 95       	ror	r24
     d20:	77 95       	ror	r23
     d22:	67 95       	ror	r22
     d24:	b7 95       	ror	r27
     d26:	f7 95       	ror	r31
     d28:	9e 3f       	cpi	r25, 0xFE	; 254
     d2a:	08 f0       	brcs	.+2      	; 0xd2e <__addsf3x+0x9a>
     d2c:	b0 cf       	rjmp	.-160    	; 0xc8e <__addsf3+0x28>
     d2e:	93 95       	inc	r25
     d30:	88 0f       	add	r24, r24
     d32:	08 f0       	brcs	.+2      	; 0xd36 <__addsf3x+0xa2>
     d34:	99 27       	eor	r25, r25
     d36:	ee 0f       	add	r30, r30
     d38:	97 95       	ror	r25
     d3a:	87 95       	ror	r24
     d3c:	08 95       	ret

00000d3e <__cmpsf2>:
     d3e:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_cmp>
     d42:	08 f4       	brcc	.+2      	; 0xd46 <__cmpsf2+0x8>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	08 95       	ret

00000d48 <__divsf3>:
     d48:	0e 94 b8 06 	call	0xd70	; 0xd70 <__divsf3x>
     d4c:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_round>
     d50:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fp_pscB>
     d54:	58 f0       	brcs	.+22     	; 0xd6c <__divsf3+0x24>
     d56:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_pscA>
     d5a:	40 f0       	brcs	.+16     	; 0xd6c <__divsf3+0x24>
     d5c:	29 f4       	brne	.+10     	; 0xd68 <__divsf3+0x20>
     d5e:	5f 3f       	cpi	r21, 0xFF	; 255
     d60:	29 f0       	breq	.+10     	; 0xd6c <__divsf3+0x24>
     d62:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_inf>
     d66:	51 11       	cpse	r21, r1
     d68:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_szero>
     d6c:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_nan>

00000d70 <__divsf3x>:
     d70:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fp_split3>
     d74:	68 f3       	brcs	.-38     	; 0xd50 <__divsf3+0x8>

00000d76 <__divsf3_pse>:
     d76:	99 23       	and	r25, r25
     d78:	b1 f3       	breq	.-20     	; 0xd66 <__divsf3+0x1e>
     d7a:	55 23       	and	r21, r21
     d7c:	91 f3       	breq	.-28     	; 0xd62 <__divsf3+0x1a>
     d7e:	95 1b       	sub	r25, r21
     d80:	55 0b       	sbc	r21, r21
     d82:	bb 27       	eor	r27, r27
     d84:	aa 27       	eor	r26, r26
     d86:	62 17       	cp	r22, r18
     d88:	73 07       	cpc	r23, r19
     d8a:	84 07       	cpc	r24, r20
     d8c:	38 f0       	brcs	.+14     	; 0xd9c <__divsf3_pse+0x26>
     d8e:	9f 5f       	subi	r25, 0xFF	; 255
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	44 1f       	adc	r20, r20
     d98:	aa 1f       	adc	r26, r26
     d9a:	a9 f3       	breq	.-22     	; 0xd86 <__divsf3_pse+0x10>
     d9c:	35 d0       	rcall	.+106    	; 0xe08 <__divsf3_pse+0x92>
     d9e:	0e 2e       	mov	r0, r30
     da0:	3a f0       	brmi	.+14     	; 0xdb0 <__divsf3_pse+0x3a>
     da2:	e0 e8       	ldi	r30, 0x80	; 128
     da4:	32 d0       	rcall	.+100    	; 0xe0a <__divsf3_pse+0x94>
     da6:	91 50       	subi	r25, 0x01	; 1
     da8:	50 40       	sbci	r21, 0x00	; 0
     daa:	e6 95       	lsr	r30
     dac:	00 1c       	adc	r0, r0
     dae:	ca f7       	brpl	.-14     	; 0xda2 <__divsf3_pse+0x2c>
     db0:	2b d0       	rcall	.+86     	; 0xe08 <__divsf3_pse+0x92>
     db2:	fe 2f       	mov	r31, r30
     db4:	29 d0       	rcall	.+82     	; 0xe08 <__divsf3_pse+0x92>
     db6:	66 0f       	add	r22, r22
     db8:	77 1f       	adc	r23, r23
     dba:	88 1f       	adc	r24, r24
     dbc:	bb 1f       	adc	r27, r27
     dbe:	26 17       	cp	r18, r22
     dc0:	37 07       	cpc	r19, r23
     dc2:	48 07       	cpc	r20, r24
     dc4:	ab 07       	cpc	r26, r27
     dc6:	b0 e8       	ldi	r27, 0x80	; 128
     dc8:	09 f0       	breq	.+2      	; 0xdcc <__divsf3_pse+0x56>
     dca:	bb 0b       	sbc	r27, r27
     dcc:	80 2d       	mov	r24, r0
     dce:	bf 01       	movw	r22, r30
     dd0:	ff 27       	eor	r31, r31
     dd2:	93 58       	subi	r25, 0x83	; 131
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	3a f0       	brmi	.+14     	; 0xde6 <__divsf3_pse+0x70>
     dd8:	9e 3f       	cpi	r25, 0xFE	; 254
     dda:	51 05       	cpc	r21, r1
     ddc:	78 f0       	brcs	.+30     	; 0xdfc <__divsf3_pse+0x86>
     dde:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_inf>
     de2:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_szero>
     de6:	5f 3f       	cpi	r21, 0xFF	; 255
     de8:	e4 f3       	brlt	.-8      	; 0xde2 <__divsf3_pse+0x6c>
     dea:	98 3e       	cpi	r25, 0xE8	; 232
     dec:	d4 f3       	brlt	.-12     	; 0xde2 <__divsf3_pse+0x6c>
     dee:	86 95       	lsr	r24
     df0:	77 95       	ror	r23
     df2:	67 95       	ror	r22
     df4:	b7 95       	ror	r27
     df6:	f7 95       	ror	r31
     df8:	9f 5f       	subi	r25, 0xFF	; 255
     dfa:	c9 f7       	brne	.-14     	; 0xdee <__divsf3_pse+0x78>
     dfc:	88 0f       	add	r24, r24
     dfe:	91 1d       	adc	r25, r1
     e00:	96 95       	lsr	r25
     e02:	87 95       	ror	r24
     e04:	97 f9       	bld	r25, 7
     e06:	08 95       	ret
     e08:	e1 e0       	ldi	r30, 0x01	; 1
     e0a:	66 0f       	add	r22, r22
     e0c:	77 1f       	adc	r23, r23
     e0e:	88 1f       	adc	r24, r24
     e10:	bb 1f       	adc	r27, r27
     e12:	62 17       	cp	r22, r18
     e14:	73 07       	cpc	r23, r19
     e16:	84 07       	cpc	r24, r20
     e18:	ba 07       	cpc	r27, r26
     e1a:	20 f0       	brcs	.+8      	; 0xe24 <__divsf3_pse+0xae>
     e1c:	62 1b       	sub	r22, r18
     e1e:	73 0b       	sbc	r23, r19
     e20:	84 0b       	sbc	r24, r20
     e22:	ba 0b       	sbc	r27, r26
     e24:	ee 1f       	adc	r30, r30
     e26:	88 f7       	brcc	.-30     	; 0xe0a <__divsf3_pse+0x94>
     e28:	e0 95       	com	r30
     e2a:	08 95       	ret

00000e2c <__fixsfsi>:
     e2c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fixunssfsi>
     e30:	68 94       	set
     e32:	b1 11       	cpse	r27, r1
     e34:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_szero>
     e38:	08 95       	ret

00000e3a <__fixunssfsi>:
     e3a:	0e 94 dd 07 	call	0xfba	; 0xfba <__fp_splitA>
     e3e:	88 f0       	brcs	.+34     	; 0xe62 <__fixunssfsi+0x28>
     e40:	9f 57       	subi	r25, 0x7F	; 127
     e42:	98 f0       	brcs	.+38     	; 0xe6a <__fixunssfsi+0x30>
     e44:	b9 2f       	mov	r27, r25
     e46:	99 27       	eor	r25, r25
     e48:	b7 51       	subi	r27, 0x17	; 23
     e4a:	b0 f0       	brcs	.+44     	; 0xe78 <__fixunssfsi+0x3e>
     e4c:	e1 f0       	breq	.+56     	; 0xe86 <__fixunssfsi+0x4c>
     e4e:	66 0f       	add	r22, r22
     e50:	77 1f       	adc	r23, r23
     e52:	88 1f       	adc	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	1a f0       	brmi	.+6      	; 0xe5e <__fixunssfsi+0x24>
     e58:	ba 95       	dec	r27
     e5a:	c9 f7       	brne	.-14     	; 0xe4e <__fixunssfsi+0x14>
     e5c:	14 c0       	rjmp	.+40     	; 0xe86 <__fixunssfsi+0x4c>
     e5e:	b1 30       	cpi	r27, 0x01	; 1
     e60:	91 f0       	breq	.+36     	; 0xe86 <__fixunssfsi+0x4c>
     e62:	0e 94 f7 07 	call	0xfee	; 0xfee <__fp_zero>
     e66:	b1 e0       	ldi	r27, 0x01	; 1
     e68:	08 95       	ret
     e6a:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_zero>
     e6e:	67 2f       	mov	r22, r23
     e70:	78 2f       	mov	r23, r24
     e72:	88 27       	eor	r24, r24
     e74:	b8 5f       	subi	r27, 0xF8	; 248
     e76:	39 f0       	breq	.+14     	; 0xe86 <__fixunssfsi+0x4c>
     e78:	b9 3f       	cpi	r27, 0xF9	; 249
     e7a:	cc f3       	brlt	.-14     	; 0xe6e <__fixunssfsi+0x34>
     e7c:	86 95       	lsr	r24
     e7e:	77 95       	ror	r23
     e80:	67 95       	ror	r22
     e82:	b3 95       	inc	r27
     e84:	d9 f7       	brne	.-10     	; 0xe7c <__fixunssfsi+0x42>
     e86:	3e f4       	brtc	.+14     	; 0xe96 <__fixunssfsi+0x5c>
     e88:	90 95       	com	r25
     e8a:	80 95       	com	r24
     e8c:	70 95       	com	r23
     e8e:	61 95       	neg	r22
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	8f 4f       	sbci	r24, 0xFF	; 255
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	08 95       	ret

00000e98 <__floatunsisf>:
     e98:	e8 94       	clt
     e9a:	09 c0       	rjmp	.+18     	; 0xeae <__floatsisf+0x12>

00000e9c <__floatsisf>:
     e9c:	97 fb       	bst	r25, 7
     e9e:	3e f4       	brtc	.+14     	; 0xeae <__floatsisf+0x12>
     ea0:	90 95       	com	r25
     ea2:	80 95       	com	r24
     ea4:	70 95       	com	r23
     ea6:	61 95       	neg	r22
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	8f 4f       	sbci	r24, 0xFF	; 255
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	99 23       	and	r25, r25
     eb0:	a9 f0       	breq	.+42     	; 0xedc <__floatsisf+0x40>
     eb2:	f9 2f       	mov	r31, r25
     eb4:	96 e9       	ldi	r25, 0x96	; 150
     eb6:	bb 27       	eor	r27, r27
     eb8:	93 95       	inc	r25
     eba:	f6 95       	lsr	r31
     ebc:	87 95       	ror	r24
     ebe:	77 95       	ror	r23
     ec0:	67 95       	ror	r22
     ec2:	b7 95       	ror	r27
     ec4:	f1 11       	cpse	r31, r1
     ec6:	f8 cf       	rjmp	.-16     	; 0xeb8 <__floatsisf+0x1c>
     ec8:	fa f4       	brpl	.+62     	; 0xf08 <__floatsisf+0x6c>
     eca:	bb 0f       	add	r27, r27
     ecc:	11 f4       	brne	.+4      	; 0xed2 <__floatsisf+0x36>
     ece:	60 ff       	sbrs	r22, 0
     ed0:	1b c0       	rjmp	.+54     	; 0xf08 <__floatsisf+0x6c>
     ed2:	6f 5f       	subi	r22, 0xFF	; 255
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	16 c0       	rjmp	.+44     	; 0xf08 <__floatsisf+0x6c>
     edc:	88 23       	and	r24, r24
     ede:	11 f0       	breq	.+4      	; 0xee4 <__floatsisf+0x48>
     ee0:	96 e9       	ldi	r25, 0x96	; 150
     ee2:	11 c0       	rjmp	.+34     	; 0xf06 <__floatsisf+0x6a>
     ee4:	77 23       	and	r23, r23
     ee6:	21 f0       	breq	.+8      	; 0xef0 <__floatsisf+0x54>
     ee8:	9e e8       	ldi	r25, 0x8E	; 142
     eea:	87 2f       	mov	r24, r23
     eec:	76 2f       	mov	r23, r22
     eee:	05 c0       	rjmp	.+10     	; 0xefa <__floatsisf+0x5e>
     ef0:	66 23       	and	r22, r22
     ef2:	71 f0       	breq	.+28     	; 0xf10 <__floatsisf+0x74>
     ef4:	96 e8       	ldi	r25, 0x86	; 134
     ef6:	86 2f       	mov	r24, r22
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	2a f0       	brmi	.+10     	; 0xf08 <__floatsisf+0x6c>
     efe:	9a 95       	dec	r25
     f00:	66 0f       	add	r22, r22
     f02:	77 1f       	adc	r23, r23
     f04:	88 1f       	adc	r24, r24
     f06:	da f7       	brpl	.-10     	; 0xefe <__floatsisf+0x62>
     f08:	88 0f       	add	r24, r24
     f0a:	96 95       	lsr	r25
     f0c:	87 95       	ror	r24
     f0e:	97 f9       	bld	r25, 7
     f10:	08 95       	ret

00000f12 <__fp_cmp>:
     f12:	99 0f       	add	r25, r25
     f14:	00 08       	sbc	r0, r0
     f16:	55 0f       	add	r21, r21
     f18:	aa 0b       	sbc	r26, r26
     f1a:	e0 e8       	ldi	r30, 0x80	; 128
     f1c:	fe ef       	ldi	r31, 0xFE	; 254
     f1e:	16 16       	cp	r1, r22
     f20:	17 06       	cpc	r1, r23
     f22:	e8 07       	cpc	r30, r24
     f24:	f9 07       	cpc	r31, r25
     f26:	c0 f0       	brcs	.+48     	; 0xf58 <__fp_cmp+0x46>
     f28:	12 16       	cp	r1, r18
     f2a:	13 06       	cpc	r1, r19
     f2c:	e4 07       	cpc	r30, r20
     f2e:	f5 07       	cpc	r31, r21
     f30:	98 f0       	brcs	.+38     	; 0xf58 <__fp_cmp+0x46>
     f32:	62 1b       	sub	r22, r18
     f34:	73 0b       	sbc	r23, r19
     f36:	84 0b       	sbc	r24, r20
     f38:	95 0b       	sbc	r25, r21
     f3a:	39 f4       	brne	.+14     	; 0xf4a <__fp_cmp+0x38>
     f3c:	0a 26       	eor	r0, r26
     f3e:	61 f0       	breq	.+24     	; 0xf58 <__fp_cmp+0x46>
     f40:	23 2b       	or	r18, r19
     f42:	24 2b       	or	r18, r20
     f44:	25 2b       	or	r18, r21
     f46:	21 f4       	brne	.+8      	; 0xf50 <__fp_cmp+0x3e>
     f48:	08 95       	ret
     f4a:	0a 26       	eor	r0, r26
     f4c:	09 f4       	brne	.+2      	; 0xf50 <__fp_cmp+0x3e>
     f4e:	a1 40       	sbci	r26, 0x01	; 1
     f50:	a6 95       	lsr	r26
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	81 1d       	adc	r24, r1
     f56:	81 1d       	adc	r24, r1
     f58:	08 95       	ret

00000f5a <__fp_inf>:
     f5a:	97 f9       	bld	r25, 7
     f5c:	9f 67       	ori	r25, 0x7F	; 127
     f5e:	80 e8       	ldi	r24, 0x80	; 128
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	08 95       	ret

00000f66 <__fp_nan>:
     f66:	9f ef       	ldi	r25, 0xFF	; 255
     f68:	80 ec       	ldi	r24, 0xC0	; 192
     f6a:	08 95       	ret

00000f6c <__fp_pscA>:
     f6c:	00 24       	eor	r0, r0
     f6e:	0a 94       	dec	r0
     f70:	16 16       	cp	r1, r22
     f72:	17 06       	cpc	r1, r23
     f74:	18 06       	cpc	r1, r24
     f76:	09 06       	cpc	r0, r25
     f78:	08 95       	ret

00000f7a <__fp_pscB>:
     f7a:	00 24       	eor	r0, r0
     f7c:	0a 94       	dec	r0
     f7e:	12 16       	cp	r1, r18
     f80:	13 06       	cpc	r1, r19
     f82:	14 06       	cpc	r1, r20
     f84:	05 06       	cpc	r0, r21
     f86:	08 95       	ret

00000f88 <__fp_round>:
     f88:	09 2e       	mov	r0, r25
     f8a:	03 94       	inc	r0
     f8c:	00 0c       	add	r0, r0
     f8e:	11 f4       	brne	.+4      	; 0xf94 <__fp_round+0xc>
     f90:	88 23       	and	r24, r24
     f92:	52 f0       	brmi	.+20     	; 0xfa8 <__fp_round+0x20>
     f94:	bb 0f       	add	r27, r27
     f96:	40 f4       	brcc	.+16     	; 0xfa8 <__fp_round+0x20>
     f98:	bf 2b       	or	r27, r31
     f9a:	11 f4       	brne	.+4      	; 0xfa0 <__fp_round+0x18>
     f9c:	60 ff       	sbrs	r22, 0
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <__fp_round+0x20>
     fa0:	6f 5f       	subi	r22, 0xFF	; 255
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	8f 4f       	sbci	r24, 0xFF	; 255
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	08 95       	ret

00000faa <__fp_split3>:
     faa:	57 fd       	sbrc	r21, 7
     fac:	90 58       	subi	r25, 0x80	; 128
     fae:	44 0f       	add	r20, r20
     fb0:	55 1f       	adc	r21, r21
     fb2:	59 f0       	breq	.+22     	; 0xfca <__fp_splitA+0x10>
     fb4:	5f 3f       	cpi	r21, 0xFF	; 255
     fb6:	71 f0       	breq	.+28     	; 0xfd4 <__fp_splitA+0x1a>
     fb8:	47 95       	ror	r20

00000fba <__fp_splitA>:
     fba:	88 0f       	add	r24, r24
     fbc:	97 fb       	bst	r25, 7
     fbe:	99 1f       	adc	r25, r25
     fc0:	61 f0       	breq	.+24     	; 0xfda <__fp_splitA+0x20>
     fc2:	9f 3f       	cpi	r25, 0xFF	; 255
     fc4:	79 f0       	breq	.+30     	; 0xfe4 <__fp_splitA+0x2a>
     fc6:	87 95       	ror	r24
     fc8:	08 95       	ret
     fca:	12 16       	cp	r1, r18
     fcc:	13 06       	cpc	r1, r19
     fce:	14 06       	cpc	r1, r20
     fd0:	55 1f       	adc	r21, r21
     fd2:	f2 cf       	rjmp	.-28     	; 0xfb8 <__fp_split3+0xe>
     fd4:	46 95       	lsr	r20
     fd6:	f1 df       	rcall	.-30     	; 0xfba <__fp_splitA>
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <__fp_splitA+0x30>
     fda:	16 16       	cp	r1, r22
     fdc:	17 06       	cpc	r1, r23
     fde:	18 06       	cpc	r1, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	f1 cf       	rjmp	.-30     	; 0xfc6 <__fp_splitA+0xc>
     fe4:	86 95       	lsr	r24
     fe6:	71 05       	cpc	r23, r1
     fe8:	61 05       	cpc	r22, r1
     fea:	08 94       	sec
     fec:	08 95       	ret

00000fee <__fp_zero>:
     fee:	e8 94       	clt

00000ff0 <__fp_szero>:
     ff0:	bb 27       	eor	r27, r27
     ff2:	66 27       	eor	r22, r22
     ff4:	77 27       	eor	r23, r23
     ff6:	cb 01       	movw	r24, r22
     ff8:	97 f9       	bld	r25, 7
     ffa:	08 95       	ret

00000ffc <__gesf2>:
     ffc:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_cmp>
    1000:	08 f4       	brcc	.+2      	; 0x1004 <__gesf2+0x8>
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	08 95       	ret

00001006 <__mulsf3>:
    1006:	0e 94 16 08 	call	0x102c	; 0x102c <__mulsf3x>
    100a:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_round>
    100e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_pscA>
    1012:	38 f0       	brcs	.+14     	; 0x1022 <__mulsf3+0x1c>
    1014:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fp_pscB>
    1018:	20 f0       	brcs	.+8      	; 0x1022 <__mulsf3+0x1c>
    101a:	95 23       	and	r25, r21
    101c:	11 f0       	breq	.+4      	; 0x1022 <__mulsf3+0x1c>
    101e:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_inf>
    1022:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_nan>
    1026:	11 24       	eor	r1, r1
    1028:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_szero>

0000102c <__mulsf3x>:
    102c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fp_split3>
    1030:	70 f3       	brcs	.-36     	; 0x100e <__mulsf3+0x8>

00001032 <__mulsf3_pse>:
    1032:	95 9f       	mul	r25, r21
    1034:	c1 f3       	breq	.-16     	; 0x1026 <__mulsf3+0x20>
    1036:	95 0f       	add	r25, r21
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	55 1f       	adc	r21, r21
    103c:	62 9f       	mul	r22, r18
    103e:	f0 01       	movw	r30, r0
    1040:	72 9f       	mul	r23, r18
    1042:	bb 27       	eor	r27, r27
    1044:	f0 0d       	add	r31, r0
    1046:	b1 1d       	adc	r27, r1
    1048:	63 9f       	mul	r22, r19
    104a:	aa 27       	eor	r26, r26
    104c:	f0 0d       	add	r31, r0
    104e:	b1 1d       	adc	r27, r1
    1050:	aa 1f       	adc	r26, r26
    1052:	64 9f       	mul	r22, r20
    1054:	66 27       	eor	r22, r22
    1056:	b0 0d       	add	r27, r0
    1058:	a1 1d       	adc	r26, r1
    105a:	66 1f       	adc	r22, r22
    105c:	82 9f       	mul	r24, r18
    105e:	22 27       	eor	r18, r18
    1060:	b0 0d       	add	r27, r0
    1062:	a1 1d       	adc	r26, r1
    1064:	62 1f       	adc	r22, r18
    1066:	73 9f       	mul	r23, r19
    1068:	b0 0d       	add	r27, r0
    106a:	a1 1d       	adc	r26, r1
    106c:	62 1f       	adc	r22, r18
    106e:	83 9f       	mul	r24, r19
    1070:	a0 0d       	add	r26, r0
    1072:	61 1d       	adc	r22, r1
    1074:	22 1f       	adc	r18, r18
    1076:	74 9f       	mul	r23, r20
    1078:	33 27       	eor	r19, r19
    107a:	a0 0d       	add	r26, r0
    107c:	61 1d       	adc	r22, r1
    107e:	23 1f       	adc	r18, r19
    1080:	84 9f       	mul	r24, r20
    1082:	60 0d       	add	r22, r0
    1084:	21 1d       	adc	r18, r1
    1086:	82 2f       	mov	r24, r18
    1088:	76 2f       	mov	r23, r22
    108a:	6a 2f       	mov	r22, r26
    108c:	11 24       	eor	r1, r1
    108e:	9f 57       	subi	r25, 0x7F	; 127
    1090:	50 40       	sbci	r21, 0x00	; 0
    1092:	9a f0       	brmi	.+38     	; 0x10ba <__mulsf3_pse+0x88>
    1094:	f1 f0       	breq	.+60     	; 0x10d2 <__mulsf3_pse+0xa0>
    1096:	88 23       	and	r24, r24
    1098:	4a f0       	brmi	.+18     	; 0x10ac <__mulsf3_pse+0x7a>
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	bb 1f       	adc	r27, r27
    10a0:	66 1f       	adc	r22, r22
    10a2:	77 1f       	adc	r23, r23
    10a4:	88 1f       	adc	r24, r24
    10a6:	91 50       	subi	r25, 0x01	; 1
    10a8:	50 40       	sbci	r21, 0x00	; 0
    10aa:	a9 f7       	brne	.-22     	; 0x1096 <__mulsf3_pse+0x64>
    10ac:	9e 3f       	cpi	r25, 0xFE	; 254
    10ae:	51 05       	cpc	r21, r1
    10b0:	80 f0       	brcs	.+32     	; 0x10d2 <__mulsf3_pse+0xa0>
    10b2:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_inf>
    10b6:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_szero>
    10ba:	5f 3f       	cpi	r21, 0xFF	; 255
    10bc:	e4 f3       	brlt	.-8      	; 0x10b6 <__mulsf3_pse+0x84>
    10be:	98 3e       	cpi	r25, 0xE8	; 232
    10c0:	d4 f3       	brlt	.-12     	; 0x10b6 <__mulsf3_pse+0x84>
    10c2:	86 95       	lsr	r24
    10c4:	77 95       	ror	r23
    10c6:	67 95       	ror	r22
    10c8:	b7 95       	ror	r27
    10ca:	f7 95       	ror	r31
    10cc:	e7 95       	ror	r30
    10ce:	9f 5f       	subi	r25, 0xFF	; 255
    10d0:	c1 f7       	brne	.-16     	; 0x10c2 <__mulsf3_pse+0x90>
    10d2:	fe 2b       	or	r31, r30
    10d4:	88 0f       	add	r24, r24
    10d6:	91 1d       	adc	r25, r1
    10d8:	96 95       	lsr	r25
    10da:	87 95       	ror	r24
    10dc:	97 f9       	bld	r25, 7
    10de:	08 95       	ret

000010e0 <__divmodsi4>:
    10e0:	05 2e       	mov	r0, r21
    10e2:	97 fb       	bst	r25, 7
    10e4:	1e f4       	brtc	.+6      	; 0x10ec <__divmodsi4+0xc>
    10e6:	00 94       	com	r0
    10e8:	0e 94 87 08 	call	0x110e	; 0x110e <__negsi2>
    10ec:	57 fd       	sbrc	r21, 7
    10ee:	07 d0       	rcall	.+14     	; 0x10fe <__divmodsi4_neg2>
    10f0:	0e 94 8f 08 	call	0x111e	; 0x111e <__udivmodsi4>
    10f4:	07 fc       	sbrc	r0, 7
    10f6:	03 d0       	rcall	.+6      	; 0x10fe <__divmodsi4_neg2>
    10f8:	4e f4       	brtc	.+18     	; 0x110c <__divmodsi4_exit>
    10fa:	0c 94 87 08 	jmp	0x110e	; 0x110e <__negsi2>

000010fe <__divmodsi4_neg2>:
    10fe:	50 95       	com	r21
    1100:	40 95       	com	r20
    1102:	30 95       	com	r19
    1104:	21 95       	neg	r18
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	4f 4f       	sbci	r20, 0xFF	; 255
    110a:	5f 4f       	sbci	r21, 0xFF	; 255

0000110c <__divmodsi4_exit>:
    110c:	08 95       	ret

0000110e <__negsi2>:
    110e:	90 95       	com	r25
    1110:	80 95       	com	r24
    1112:	70 95       	com	r23
    1114:	61 95       	neg	r22
    1116:	7f 4f       	sbci	r23, 0xFF	; 255
    1118:	8f 4f       	sbci	r24, 0xFF	; 255
    111a:	9f 4f       	sbci	r25, 0xFF	; 255
    111c:	08 95       	ret

0000111e <__udivmodsi4>:
    111e:	a1 e2       	ldi	r26, 0x21	; 33
    1120:	1a 2e       	mov	r1, r26
    1122:	aa 1b       	sub	r26, r26
    1124:	bb 1b       	sub	r27, r27
    1126:	fd 01       	movw	r30, r26
    1128:	0d c0       	rjmp	.+26     	; 0x1144 <__udivmodsi4_ep>

0000112a <__udivmodsi4_loop>:
    112a:	aa 1f       	adc	r26, r26
    112c:	bb 1f       	adc	r27, r27
    112e:	ee 1f       	adc	r30, r30
    1130:	ff 1f       	adc	r31, r31
    1132:	a2 17       	cp	r26, r18
    1134:	b3 07       	cpc	r27, r19
    1136:	e4 07       	cpc	r30, r20
    1138:	f5 07       	cpc	r31, r21
    113a:	20 f0       	brcs	.+8      	; 0x1144 <__udivmodsi4_ep>
    113c:	a2 1b       	sub	r26, r18
    113e:	b3 0b       	sbc	r27, r19
    1140:	e4 0b       	sbc	r30, r20
    1142:	f5 0b       	sbc	r31, r21

00001144 <__udivmodsi4_ep>:
    1144:	66 1f       	adc	r22, r22
    1146:	77 1f       	adc	r23, r23
    1148:	88 1f       	adc	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	1a 94       	dec	r1
    114e:	69 f7       	brne	.-38     	; 0x112a <__udivmodsi4_loop>
    1150:	60 95       	com	r22
    1152:	70 95       	com	r23
    1154:	80 95       	com	r24
    1156:	90 95       	com	r25
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	bd 01       	movw	r22, r26
    115e:	cf 01       	movw	r24, r30
    1160:	08 95       	ret

00001162 <itoa>:
    1162:	45 32       	cpi	r20, 0x25	; 37
    1164:	51 05       	cpc	r21, r1
    1166:	20 f4       	brcc	.+8      	; 0x1170 <itoa+0xe>
    1168:	42 30       	cpi	r20, 0x02	; 2
    116a:	10 f0       	brcs	.+4      	; 0x1170 <itoa+0xe>
    116c:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__itoa_ncheck>
    1170:	fb 01       	movw	r30, r22
    1172:	10 82       	st	Z, r1
    1174:	cb 01       	movw	r24, r22
    1176:	08 95       	ret

00001178 <__itoa_ncheck>:
    1178:	bb 27       	eor	r27, r27
    117a:	4a 30       	cpi	r20, 0x0A	; 10
    117c:	31 f4       	brne	.+12     	; 0x118a <__itoa_ncheck+0x12>
    117e:	99 23       	and	r25, r25
    1180:	22 f4       	brpl	.+8      	; 0x118a <__itoa_ncheck+0x12>
    1182:	bd e2       	ldi	r27, 0x2D	; 45
    1184:	90 95       	com	r25
    1186:	81 95       	neg	r24
    1188:	9f 4f       	sbci	r25, 0xFF	; 255
    118a:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__utoa_common>

0000118e <__utoa_ncheck>:
    118e:	bb 27       	eor	r27, r27

00001190 <__utoa_common>:
    1190:	fb 01       	movw	r30, r22
    1192:	55 27       	eor	r21, r21
    1194:	aa 27       	eor	r26, r26
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	aa 1f       	adc	r26, r26
    119c:	a4 17       	cp	r26, r20
    119e:	10 f0       	brcs	.+4      	; 0x11a4 <__utoa_common+0x14>
    11a0:	a4 1b       	sub	r26, r20
    11a2:	83 95       	inc	r24
    11a4:	50 51       	subi	r21, 0x10	; 16
    11a6:	b9 f7       	brne	.-18     	; 0x1196 <__utoa_common+0x6>
    11a8:	a0 5d       	subi	r26, 0xD0	; 208
    11aa:	aa 33       	cpi	r26, 0x3A	; 58
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <__utoa_common+0x20>
    11ae:	a9 5d       	subi	r26, 0xD9	; 217
    11b0:	a1 93       	st	Z+, r26
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	79 f7       	brne	.-34     	; 0x1194 <__utoa_common+0x4>
    11b6:	b1 11       	cpse	r27, r1
    11b8:	b1 93       	st	Z+, r27
    11ba:	11 92       	st	Z+, r1
    11bc:	cb 01       	movw	r24, r22
    11be:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <strrev>

000011c2 <strrev>:
    11c2:	dc 01       	movw	r26, r24
    11c4:	fc 01       	movw	r30, r24
    11c6:	67 2f       	mov	r22, r23
    11c8:	71 91       	ld	r23, Z+
    11ca:	77 23       	and	r23, r23
    11cc:	e1 f7       	brne	.-8      	; 0x11c6 <strrev+0x4>
    11ce:	32 97       	sbiw	r30, 0x02	; 2
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <strrev+0x18>
    11d2:	7c 91       	ld	r23, X
    11d4:	6d 93       	st	X+, r22
    11d6:	70 83       	st	Z, r23
    11d8:	62 91       	ld	r22, -Z
    11da:	ae 17       	cp	r26, r30
    11dc:	bf 07       	cpc	r27, r31
    11de:	c8 f3       	brcs	.-14     	; 0x11d2 <strrev+0x10>
    11e0:	08 95       	ret

000011e2 <eeprom_read_word>:
    11e2:	a8 e1       	ldi	r26, 0x18	; 24
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	42 e0       	ldi	r20, 0x02	; 2
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <eeprom_read_blraw>

000011ee <eeprom_write_word>:
    11ee:	0e 94 0c 09 	call	0x1218	; 0x1218 <eeprom_write_byte>
    11f2:	27 2f       	mov	r18, r23
    11f4:	0c 94 0d 09 	jmp	0x121a	; 0x121a <eeprom_write_r18>

000011f8 <eeprom_read_block>:
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22

000011fc <eeprom_read_blraw>:
    11fc:	fc 01       	movw	r30, r24
    11fe:	f9 99       	sbic	0x1f, 1	; 31
    1200:	fe cf       	rjmp	.-4      	; 0x11fe <eeprom_read_blraw+0x2>
    1202:	06 c0       	rjmp	.+12     	; 0x1210 <eeprom_read_blraw+0x14>
    1204:	f2 bd       	out	0x22, r31	; 34
    1206:	e1 bd       	out	0x21, r30	; 33
    1208:	f8 9a       	sbi	0x1f, 0	; 31
    120a:	31 96       	adiw	r30, 0x01	; 1
    120c:	00 b4       	in	r0, 0x20	; 32
    120e:	0d 92       	st	X+, r0
    1210:	41 50       	subi	r20, 0x01	; 1
    1212:	50 40       	sbci	r21, 0x00	; 0
    1214:	b8 f7       	brcc	.-18     	; 0x1204 <eeprom_read_blraw+0x8>
    1216:	08 95       	ret

00001218 <eeprom_write_byte>:
    1218:	26 2f       	mov	r18, r22

0000121a <eeprom_write_r18>:
    121a:	f9 99       	sbic	0x1f, 1	; 31
    121c:	fe cf       	rjmp	.-4      	; 0x121a <eeprom_write_r18>
    121e:	1f ba       	out	0x1f, r1	; 31
    1220:	92 bd       	out	0x22, r25	; 34
    1222:	81 bd       	out	0x21, r24	; 33
    1224:	20 bd       	out	0x20, r18	; 32
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	fa 9a       	sbi	0x1f, 2	; 31
    122c:	f9 9a       	sbi	0x1f, 1	; 31
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	08 95       	ret

00001234 <_exit>:
    1234:	f8 94       	cli

00001236 <__stop_program>:
    1236:	ff cf       	rjmp	.-2      	; 0x1236 <__stop_program>


Final-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001cc  00800100  00000ff2  00001086  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  008002cc  008002cc  00001252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001daf  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008be  00000000  00000000  0000314b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc3  00000000  00000000  00003a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000047cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b1  00000000  00000000  00004aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000142e  00000000  00000000  00005159  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00006587  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3c       	cpi	r26, 0xCC	; 204
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac ec       	ldi	r26, 0xCC	; 204
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3e       	cpi	r26, 0xE3	; 227
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 44 04 	call	0x888	; 0x888 <main>
  9e:	0c 94 f7 07 	jmp	0xfee	; 0xfee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCDBusyLoop>:
	// Humidity average
	DHT11Data[0] = bufferRH / DHT_NR_OF_SAMPLES;
	
	// Temperature average
	DHT11Data[2] = (bufferTemp / DHT_NR_OF_SAMPLES) + DHT_TEMP_ERROR_OFFSET;
}
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	83 7c       	andi	r24, 0xC3	; 195
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	8b b9       	out	0x0b, r24	; 11
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	98 2f       	mov	r25, r24
  c2:	9a 95       	dec	r25
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCDBusyLoop+0x1c>
  c6:	96 b1       	in	r25, 0x06	; 6
  c8:	96 95       	lsr	r25
  ca:	96 95       	lsr	r25
  cc:	92 95       	swap	r25
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	2b b1       	in	r18, 0x0b	; 11
  d2:	2f 7e       	andi	r18, 0xEF	; 239
  d4:	2b b9       	out	0x0b, r18	; 11
  d6:	28 2f       	mov	r18, r24
  d8:	2a 95       	dec	r18
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCDBusyLoop+0x32>
  dc:	2b b1       	in	r18, 0x0b	; 11
  de:	20 61       	ori	r18, 0x10	; 16
  e0:	2b b9       	out	0x0b, r18	; 11
  e2:	28 2f       	mov	r18, r24
  e4:	2a 95       	dec	r18
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCDBusyLoop+0x3e>
  e8:	2b b1       	in	r18, 0x0b	; 11
  ea:	2f 7e       	andi	r18, 0xEF	; 239
  ec:	2b b9       	out	0x0b, r18	; 11
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <LCDBusyLoop+0x48>
  f2:	99 23       	and	r25, r25
  f4:	0c f3       	brlt	.-62     	; 0xb8 <LCDBusyLoop+0x12>
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	8b b9       	out	0x0b, r24	; 11
 102:	87 b1       	in	r24, 0x07	; 7
 104:	8c 63       	ori	r24, 0x3C	; 60
 106:	87 b9       	out	0x07, r24	; 7
 108:	08 95       	ret

0000010a <FlashEnable>:
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	80 61       	ori	r24, 0x10	; 16
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	88 ec       	ldi	r24, 0xC8	; 200
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <FlashEnable+0xa>
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	8f 7e       	andi	r24, 0xEF	; 239
 11c:	8b b9       	out	0x0b, r24	; 11
 11e:	08 95       	ret

00000120 <LCDByte>:
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	c8 2f       	mov	r28, r24
 126:	d6 2f       	mov	r29, r22
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
 12c:	d1 11       	cpse	r29, r1
 12e:	0d c0       	rjmp	.+26     	; 0x14a <LCDByte+0x2a>
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	8b b9       	out	0x0b, r24	; 11
 136:	c0 38       	cpi	r28, 0x80	; 128
 138:	11 f0       	breq	.+4      	; 0x13e <LCDByte+0x1e>
 13a:	c1 30       	cpi	r28, 0x01	; 1
 13c:	71 f4       	brne	.+28     	; 0x15a <LCDByte+0x3a>
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cursorPosition>
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	08 c0       	rjmp	.+16     	; 0x15a <LCDByte+0x3a>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cursorPosition>
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cursorPosition>
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	87 7f       	andi	r24, 0xF7	; 247
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	9c 2f       	mov	r25, r28
 162:	90 7f       	andi	r25, 0xF0	; 240
 164:	28 b1       	in	r18, 0x08	; 8
 166:	89 2f       	mov	r24, r25
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	95 95       	asr	r25
 16c:	87 95       	ror	r24
 16e:	95 95       	asr	r25
 170:	87 95       	ror	r24
 172:	82 2b       	or	r24, r18
 174:	88 b9       	out	0x08, r24	; 8
 176:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	83 7c       	andi	r24, 0xC3	; 195
 17e:	88 b9       	out	0x08, r24	; 8
 180:	20 e1       	ldi	r18, 0x10	; 16
 182:	c2 9f       	mul	r28, r18
 184:	c0 01       	movw	r24, r0
 186:	11 24       	eor	r1, r1
 188:	28 b1       	in	r18, 0x08	; 8
 18a:	99 27       	eor	r25, r25
 18c:	95 95       	asr	r25
 18e:	87 95       	ror	r24
 190:	95 95       	asr	r25
 192:	87 95       	ror	r24
 194:	82 2b       	or	r24, r18
 196:	88 b9       	out	0x08, r24	; 8
 198:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
 19c:	88 b1       	in	r24, 0x08	; 8
 19e:	83 7c       	andi	r24, 0xC3	; 195
 1a0:	88 b9       	out	0x08, r24	; 8
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <LCDGotoXY>:
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	c8 2f       	mov	r28, r24
 1ae:	d6 2f       	mov	r29, r22
 1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	8c 0f       	add	r24, r28
 1b8:	8e 3f       	cpi	r24, 0xFE	; 254
 1ba:	08 f0       	brcs	.+2      	; 0x1be <LCDGotoXY+0x16>
 1bc:	c1 e0       	ldi	r28, 0x01	; 1
 1be:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <cursorPosition>
 1c2:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c6:	d2 30       	cpi	r29, 0x02	; 2
 1c8:	41 f0       	breq	.+16     	; 0x1da <LCDGotoXY+0x32>
 1ca:	28 f0       	brcs	.+10     	; 0x1d6 <LCDGotoXY+0x2e>
 1cc:	d4 30       	cpi	r29, 0x04	; 4
 1ce:	49 f0       	breq	.+18     	; 0x1e2 <LCDGotoXY+0x3a>
 1d0:	30 f0       	brcs	.+12     	; 0x1de <LCDGotoXY+0x36>
 1d2:	df 3f       	cpi	r29, 0xFF	; 255
 1d4:	39 f4       	brne	.+14     	; 0x1e4 <LCDGotoXY+0x3c>
 1d6:	c1 50       	subi	r28, 0x01	; 1
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <LCDGotoXY+0x3c>
 1da:	c1 5c       	subi	r28, 0xC1	; 193
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <LCDGotoXY+0x3c>
 1de:	c1 5f       	subi	r28, 0xF1	; 241
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <LCDGotoXY+0x3c>
 1e2:	c1 5b       	subi	r28, 0xB1	; 177
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	8c 2f       	mov	r24, r28
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <LCDWriteString>:
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
 1fe:	01 e0       	ldi	r16, 0x01	; 1
 200:	11 e0       	ldi	r17, 0x01	; 1
 202:	19 c0       	rjmp	.+50     	; 0x236 <LCDWriteString+0x42>
 204:	11 31       	cpi	r17, 0x11	; 17
 206:	90 f0       	brcs	.+36     	; 0x22c <LCDWriteString+0x38>
 208:	01 30       	cpi	r16, 0x01	; 1
 20a:	29 f4       	brne	.+10     	; 0x216 <LCDWriteString+0x22>
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDGotoXY>
 214:	02 e0       	ldi	r16, 0x02	; 2
 216:	02 30       	cpi	r16, 0x02	; 2
 218:	30 f0       	brcs	.+12     	; 0x226 <LCDWriteString+0x32>
 21a:	88 81       	ld	r24, Y
 21c:	80 32       	cpi	r24, 0x20	; 32
 21e:	29 f4       	brne	.+10     	; 0x22a <LCDWriteString+0x36>
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	11 e0       	ldi	r17, 0x01	; 1
 224:	03 c0       	rjmp	.+6      	; 0x22c <LCDWriteString+0x38>
 226:	11 e0       	ldi	r17, 0x01	; 1
 228:	01 c0       	rjmp	.+2      	; 0x22c <LCDWriteString+0x38>
 22a:	11 e0       	ldi	r17, 0x01	; 1
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	89 91       	ld	r24, Y+
 230:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
 234:	1f 5f       	subi	r17, 0xFF	; 255
 236:	88 81       	ld	r24, Y
 238:	81 11       	cpse	r24, r1
 23a:	e4 cf       	rjmp	.-56     	; 0x204 <LCDWriteString+0x10>
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	08 95       	ret

00000246 <LCDWriteInt>:
 246:	8f 92       	push	r8
 248:	9f 92       	push	r9
 24a:	af 92       	push	r10
 24c:	bf 92       	push	r11
 24e:	df 92       	push	r13
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	2a 97       	sbiw	r28, 0x0a	; 10
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
 26c:	4b 01       	movw	r8, r22
 26e:	5c 01       	movw	r10, r24
 270:	14 2f       	mov	r17, r20
 272:	fe 01       	movw	r30, r28
 274:	31 96       	adiw	r30, 0x01	; 1
 276:	8a e0       	ldi	r24, 0x0A	; 10
 278:	df 01       	movw	r26, r30
 27a:	1d 92       	st	X+, r1
 27c:	8a 95       	dec	r24
 27e:	e9 f7       	brne	.-6      	; 0x27a <LCDWriteInt+0x34>
 280:	81 14       	cp	r8, r1
 282:	91 04       	cpc	r9, r1
 284:	a1 04       	cpc	r10, r1
 286:	b1 04       	cpc	r11, r1
 288:	11 f0       	breq	.+4      	; 0x28e <LCDWriteInt+0x48>
 28a:	00 e0       	ldi	r16, 0x00	; 0
 28c:	01 c0       	rjmp	.+2      	; 0x290 <LCDWriteInt+0x4a>
 28e:	01 e0       	ldi	r16, 0x01	; 1
 290:	a5 01       	movw	r20, r10
 292:	94 01       	movw	r18, r8
 294:	09 c0       	rjmp	.+18     	; 0x2a8 <LCDWriteInt+0x62>
 296:	0f 5f       	subi	r16, 0xFF	; 255
 298:	ca 01       	movw	r24, r20
 29a:	b9 01       	movw	r22, r18
 29c:	2a e0       	ldi	r18, 0x0A	; 10
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__divmodsi4>
 2a8:	21 15       	cp	r18, r1
 2aa:	31 05       	cpc	r19, r1
 2ac:	41 05       	cpc	r20, r1
 2ae:	51 05       	cpc	r21, r1
 2b0:	91 f7       	brne	.-28     	; 0x296 <LCDWriteInt+0x50>
 2b2:	10 1b       	sub	r17, r16
 2b4:	0a f4       	brpl	.+2      	; 0x2b8 <LCDWriteInt+0x72>
 2b6:	10 e0       	ldi	r17, 0x00	; 0
 2b8:	bb 20       	and	r11, r11
 2ba:	64 f4       	brge	.+24     	; 0x2d4 <LCDWriteInt+0x8e>
 2bc:	b0 94       	com	r11
 2be:	a0 94       	com	r10
 2c0:	90 94       	com	r9
 2c2:	80 94       	com	r8
 2c4:	81 1c       	adc	r8, r1
 2c6:	91 1c       	adc	r9, r1
 2c8:	a1 1c       	adc	r10, r1
 2ca:	b1 1c       	adc	r11, r1
 2cc:	0f 5f       	subi	r16, 0xFF	; 255
 2ce:	dd 24       	eor	r13, r13
 2d0:	d3 94       	inc	r13
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <LCDWriteInt+0x90>
 2d4:	d1 2c       	mov	r13, r1
 2d6:	10 0f       	add	r17, r16
 2d8:	22 c0       	rjmp	.+68     	; 0x31e <LCDWriteInt+0xd8>
 2da:	1a 30       	cpi	r17, 0x0A	; 10
 2dc:	a8 f4       	brcc	.+42     	; 0x308 <LCDWriteInt+0xc2>
 2de:	e1 2e       	mov	r14, r17
 2e0:	f1 2c       	mov	r15, r1
 2e2:	b1 e0       	ldi	r27, 0x01	; 1
 2e4:	eb 1a       	sub	r14, r27
 2e6:	f1 08       	sbc	r15, r1
 2e8:	c5 01       	movw	r24, r10
 2ea:	b4 01       	movw	r22, r8
 2ec:	2a e0       	ldi	r18, 0x0A	; 10
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__divmodsi4>
 2f8:	e1 e0       	ldi	r30, 0x01	; 1
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ec 0f       	add	r30, r28
 2fe:	fd 1f       	adc	r31, r29
 300:	ee 0d       	add	r30, r14
 302:	ff 1d       	adc	r31, r15
 304:	60 5d       	subi	r22, 0xD0	; 208
 306:	60 83       	st	Z, r22
 308:	c5 01       	movw	r24, r10
 30a:	b4 01       	movw	r22, r8
 30c:	2a e0       	ldi	r18, 0x0A	; 10
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__divmodsi4>
 318:	49 01       	movw	r8, r18
 31a:	5a 01       	movw	r10, r20
 31c:	11 50       	subi	r17, 0x01	; 1
 31e:	11 11       	cpse	r17, r1
 320:	dc cf       	rjmp	.-72     	; 0x2da <LCDWriteInt+0x94>
 322:	dd 20       	and	r13, r13
 324:	11 f0       	breq	.+4      	; 0x32a <LCDWriteInt+0xe4>
 326:	8d e2       	ldi	r24, 0x2D	; 45
 328:	89 83       	std	Y+1, r24	; 0x01
 32a:	ce 01       	movw	r24, r28
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
 332:	2a 96       	adiw	r28, 0x0a	; 10
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	df 90       	pop	r13
 34c:	bf 90       	pop	r11
 34e:	af 90       	pop	r10
 350:	9f 90       	pop	r9
 352:	8f 90       	pop	r8
 354:	08 95       	ret

00000356 <LCDSetup>:
 356:	ff 92       	push	r15
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	f8 2e       	mov	r15, r24
 362:	88 ee       	ldi	r24, 0xE8	; 232
 364:	93 e0       	ldi	r25, 0x03	; 3
 366:	05 c0       	rjmp	.+10     	; 0x372 <LCDSetup+0x1c>
 368:	e0 e9       	ldi	r30, 0x90	; 144
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <LCDSetup+0x16>
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	00 97       	sbiw	r24, 0x00	; 0
 374:	c9 f7       	brne	.-14     	; 0x368 <LCDSetup+0x12>
 376:	87 b1       	in	r24, 0x07	; 7
 378:	8c 63       	ori	r24, 0x3C	; 60
 37a:	87 b9       	out	0x07, r24	; 7
 37c:	88 b1       	in	r24, 0x08	; 8
 37e:	83 7c       	andi	r24, 0xC3	; 195
 380:	88 b9       	out	0x08, r24	; 8
 382:	8a b1       	in	r24, 0x0a	; 10
 384:	84 60       	ori	r24, 0x04	; 4
 386:	8a b9       	out	0x0a, r24	; 10
 388:	8a b1       	in	r24, 0x0a	; 10
 38a:	88 60       	ori	r24, 0x08	; 8
 38c:	8a b9       	out	0x0a, r24	; 10
 38e:	8a b1       	in	r24, 0x0a	; 10
 390:	8c 61       	ori	r24, 0x1C	; 28
 392:	8a b9       	out	0x0a, r24	; 10
 394:	8b b1       	in	r24, 0x0b	; 11
 396:	8f 7e       	andi	r24, 0xEF	; 239
 398:	8b b9       	out	0x0b, r24	; 11
 39a:	8b b1       	in	r24, 0x0b	; 11
 39c:	87 7f       	andi	r24, 0xF7	; 247
 39e:	8b b9       	out	0x0b, r24	; 11
 3a0:	8b b1       	in	r24, 0x0b	; 11
 3a2:	8b 7f       	andi	r24, 0xFB	; 251
 3a4:	8b b9       	out	0x0b, r24	; 11
 3a6:	88 b1       	in	r24, 0x08	; 8
 3a8:	8c 60       	ori	r24, 0x0C	; 12
 3aa:	88 b9       	out	0x08, r24	; 8
 3ac:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
 3b0:	88 b1       	in	r24, 0x08	; 8
 3b2:	83 7c       	andi	r24, 0xC3	; 195
 3b4:	88 b9       	out	0x08, r24	; 8
 3b6:	00 e4       	ldi	r16, 0x40	; 64
 3b8:	1c e9       	ldi	r17, 0x9C	; 156
 3ba:	c8 01       	movw	r24, r16
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCDSetup+0x66>
 3c0:	88 b1       	in	r24, 0x08	; 8
 3c2:	8c 60       	ori	r24, 0x0C	; 12
 3c4:	88 b9       	out	0x08, r24	; 8
 3c6:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
 3ca:	88 b1       	in	r24, 0x08	; 8
 3cc:	83 7c       	andi	r24, 0xC3	; 195
 3ce:	88 b9       	out	0x08, r24	; 8
 3d0:	c0 ea       	ldi	r28, 0xA0	; 160
 3d2:	df e0       	ldi	r29, 0x0F	; 15
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <LCDSetup+0x80>
 3da:	88 b1       	in	r24, 0x08	; 8
 3dc:	8c 60       	ori	r24, 0x0C	; 12
 3de:	88 b9       	out	0x08, r24	; 8
 3e0:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
 3e4:	88 b1       	in	r24, 0x08	; 8
 3e6:	83 7c       	andi	r24, 0xC3	; 195
 3e8:	88 b9       	out	0x08, r24	; 8
 3ea:	ce 01       	movw	r24, r28
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCDSetup+0x96>
 3f0:	88 b1       	in	r24, 0x08	; 8
 3f2:	88 60       	ori	r24, 0x08	; 8
 3f4:	88 b9       	out	0x08, r24	; 8
 3f6:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
 3fa:	88 b1       	in	r24, 0x08	; 8
 3fc:	83 7c       	andi	r24, 0xC3	; 195
 3fe:	88 b9       	out	0x08, r24	; 8
 400:	ce 01       	movw	r24, r28
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 406:	88 b1       	in	r24, 0x08	; 8
 408:	88 60       	ori	r24, 0x08	; 8
 40a:	88 b9       	out	0x08, r24	; 8
 40c:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
 410:	88 b1       	in	r24, 0x08	; 8
 412:	83 7c       	andi	r24, 0xC3	; 195
 414:	88 b9       	out	0x08, r24	; 8
 416:	ce 01       	movw	r24, r28
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 41c:	88 b1       	in	r24, 0x08	; 8
 41e:	80 62       	ori	r24, 0x20	; 32
 420:	88 b9       	out	0x08, r24	; 8
 422:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
 426:	88 b1       	in	r24, 0x08	; 8
 428:	83 7c       	andi	r24, 0xC3	; 195
 42a:	88 b9       	out	0x08, r24	; 8
 42c:	ce 01       	movw	r24, r28
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 432:	88 b1       	in	r24, 0x08	; 8
 434:	84 60       	ori	r24, 0x04	; 4
 436:	88 b9       	out	0x08, r24	; 8
 438:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
 43c:	88 b1       	in	r24, 0x08	; 8
 43e:	83 7c       	andi	r24, 0xC3	; 195
 440:	88 b9       	out	0x08, r24	; 8
 442:	80 e2       	ldi	r24, 0x20	; 32
 444:	9e e4       	ldi	r25, 0x4E	; 78
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44a:	88 b1       	in	r24, 0x08	; 8
 44c:	88 61       	ori	r24, 0x18	; 24
 44e:	88 b9       	out	0x08, r24	; 8
 450:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
 454:	88 b1       	in	r24, 0x08	; 8
 456:	83 7c       	andi	r24, 0xC3	; 195
 458:	88 b9       	out	0x08, r24	; 8
 45a:	ce 01       	movw	r24, r28
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 460:	88 b1       	in	r24, 0x08	; 8
 462:	80 63       	ori	r24, 0x30	; 48
 464:	88 b9       	out	0x08, r24	; 8
 466:	21 97       	sbiw	r28, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46a:	88 b1       	in	r24, 0x08	; 8
 46c:	83 7c       	andi	r24, 0xC3	; 195
 46e:	88 b9       	out	0x08, r24	; 8
 470:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
 474:	88 b1       	in	r24, 0x08	; 8
 476:	88 60       	ori	r24, 0x08	; 8
 478:	88 b9       	out	0x08, r24	; 8
 47a:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
 47e:	88 b1       	in	r24, 0x08	; 8
 480:	83 7c       	andi	r24, 0xC3	; 195
 482:	88 b9       	out	0x08, r24	; 8
 484:	c8 01       	movw	r24, r16
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	8f 2d       	mov	r24, r15
 48e:	8c 60       	ori	r24, 0x0C	; 12
 490:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	80 e8       	ldi	r24, 0x80	; 128
 4a0:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	ff 90       	pop	r15
 4ae:	08 95       	ret

000004b0 <DHT11Setup>:
 4b0:	80 e2       	ldi	r24, 0x20	; 32
 4b2:	9e e4       	ldi	r25, 0x4E	; 78
 4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <DHT11Setup+0x10>
 4b6:	e0 e9       	ldi	r30, 0x90	; 144
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	31 97       	sbiw	r30, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <DHT11Setup+0xa>
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	00 97       	sbiw	r24, 0x00	; 0
 4c2:	c9 f7       	brne	.-14     	; 0x4b6 <DHT11Setup+0x6>
 4c4:	84 b1       	in	r24, 0x04	; 4
 4c6:	81 60       	ori	r24, 0x01	; 1
 4c8:	84 b9       	out	0x04, r24	; 4
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <__data_end>
 4d0:	08 95       	ret

000004d2 <DHT11DisplayTemperatureF>:
 4d2:	86 e0       	ldi	r24, 0x06	; 6
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
 4da:	60 91 cf 02 	lds	r22, 0x02CF	; 0x8002cf <DHT11Data+0x2>
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 94 06 	call	0xd28	; 0xd28 <__floatsisf>
 4e8:	26 e6       	ldi	r18, 0x66	; 102
 4ea:	36 e6       	ldi	r19, 0x66	; 102
 4ec:	46 ee       	ldi	r20, 0xE6	; 230
 4ee:	5f e3       	ldi	r21, 0x3F	; 63
 4f0:	0e 94 49 07 	call	0xe92	; 0xe92 <__mulsf3>
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	52 e4       	ldi	r21, 0x42	; 66
 4fc:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__addsf3>
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	a9 01       	movw	r20, r18
 506:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__addsf3>
 50a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fixsfsi>
 50e:	42 e0       	ldi	r20, 0x02	; 2
 510:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	8f ed       	ldi	r24, 0xDF	; 223
 518:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	86 e4       	ldi	r24, 0x46	; 70
 520:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
 524:	08 95       	ret

00000526 <DHT11DisplayTemperatureC>:
 526:	86 e0       	ldi	r24, 0x06	; 6
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
 52e:	60 91 cf 02 	lds	r22, 0x02CF	; 0x8002cf <DHT11Data+0x2>
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	42 e0       	ldi	r20, 0x02	; 2
 53a:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	8f ed       	ldi	r24, 0xDF	; 223
 542:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	83 e4       	ldi	r24, 0x43	; 67
 54a:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
 54e:	08 95       	ret

00000550 <DHT11DisplayHumidity>:
 550:	89 e0       	ldi	r24, 0x09	; 9
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
 558:	60 91 cd 02 	lds	r22, 0x02CD	; 0x8002cd <DHT11Data>
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	42 e0       	ldi	r20, 0x02	; 2
 564:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	85 e2       	ldi	r24, 0x25	; 37
 56c:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
 570:	08 95       	ret

00000572 <DHT11ReadData>:
 572:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
 576:	81 11       	cpse	r24, r1
 578:	02 c0       	rjmp	.+4      	; 0x57e <DHT11ReadData+0xc>
 57a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <DHT11Setup>
 57e:	84 b1       	in	r24, 0x04	; 4
 580:	81 60       	ori	r24, 0x01	; 1
 582:	84 b9       	out	0x04, r24	; 4
 584:	85 b1       	in	r24, 0x05	; 5
 586:	8e 7f       	andi	r24, 0xFE	; 254
 588:	85 b9       	out	0x05, r24	; 5
 58a:	88 ec       	ldi	r24, 0xC8	; 200
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	05 c0       	rjmp	.+10     	; 0x59a <DHT11ReadData+0x28>
 590:	e0 e9       	ldi	r30, 0x90	; 144
 592:	f1 e0       	ldi	r31, 0x01	; 1
 594:	31 97       	sbiw	r30, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <DHT11ReadData+0x22>
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	00 97       	sbiw	r24, 0x00	; 0
 59c:	c9 f7       	brne	.-14     	; 0x590 <DHT11ReadData+0x1e>
 59e:	84 b1       	in	r24, 0x04	; 4
 5a0:	8e 7f       	andi	r24, 0xFE	; 254
 5a2:	84 b9       	out	0x04, r24	; 4
 5a4:	8a ea       	ldi	r24, 0xAA	; 170
 5a6:	8a 95       	dec	r24
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <DHT11ReadData+0x34>
 5aa:	18 99       	sbic	0x03, 0	; 3
 5ac:	5f c0       	rjmp	.+190    	; 0x66c <DHT11ReadData+0xfa>
 5ae:	88 e4       	ldi	r24, 0x48	; 72
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <DHT11ReadData+0x40>
 5b6:	18 9b       	sbis	0x03, 0	; 3
 5b8:	5b c0       	rjmp	.+182    	; 0x670 <DHT11ReadData+0xfe>
 5ba:	88 e4       	ldi	r24, 0x48	; 72
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	f1 f7       	brne	.-4      	; 0x5be <DHT11ReadData+0x4c>
 5c2:	18 99       	sbic	0x03, 0	; 3
 5c4:	57 c0       	rjmp	.+174    	; 0x674 <DHT11ReadData+0x102>
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	33 c0       	rjmp	.+102    	; 0x630 <DHT11ReadData+0xbe>
 5ca:	8f 5f       	subi	r24, 0xFF	; 255
 5cc:	89 30       	cpi	r24, 0x09	; 9
 5ce:	38 f4       	brcc	.+14     	; 0x5de <DHT11ReadData+0x6c>
 5d0:	95 e3       	ldi	r25, 0x35	; 53
 5d2:	9a 95       	dec	r25
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <DHT11ReadData+0x60>
 5d6:	01 c0       	rjmp	.+2      	; 0x5da <DHT11ReadData+0x68>
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	18 9b       	sbis	0x03, 0	; 3
 5dc:	f6 cf       	rjmp	.-20     	; 0x5ca <DHT11ReadData+0x58>
 5de:	18 9b       	sbis	0x03, 0	; 3
 5e0:	4b c0       	rjmp	.+150    	; 0x678 <DHT11ReadData+0x106>
 5e2:	85 ed       	ldi	r24, 0xD5	; 213
 5e4:	8a 95       	dec	r24
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <DHT11ReadData+0x72>
 5e8:	18 9b       	sbis	0x03, 0	; 3
 5ea:	0c c0       	rjmp	.+24     	; 0x604 <DHT11ReadData+0x92>
 5ec:	47 e0       	ldi	r20, 0x07	; 7
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	42 1b       	sub	r20, r18
 5f2:	51 09       	sbc	r21, r1
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DHT11ReadData+0x8c>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	4a 95       	dec	r20
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DHT11ReadData+0x88>
 602:	38 2b       	or	r19, r24
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	06 c0       	rjmp	.+12     	; 0x614 <DHT11ReadData+0xa2>
 608:	8f 5f       	subi	r24, 0xFF	; 255
 60a:	89 30       	cpi	r24, 0x09	; 9
 60c:	28 f4       	brcc	.+10     	; 0x618 <DHT11ReadData+0xa6>
 60e:	95 e3       	ldi	r25, 0x35	; 53
 610:	9a 95       	dec	r25
 612:	f1 f7       	brne	.-4      	; 0x610 <DHT11ReadData+0x9e>
 614:	18 99       	sbic	0x03, 0	; 3
 616:	f8 cf       	rjmp	.-16     	; 0x608 <DHT11ReadData+0x96>
 618:	2f 5f       	subi	r18, 0xFF	; 255
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DHT11ReadData+0xae>
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	20 e0       	ldi	r18, 0x00	; 0
 620:	28 30       	cpi	r18, 0x08	; 8
 622:	d0 f2       	brcs	.-76     	; 0x5d8 <DHT11ReadData+0x66>
 624:	e6 2f       	mov	r30, r22
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	e3 53       	subi	r30, 0x33	; 51
 62a:	fd 4f       	sbci	r31, 0xFD	; 253
 62c:	30 83       	st	Z, r19
 62e:	6f 5f       	subi	r22, 0xFF	; 255
 630:	65 30       	cpi	r22, 0x05	; 5
 632:	a0 f3       	brcs	.-24     	; 0x61c <DHT11ReadData+0xaa>
 634:	80 ef       	ldi	r24, 0xF0	; 240
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <DHT11ReadData+0xc6>
 63c:	ed ec       	ldi	r30, 0xCD	; 205
 63e:	f2 e0       	ldi	r31, 0x02	; 2
 640:	30 81       	ld	r19, Z
 642:	21 81       	ldd	r18, Z+1	; 0x01
 644:	92 81       	ldd	r25, Z+2	; 0x02
 646:	83 81       	ldd	r24, Z+3	; 0x03
 648:	23 0f       	add	r18, r19
 64a:	92 0f       	add	r25, r18
 64c:	89 0f       	add	r24, r25
 64e:	94 81       	ldd	r25, Z+4	; 0x04
 650:	89 13       	cpse	r24, r25
 652:	14 c0       	rjmp	.+40     	; 0x67c <DHT11ReadData+0x10a>
 654:	80 e1       	ldi	r24, 0x10	; 16
 656:	97 e2       	ldi	r25, 0x27	; 39
 658:	05 c0       	rjmp	.+10     	; 0x664 <DHT11ReadData+0xf2>
 65a:	e0 e9       	ldi	r30, 0x90	; 144
 65c:	f1 e0       	ldi	r31, 0x01	; 1
 65e:	31 97       	sbiw	r30, 0x01	; 1
 660:	f1 f7       	brne	.-4      	; 0x65e <DHT11ReadData+0xec>
 662:	01 97       	sbiw	r24, 0x01	; 1
 664:	00 97       	sbiw	r24, 0x00	; 0
 666:	c9 f7       	brne	.-14     	; 0x65a <DHT11ReadData+0xe8>
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	08 95       	ret
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	08 95       	ret
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	08 95       	ret
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	08 95       	ret
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	08 95       	ret
 67c:	8f ef       	ldi	r24, 0xFF	; 255
 67e:	08 95       	ret

00000680 <adc_init>:
		}
    }
}

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));		//16Mhz/128 = 125Khz the ADC reference clock
 680:	ea e7       	ldi	r30, 0x7A	; 122
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 81       	ld	r24, Z
 686:	87 60       	ori	r24, 0x07	; 7
 688:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);								//Voltage reference from Avcc (5v)
 68a:	ac e7       	ldi	r26, 0x7C	; 124
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	8c 91       	ld	r24, X
 690:	80 64       	ori	r24, 0x40	; 64
 692:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);								//Turn on ADC
 694:	80 81       	ld	r24, Z
 696:	80 68       	ori	r24, 0x80	; 128
 698:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);								//Do an initial conversion because this one is the slowest
 69a:	80 81       	ld	r24, Z
 69c:	80 64       	ori	r24, 0x40	; 64
 69e:	80 83       	st	Z, r24
 6a0:	08 95       	ret

000006a2 <read_adc>:
}

uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;						//Clear the older channel that was read
 6a2:	ec e7       	ldi	r30, 0x7C	; 124
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	90 81       	ld	r25, Z
 6a8:	90 7f       	andi	r25, 0xF0	; 240
 6aa:	90 83       	st	Z, r25
	ADMUX |= channel;					//Defines the new ADC channel to be read
 6ac:	90 81       	ld	r25, Z
 6ae:	89 2b       	or	r24, r25
 6b0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
 6b2:	ea e7       	ldi	r30, 0x7A	; 122
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	80 64       	ori	r24, 0x40	; 64
 6ba:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
 6bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 6c0:	86 fd       	sbrc	r24, 6
 6c2:	fc cf       	rjmp	.-8      	; 0x6bc <read_adc+0x1a>
	return (ADCW*5);                    //Returns the ADC value of the chosen channel
 6c4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 6c8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 6cc:	9c 01       	movw	r18, r24
 6ce:	22 0f       	add	r18, r18
 6d0:	33 1f       	adc	r19, r19
 6d2:	22 0f       	add	r18, r18
 6d4:	33 1f       	adc	r19, r19
}
 6d6:	82 0f       	add	r24, r18
 6d8:	93 1f       	adc	r25, r19
 6da:	08 95       	ret

000006dc <USART_init>:

void USART_init(void){
	UBRR0H = (uint8_t)(BAUD_PRESCALER>>8);	//Setting Baud rate
 6dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALER);		//Setting Baud rate
 6e0:	87 e6       	ldi	r24, 0x67	; 103
 6e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);			//Enable receiver (RXEN0) and transmitter (TXENO)
 6e6:	e1 ec       	ldi	r30, 0xC1	; 193
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	88 e1       	ldi	r24, 0x18	; 24
 6ec:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSR0B)|(3<<UCSZ00);		//From datasheet, set format:8data, 2stop bit
 6ee:	20 81       	ld	r18, Z
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <USART_init+0x1e>
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	2a 95       	dec	r18
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <USART_init+0x1a>
 6fe:	86 60       	ori	r24, 0x06	; 6
 700:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt 
 704:	80 81       	ld	r24, Z
 706:	80 68       	ori	r24, 0x80	; 128
 708:	80 83       	st	Z, r24
	sei(); // Enable the Global Interrupt Enable flag so that interrupts can be processed
 70a:	78 94       	sei
 70c:	08 95       	ret

0000070e <__vector_18>:
}

ISR(USART_RX_vect) {
 70e:	1f 92       	push	r1
 710:	0f 92       	push	r0
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	0f 92       	push	r0
 716:	11 24       	eor	r1, r1
 718:	2f 93       	push	r18
 71a:	3f 93       	push	r19
 71c:	4f 93       	push	r20
 71e:	5f 93       	push	r21
 720:	6f 93       	push	r22
 722:	7f 93       	push	r23
 724:	8f 93       	push	r24
 726:	9f 93       	push	r25
 728:	af 93       	push	r26
 72a:	bf 93       	push	r27
 72c:	cf 93       	push	r28
 72e:	ef 93       	push	r30
 730:	ff 93       	push	r31
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
 732:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (ReceivedByte == 'S') {
 736:	c3 35       	cpi	r28, 0x53	; 83
 738:	51 f4       	brne	.+20     	; 0x74e <__vector_18+0x40>
		ReceivedByte = UDR0;
 73a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		dt = ReceivedByte - 48; //Change interval with which measurements are taken
 73e:	8c 2f       	mov	r24, r28
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	c0 97       	sbiw	r24, 0x30	; 48
 744:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <dt+0x1>
 748:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <dt>
 74c:	73 c0       	rjmp	.+230    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
	}
	else if (ReceivedByte == 'T') {
 74e:	c4 35       	cpi	r28, 0x54	; 84
 750:	b9 f4       	brne	.+46     	; 0x780 <__vector_18+0x72>
		LCDClear();
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		temp = 1;
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <temp+0x1>
 762:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <temp>
		all = 0;
 766:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <all+0x1>
 76a:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <all>
		bright = 0;
 76e:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <bright+0x1>
 772:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <bright>
		humid = 0;
 776:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <humid+0x1>
 77a:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <humid>
 77e:	5a c0       	rjmp	.+180    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
	}
	else if (ReceivedByte == 'B') {
 780:	c2 34       	cpi	r28, 0x42	; 66
 782:	b9 f4       	brne	.+46     	; 0x7b2 <__vector_18+0xa4>
		LCDClear();
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		bright = 1;
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <bright+0x1>
 794:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <bright>
		all = 0;
 798:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <all+0x1>
 79c:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <all>
		temp = 0;
 7a0:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <temp+0x1>
 7a4:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <temp>
		humid = 0;
 7a8:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <humid+0x1>
 7ac:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <humid>
 7b0:	41 c0       	rjmp	.+130    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
	}
	else if (ReceivedByte == 'H') {
 7b2:	c8 34       	cpi	r28, 0x48	; 72
 7b4:	b9 f4       	brne	.+46     	; 0x7e4 <__vector_18+0xd6>
		LCDClear();
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		humid = 1;
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <humid+0x1>
 7c6:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <humid>
		all = 0;
 7ca:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <all+0x1>
 7ce:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <all>
		bright = 0;
 7d2:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <bright+0x1>
 7d6:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <bright>
		temp = 0;
 7da:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <temp+0x1>
 7de:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <temp>
 7e2:	28 c0       	rjmp	.+80     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
	}
	else if (ReceivedByte == 'A') {
 7e4:	c1 34       	cpi	r28, 0x41	; 65
 7e6:	b9 f4       	brne	.+46     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		LCDClear();
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		all = 1;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <all+0x1>
 7f8:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <all>
		temp = 0;
 7fc:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <temp+0x1>
 800:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <temp>
		bright = 0;
 804:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <bright+0x1>
 808:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <bright>
		humid = 0;
 80c:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <humid+0x1>
 810:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <humid>
 814:	0f c0       	rjmp	.+30     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
	}
	else if (ReceivedByte == 'F') {
 816:	c6 34       	cpi	r28, 0x46	; 70
 818:	39 f4       	brne	.+14     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		fahren = 1;
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <fahren+0x1>
 822:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <fahren>
 826:	06 c0       	rjmp	.+12     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
	}
	else if (ReceivedByte == 'C') {
 828:	c3 34       	cpi	r28, 0x43	; 67
 82a:	21 f4       	brne	.+8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
		fahren = 0;
 82c:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <fahren+0x1>
 830:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <fahren>
	}
	UDR0 = ReceivedByte; //echo
 834:	e6 ec       	ldi	r30, 0xC6	; 198
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	c0 83       	st	Z, r28
	ReceivedByte = UDR0; // Next char
 83a:	80 81       	ld	r24, Z
}
 83c:	ff 91       	pop	r31
 83e:	ef 91       	pop	r30
 840:	cf 91       	pop	r28
 842:	bf 91       	pop	r27
 844:	af 91       	pop	r26
 846:	9f 91       	pop	r25
 848:	8f 91       	pop	r24
 84a:	7f 91       	pop	r23
 84c:	6f 91       	pop	r22
 84e:	5f 91       	pop	r21
 850:	4f 91       	pop	r20
 852:	3f 91       	pop	r19
 854:	2f 91       	pop	r18
 856:	0f 90       	pop	r0
 858:	0f be       	out	0x3f, r0	; 63
 85a:	0f 90       	pop	r0
 85c:	1f 90       	pop	r1
 85e:	18 95       	reti

00000860 <USART_send>:

void USART_send(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));			//While UDRE0 (USART Data Register flag) is clear,
 860:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 864:	95 ff       	sbrs	r25, 5
 866:	fc cf       	rjmp	.-8      	; 0x860 <USART_send>
	UDR0 = data;	
 868:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 86c:	08 95       	ret

0000086e <USART_putstring>:
}

void USART_putstring(char* StringPtr){
 86e:	cf 93       	push	r28
 870:	df 93       	push	r29
 872:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
 874:	03 c0       	rjmp	.+6      	; 0x87c <USART_putstring+0xe>
		USART_send(*StringPtr);
 876:	0e 94 30 04 	call	0x860	; 0x860 <USART_send>
	StringPtr++;}	
 87a:	21 96       	adiw	r28, 0x01	; 1
	while(!(UCSR0A & (1<<UDRE0)));			//While UDRE0 (USART Data Register flag) is clear,
	UDR0 = data;	
}

void USART_putstring(char* StringPtr){
	while(*StringPtr != 0x00){
 87c:	88 81       	ld	r24, Y
 87e:	81 11       	cpse	r24, r1
 880:	fa cf       	rjmp	.-12     	; 0x876 <USART_putstring+0x8>
		USART_send(*StringPtr);
	StringPtr++;}	
}
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <main>:
int all;
int fahren;  //Boolean to determine whether temp is C or F

int main(void)
{
	all = 1;
 888:	c1 e0       	ldi	r28, 0x01	; 1
 88a:	d0 e0       	ldi	r29, 0x00	; 0
 88c:	d0 93 d6 02 	sts	0x02D6, r29	; 0x8002d6 <all+0x1>
 890:	c0 93 d5 02 	sts	0x02D5, r28	; 0x8002d5 <all>
	//humid = 1;
	//Initialize LCD
	LCDSetup(LCD_CURSOR_NONE);	
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	0e 94 ab 01 	call	0x356	; 0x356 <LCDSetup>
	adc_init();
 89a:	0e 94 40 03 	call	0x680	; 0x680 <adc_init>
	USART_init();
 89e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <USART_init>

	USART_putstring("Measurements are being taken 1s apart. \r \n");
 8a2:	8c e0       	ldi	r24, 0x0C	; 12
 8a4:	91 e0       	ldi	r25, 0x01	; 1
 8a6:	0e 94 37 04 	call	0x86e	; 0x86e <USART_putstring>
	USART_putstring("To specify the spacing of measurements in seconds, enter the command Sx, where x is desired seconds. \r \n");
 8aa:	87 e3       	ldi	r24, 0x37	; 55
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	0e 94 37 04 	call	0x86e	; 0x86e <USART_putstring>
	USART_putstring("To specify which measurement to view, enter the command: \r \n");
 8b2:	80 ea       	ldi	r24, 0xA0	; 160
 8b4:	91 e0       	ldi	r25, 0x01	; 1
 8b6:	0e 94 37 04 	call	0x86e	; 0x86e <USART_putstring>
	USART_putstring("T for temperature, \r \n");
 8ba:	8d ed       	ldi	r24, 0xDD	; 221
 8bc:	91 e0       	ldi	r25, 0x01	; 1
 8be:	0e 94 37 04 	call	0x86e	; 0x86e <USART_putstring>
	USART_putstring("B for brightness, \r \n");
 8c2:	84 ef       	ldi	r24, 0xF4	; 244
 8c4:	91 e0       	ldi	r25, 0x01	; 1
 8c6:	0e 94 37 04 	call	0x86e	; 0x86e <USART_putstring>
	USART_putstring("H for humidity, or \r \n");
 8ca:	8a e0       	ldi	r24, 0x0A	; 10
 8cc:	92 e0       	ldi	r25, 0x02	; 2
 8ce:	0e 94 37 04 	call	0x86e	; 0x86e <USART_putstring>
	USART_putstring("A for all measurements. \r \n");
 8d2:	81 e2       	ldi	r24, 0x21	; 33
 8d4:	92 e0       	ldi	r25, 0x02	; 2
 8d6:	0e 94 37 04 	call	0x86e	; 0x86e <USART_putstring>
	USART_putstring("To display temperature in Fahrenheit, enter the command F. \r \n");
 8da:	8d e3       	ldi	r24, 0x3D	; 61
 8dc:	92 e0       	ldi	r25, 0x02	; 2
 8de:	0e 94 37 04 	call	0x86e	; 0x86e <USART_putstring>
	USART_putstring("To display temperature in Celsius, enter the command C. \r \n");
 8e2:	8c e7       	ldi	r24, 0x7C	; 124
 8e4:	92 e0       	ldi	r25, 0x02	; 2
 8e6:	0e 94 37 04 	call	0x86e	; 0x86e <USART_putstring>
	
	dt = 1;
 8ea:	d0 93 dc 02 	sts	0x02DC, r29	; 0x8002dc <dt+0x1>
 8ee:	c0 93 db 02 	sts	0x02DB, r28	; 0x8002db <dt>
    while (1) 
    {
		
		delay = dt*1000;		//Delay is in ms
 8f2:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <dt>
 8f6:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <dt+0x1>
 8fa:	88 ee       	ldi	r24, 0xE8	; 232
 8fc:	93 e0       	ldi	r25, 0x03	; 3
 8fe:	28 9f       	mul	r18, r24
 900:	b0 01       	movw	r22, r0
 902:	29 9f       	mul	r18, r25
 904:	70 0d       	add	r23, r0
 906:	38 9f       	mul	r19, r24
 908:	70 0d       	add	r23, r0
 90a:	11 24       	eor	r1, r1
 90c:	70 93 da 02 	sts	0x02DA, r23	; 0x8002da <delay+0x1>
 910:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <delay>
		_delay_ms(delay);
 914:	07 2e       	mov	r0, r23
 916:	00 0c       	add	r0, r0
 918:	88 0b       	sbc	r24, r24
 91a:	99 0b       	sbc	r25, r25
 91c:	0e 94 94 06 	call	0xd28	; 0xd28 <__floatsisf>
 920:	4b 01       	movw	r8, r22
 922:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 924:	20 e0       	ldi	r18, 0x00	; 0
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	4a e7       	ldi	r20, 0x7A	; 122
 92a:	55 e4       	ldi	r21, 0x45	; 69
 92c:	0e 94 49 07 	call	0xe92	; 0xe92 <__mulsf3>
 930:	6b 01       	movw	r12, r22
 932:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 934:	20 e0       	ldi	r18, 0x00	; 0
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	40 e8       	ldi	r20, 0x80	; 128
 93a:	5f e3       	ldi	r21, 0x3F	; 63
 93c:	0e 94 e5 05 	call	0xbca	; 0xbca <__cmpsf2>
 940:	88 23       	and	r24, r24
 942:	24 f1       	brlt	.+72     	; 0x98c <__stack+0x8d>
		__ticks = 1;
	else if (__tmp > 65535)
 944:	20 e0       	ldi	r18, 0x00	; 0
 946:	3f ef       	ldi	r19, 0xFF	; 255
 948:	4f e7       	ldi	r20, 0x7F	; 127
 94a:	57 e4       	ldi	r21, 0x47	; 71
 94c:	c7 01       	movw	r24, r14
 94e:	b6 01       	movw	r22, r12
 950:	0e 94 44 07 	call	0xe88	; 0xe88 <__gesf2>
 954:	18 16       	cp	r1, r24
 956:	ac f4       	brge	.+42     	; 0x982 <__stack+0x83>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 958:	20 e0       	ldi	r18, 0x00	; 0
 95a:	30 e0       	ldi	r19, 0x00	; 0
 95c:	40 e2       	ldi	r20, 0x20	; 32
 95e:	51 e4       	ldi	r21, 0x41	; 65
 960:	c5 01       	movw	r24, r10
 962:	b4 01       	movw	r22, r8
 964:	0e 94 49 07 	call	0xe92	; 0xe92 <__mulsf3>
 968:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__fixunssfsi>
 96c:	06 c0       	rjmp	.+12     	; 0x97a <__stack+0x7b>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 96e:	80 e9       	ldi	r24, 0x90	; 144
 970:	91 e0       	ldi	r25, 0x01	; 1
 972:	01 97       	sbiw	r24, 0x01	; 1
 974:	f1 f7       	brne	.-4      	; 0x972 <__stack+0x73>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 976:	61 50       	subi	r22, 0x01	; 1
 978:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 97a:	61 15       	cp	r22, r1
 97c:	71 05       	cpc	r23, r1
 97e:	b9 f7       	brne	.-18     	; 0x96e <__stack+0x6f>
 980:	0a c0       	rjmp	.+20     	; 0x996 <__stack+0x97>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 982:	c7 01       	movw	r24, r14
 984:	b6 01       	movw	r22, r12
 986:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__fixunssfsi>
 98a:	02 c0       	rjmp	.+4      	; 0x990 <__stack+0x91>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 98c:	61 e0       	ldi	r22, 0x01	; 1
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	cb 01       	movw	r24, r22
 992:	01 97       	sbiw	r24, 0x01	; 1
 994:	f1 f7       	brne	.-4      	; 0x992 <__stack+0x93>
	
		DHTreturnCode = DHT11ReadData();		//Function to read and check the sensor data
 996:	0e 94 b9 02 	call	0x572	; 0x572 <DHT11ReadData>
 99a:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <DHTreturnCode>
		if(DHTreturnCode == -1){
 99e:	8f 3f       	cpi	r24, 0xFF	; 255
 9a0:	49 f4       	brne	.+18     	; 0x9b4 <__stack+0xb5>
			LCDHome();
 9a2:	60 e0       	ldi	r22, 0x00	; 0
 9a4:	80 e8       	ldi	r24, 0x80	; 128
 9a6:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
			LCDWriteString("Checksum Error");	//Error message on lcd to show data was received incorrectly
 9aa:	88 eb       	ldi	r24, 0xB8	; 184
 9ac:	92 e0       	ldi	r25, 0x02	; 2
 9ae:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
 9b2:	9f cf       	rjmp	.-194    	; 0x8f2 <main+0x6a>
		} else {
			if (all == 1) {
 9b4:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <all>
 9b8:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <all+0x1>
 9bc:	01 97       	sbiw	r24, 0x01	; 1
 9be:	09 f0       	breq	.+2      	; 0x9c2 <__stack+0xc3>
 9c0:	41 c0       	rjmp	.+130    	; 0xa44 <__stack+0x145>
				LCDHome();
 9c2:	60 e0       	ldi	r22, 0x00	; 0
 9c4:	80 e8       	ldi	r24, 0x80	; 128
 9c6:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				if (fahren == 1) {
 9ca:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <fahren>
 9ce:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <fahren+0x1>
 9d2:	01 97       	sbiw	r24, 0x01	; 1
 9d4:	19 f4       	brne	.+6      	; 0x9dc <__stack+0xdd>
					DHT11DisplayTemperatureF();			//Display Temp F
 9d6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DHT11DisplayTemperatureF>
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <__stack+0xe1>
				} else {
					DHT11DisplayTemperatureC();			//Display Temp C
 9dc:	0e 94 93 02 	call	0x526	; 0x526 <DHT11DisplayTemperatureC>
				}
				LCDGotoXY(8,1);
 9e0:	61 e0       	ldi	r22, 0x01	; 1
 9e2:	88 e0       	ldi	r24, 0x08	; 8
 9e4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDGotoXY>
				LCDWriteString("B:");				//Display Brightness
 9e8:	87 ec       	ldi	r24, 0xC7	; 199
 9ea:	92 e0       	ldi	r25, 0x02	; 2
 9ec:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
				adc_value =  ((float)read_adc(0)/2000)*100;
 9f0:	80 e0       	ldi	r24, 0x00	; 0
 9f2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_adc>
 9f6:	bc 01       	movw	r22, r24
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
 a00:	20 e0       	ldi	r18, 0x00	; 0
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	4a ef       	ldi	r20, 0xFA	; 250
 a06:	54 e4       	ldi	r21, 0x44	; 68
 a08:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__divsf3>
 a0c:	20 e0       	ldi	r18, 0x00	; 0
 a0e:	30 e0       	ldi	r19, 0x00	; 0
 a10:	48 ec       	ldi	r20, 0xC8	; 200
 a12:	52 e4       	ldi	r21, 0x42	; 66
 a14:	0e 94 49 07 	call	0xe92	; 0xe92 <__mulsf3>
 a18:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__fixunssfsi>
 a1c:	70 93 d8 02 	sts	0x02D8, r23	; 0x8002d8 <adc_value+0x1>
 a20:	60 93 d7 02 	sts	0x02D7, r22	; 0x8002d7 <adc_value>
				LCDWriteInt(adc_value,3);
 a24:	80 e0       	ldi	r24, 0x00	; 0
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	43 e0       	ldi	r20, 0x03	; 3
 a2a:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
				LCDWriteString("%");
 a2e:	8a ec       	ldi	r24, 0xCA	; 202
 a30:	92 e0       	ldi	r25, 0x02	; 2
 a32:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
				LCDGotoXY(1,2);
 a36:	62 e0       	ldi	r22, 0x02	; 2
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDGotoXY>
				DHT11DisplayHumidity();				//Display Humidity
 a3e:	0e 94 a8 02 	call	0x550	; 0x550 <DHT11DisplayHumidity>
 a42:	57 cf       	rjmp	.-338    	; 0x8f2 <main+0x6a>
			}
			else if (temp == 1) {
 a44:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <temp>
 a48:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <temp+0x1>
 a4c:	01 97       	sbiw	r24, 0x01	; 1
 a4e:	81 f4       	brne	.+32     	; 0xa70 <__stack+0x171>
				LCDHome(); 
 a50:	60 e0       	ldi	r22, 0x00	; 0
 a52:	80 e8       	ldi	r24, 0x80	; 128
 a54:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				if (fahren == 1) {
 a58:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <fahren>
 a5c:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <fahren+0x1>
 a60:	01 97       	sbiw	r24, 0x01	; 1
 a62:	19 f4       	brne	.+6      	; 0xa6a <__stack+0x16b>
					DHT11DisplayTemperatureF();			//Display Temp F
 a64:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DHT11DisplayTemperatureF>
 a68:	44 cf       	rjmp	.-376    	; 0x8f2 <main+0x6a>
				} else {
					DHT11DisplayTemperatureC();			//Display Temp C
 a6a:	0e 94 93 02 	call	0x526	; 0x526 <DHT11DisplayTemperatureC>
 a6e:	41 cf       	rjmp	.-382    	; 0x8f2 <main+0x6a>
				}
			}
			else if (bright == 1) {
 a70:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <bright>
 a74:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <bright+0x1>
 a78:	01 97       	sbiw	r24, 0x01	; 1
 a7a:	61 f5       	brne	.+88     	; 0xad4 <__stack+0x1d5>
				LCDHome();
 a7c:	60 e0       	ldi	r22, 0x00	; 0
 a7e:	80 e8       	ldi	r24, 0x80	; 128
 a80:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				LCDWriteString("B:");				//Display Brightness
 a84:	87 ec       	ldi	r24, 0xC7	; 199
 a86:	92 e0       	ldi	r25, 0x02	; 2
 a88:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
				adc_value =  ((float)read_adc(0)/5050)*100;
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_adc>
 a92:	bc 01       	movw	r22, r24
 a94:	80 e0       	ldi	r24, 0x00	; 0
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
 a9c:	20 e0       	ldi	r18, 0x00	; 0
 a9e:	30 ed       	ldi	r19, 0xD0	; 208
 aa0:	4d e9       	ldi	r20, 0x9D	; 157
 aa2:	55 e4       	ldi	r21, 0x45	; 69
 aa4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__divsf3>
 aa8:	20 e0       	ldi	r18, 0x00	; 0
 aaa:	30 e0       	ldi	r19, 0x00	; 0
 aac:	48 ec       	ldi	r20, 0xC8	; 200
 aae:	52 e4       	ldi	r21, 0x42	; 66
 ab0:	0e 94 49 07 	call	0xe92	; 0xe92 <__mulsf3>
 ab4:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__fixunssfsi>
 ab8:	70 93 d8 02 	sts	0x02D8, r23	; 0x8002d8 <adc_value+0x1>
 abc:	60 93 d7 02 	sts	0x02D7, r22	; 0x8002d7 <adc_value>
				LCDWriteInt(adc_value,3);
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	43 e0       	ldi	r20, 0x03	; 3
 ac6:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
				LCDWriteString("%");
 aca:	8a ec       	ldi	r24, 0xCA	; 202
 acc:	92 e0       	ldi	r25, 0x02	; 2
 ace:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
 ad2:	0f cf       	rjmp	.-482    	; 0x8f2 <main+0x6a>
			}
			else if (humid == 1) {
 ad4:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <humid>
 ad8:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <humid+0x1>
 adc:	01 97       	sbiw	r24, 0x01	; 1
 ade:	09 f0       	breq	.+2      	; 0xae2 <__stack+0x1e3>
 ae0:	08 cf       	rjmp	.-496    	; 0x8f2 <main+0x6a>
				LCDHome();
 ae2:	60 e0       	ldi	r22, 0x00	; 0
 ae4:	80 e8       	ldi	r24, 0x80	; 128
 ae6:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				DHT11DisplayHumidity();				//Display Humidity
 aea:	0e 94 a8 02 	call	0x550	; 0x550 <DHT11DisplayHumidity>
 aee:	01 cf       	rjmp	.-510    	; 0x8f2 <main+0x6a>

00000af0 <__subsf3>:
 af0:	50 58       	subi	r21, 0x80	; 128

00000af2 <__addsf3>:
 af2:	bb 27       	eor	r27, r27
 af4:	aa 27       	eor	r26, r26
 af6:	0e 94 90 05 	call	0xb20	; 0xb20 <__addsf3x>
 afa:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_round>
 afe:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__fp_pscA>
 b02:	38 f0       	brcs	.+14     	; 0xb12 <__addsf3+0x20>
 b04:	0e 94 03 07 	call	0xe06	; 0xe06 <__fp_pscB>
 b08:	20 f0       	brcs	.+8      	; 0xb12 <__addsf3+0x20>
 b0a:	39 f4       	brne	.+14     	; 0xb1a <__addsf3+0x28>
 b0c:	9f 3f       	cpi	r25, 0xFF	; 255
 b0e:	19 f4       	brne	.+6      	; 0xb16 <__addsf3+0x24>
 b10:	26 f4       	brtc	.+8      	; 0xb1a <__addsf3+0x28>
 b12:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__fp_nan>
 b16:	0e f4       	brtc	.+2      	; 0xb1a <__addsf3+0x28>
 b18:	e0 95       	com	r30
 b1a:	e7 fb       	bst	r30, 7
 b1c:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_inf>

00000b20 <__addsf3x>:
 b20:	e9 2f       	mov	r30, r25
 b22:	0e 94 1b 07 	call	0xe36	; 0xe36 <__fp_split3>
 b26:	58 f3       	brcs	.-42     	; 0xafe <__addsf3+0xc>
 b28:	ba 17       	cp	r27, r26
 b2a:	62 07       	cpc	r22, r18
 b2c:	73 07       	cpc	r23, r19
 b2e:	84 07       	cpc	r24, r20
 b30:	95 07       	cpc	r25, r21
 b32:	20 f0       	brcs	.+8      	; 0xb3c <__addsf3x+0x1c>
 b34:	79 f4       	brne	.+30     	; 0xb54 <__addsf3x+0x34>
 b36:	a6 f5       	brtc	.+104    	; 0xba0 <__addsf3x+0x80>
 b38:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_zero>
 b3c:	0e f4       	brtc	.+2      	; 0xb40 <__addsf3x+0x20>
 b3e:	e0 95       	com	r30
 b40:	0b 2e       	mov	r0, r27
 b42:	ba 2f       	mov	r27, r26
 b44:	a0 2d       	mov	r26, r0
 b46:	0b 01       	movw	r0, r22
 b48:	b9 01       	movw	r22, r18
 b4a:	90 01       	movw	r18, r0
 b4c:	0c 01       	movw	r0, r24
 b4e:	ca 01       	movw	r24, r20
 b50:	a0 01       	movw	r20, r0
 b52:	11 24       	eor	r1, r1
 b54:	ff 27       	eor	r31, r31
 b56:	59 1b       	sub	r21, r25
 b58:	99 f0       	breq	.+38     	; 0xb80 <__addsf3x+0x60>
 b5a:	59 3f       	cpi	r21, 0xF9	; 249
 b5c:	50 f4       	brcc	.+20     	; 0xb72 <__addsf3x+0x52>
 b5e:	50 3e       	cpi	r21, 0xE0	; 224
 b60:	68 f1       	brcs	.+90     	; 0xbbc <__addsf3x+0x9c>
 b62:	1a 16       	cp	r1, r26
 b64:	f0 40       	sbci	r31, 0x00	; 0
 b66:	a2 2f       	mov	r26, r18
 b68:	23 2f       	mov	r18, r19
 b6a:	34 2f       	mov	r19, r20
 b6c:	44 27       	eor	r20, r20
 b6e:	58 5f       	subi	r21, 0xF8	; 248
 b70:	f3 cf       	rjmp	.-26     	; 0xb58 <__addsf3x+0x38>
 b72:	46 95       	lsr	r20
 b74:	37 95       	ror	r19
 b76:	27 95       	ror	r18
 b78:	a7 95       	ror	r26
 b7a:	f0 40       	sbci	r31, 0x00	; 0
 b7c:	53 95       	inc	r21
 b7e:	c9 f7       	brne	.-14     	; 0xb72 <__addsf3x+0x52>
 b80:	7e f4       	brtc	.+30     	; 0xba0 <__addsf3x+0x80>
 b82:	1f 16       	cp	r1, r31
 b84:	ba 0b       	sbc	r27, r26
 b86:	62 0b       	sbc	r22, r18
 b88:	73 0b       	sbc	r23, r19
 b8a:	84 0b       	sbc	r24, r20
 b8c:	ba f0       	brmi	.+46     	; 0xbbc <__addsf3x+0x9c>
 b8e:	91 50       	subi	r25, 0x01	; 1
 b90:	a1 f0       	breq	.+40     	; 0xbba <__addsf3x+0x9a>
 b92:	ff 0f       	add	r31, r31
 b94:	bb 1f       	adc	r27, r27
 b96:	66 1f       	adc	r22, r22
 b98:	77 1f       	adc	r23, r23
 b9a:	88 1f       	adc	r24, r24
 b9c:	c2 f7       	brpl	.-16     	; 0xb8e <__addsf3x+0x6e>
 b9e:	0e c0       	rjmp	.+28     	; 0xbbc <__addsf3x+0x9c>
 ba0:	ba 0f       	add	r27, r26
 ba2:	62 1f       	adc	r22, r18
 ba4:	73 1f       	adc	r23, r19
 ba6:	84 1f       	adc	r24, r20
 ba8:	48 f4       	brcc	.+18     	; 0xbbc <__addsf3x+0x9c>
 baa:	87 95       	ror	r24
 bac:	77 95       	ror	r23
 bae:	67 95       	ror	r22
 bb0:	b7 95       	ror	r27
 bb2:	f7 95       	ror	r31
 bb4:	9e 3f       	cpi	r25, 0xFE	; 254
 bb6:	08 f0       	brcs	.+2      	; 0xbba <__addsf3x+0x9a>
 bb8:	b0 cf       	rjmp	.-160    	; 0xb1a <__addsf3+0x28>
 bba:	93 95       	inc	r25
 bbc:	88 0f       	add	r24, r24
 bbe:	08 f0       	brcs	.+2      	; 0xbc2 <__addsf3x+0xa2>
 bc0:	99 27       	eor	r25, r25
 bc2:	ee 0f       	add	r30, r30
 bc4:	97 95       	ror	r25
 bc6:	87 95       	ror	r24
 bc8:	08 95       	ret

00000bca <__cmpsf2>:
 bca:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_cmp>
 bce:	08 f4       	brcc	.+2      	; 0xbd2 <__cmpsf2+0x8>
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	08 95       	ret

00000bd4 <__divsf3>:
 bd4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__divsf3x>
 bd8:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_round>
 bdc:	0e 94 03 07 	call	0xe06	; 0xe06 <__fp_pscB>
 be0:	58 f0       	brcs	.+22     	; 0xbf8 <__divsf3+0x24>
 be2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__fp_pscA>
 be6:	40 f0       	brcs	.+16     	; 0xbf8 <__divsf3+0x24>
 be8:	29 f4       	brne	.+10     	; 0xbf4 <__divsf3+0x20>
 bea:	5f 3f       	cpi	r21, 0xFF	; 255
 bec:	29 f0       	breq	.+10     	; 0xbf8 <__divsf3+0x24>
 bee:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_inf>
 bf2:	51 11       	cpse	r21, r1
 bf4:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__fp_szero>
 bf8:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__fp_nan>

00000bfc <__divsf3x>:
 bfc:	0e 94 1b 07 	call	0xe36	; 0xe36 <__fp_split3>
 c00:	68 f3       	brcs	.-38     	; 0xbdc <__divsf3+0x8>

00000c02 <__divsf3_pse>:
 c02:	99 23       	and	r25, r25
 c04:	b1 f3       	breq	.-20     	; 0xbf2 <__divsf3+0x1e>
 c06:	55 23       	and	r21, r21
 c08:	91 f3       	breq	.-28     	; 0xbee <__divsf3+0x1a>
 c0a:	95 1b       	sub	r25, r21
 c0c:	55 0b       	sbc	r21, r21
 c0e:	bb 27       	eor	r27, r27
 c10:	aa 27       	eor	r26, r26
 c12:	62 17       	cp	r22, r18
 c14:	73 07       	cpc	r23, r19
 c16:	84 07       	cpc	r24, r20
 c18:	38 f0       	brcs	.+14     	; 0xc28 <__divsf3_pse+0x26>
 c1a:	9f 5f       	subi	r25, 0xFF	; 255
 c1c:	5f 4f       	sbci	r21, 0xFF	; 255
 c1e:	22 0f       	add	r18, r18
 c20:	33 1f       	adc	r19, r19
 c22:	44 1f       	adc	r20, r20
 c24:	aa 1f       	adc	r26, r26
 c26:	a9 f3       	breq	.-22     	; 0xc12 <__divsf3_pse+0x10>
 c28:	35 d0       	rcall	.+106    	; 0xc94 <__divsf3_pse+0x92>
 c2a:	0e 2e       	mov	r0, r30
 c2c:	3a f0       	brmi	.+14     	; 0xc3c <__divsf3_pse+0x3a>
 c2e:	e0 e8       	ldi	r30, 0x80	; 128
 c30:	32 d0       	rcall	.+100    	; 0xc96 <__divsf3_pse+0x94>
 c32:	91 50       	subi	r25, 0x01	; 1
 c34:	50 40       	sbci	r21, 0x00	; 0
 c36:	e6 95       	lsr	r30
 c38:	00 1c       	adc	r0, r0
 c3a:	ca f7       	brpl	.-14     	; 0xc2e <__divsf3_pse+0x2c>
 c3c:	2b d0       	rcall	.+86     	; 0xc94 <__divsf3_pse+0x92>
 c3e:	fe 2f       	mov	r31, r30
 c40:	29 d0       	rcall	.+82     	; 0xc94 <__divsf3_pse+0x92>
 c42:	66 0f       	add	r22, r22
 c44:	77 1f       	adc	r23, r23
 c46:	88 1f       	adc	r24, r24
 c48:	bb 1f       	adc	r27, r27
 c4a:	26 17       	cp	r18, r22
 c4c:	37 07       	cpc	r19, r23
 c4e:	48 07       	cpc	r20, r24
 c50:	ab 07       	cpc	r26, r27
 c52:	b0 e8       	ldi	r27, 0x80	; 128
 c54:	09 f0       	breq	.+2      	; 0xc58 <__divsf3_pse+0x56>
 c56:	bb 0b       	sbc	r27, r27
 c58:	80 2d       	mov	r24, r0
 c5a:	bf 01       	movw	r22, r30
 c5c:	ff 27       	eor	r31, r31
 c5e:	93 58       	subi	r25, 0x83	; 131
 c60:	5f 4f       	sbci	r21, 0xFF	; 255
 c62:	3a f0       	brmi	.+14     	; 0xc72 <__divsf3_pse+0x70>
 c64:	9e 3f       	cpi	r25, 0xFE	; 254
 c66:	51 05       	cpc	r21, r1
 c68:	78 f0       	brcs	.+30     	; 0xc88 <__divsf3_pse+0x86>
 c6a:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_inf>
 c6e:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__fp_szero>
 c72:	5f 3f       	cpi	r21, 0xFF	; 255
 c74:	e4 f3       	brlt	.-8      	; 0xc6e <__divsf3_pse+0x6c>
 c76:	98 3e       	cpi	r25, 0xE8	; 232
 c78:	d4 f3       	brlt	.-12     	; 0xc6e <__divsf3_pse+0x6c>
 c7a:	86 95       	lsr	r24
 c7c:	77 95       	ror	r23
 c7e:	67 95       	ror	r22
 c80:	b7 95       	ror	r27
 c82:	f7 95       	ror	r31
 c84:	9f 5f       	subi	r25, 0xFF	; 255
 c86:	c9 f7       	brne	.-14     	; 0xc7a <__divsf3_pse+0x78>
 c88:	88 0f       	add	r24, r24
 c8a:	91 1d       	adc	r25, r1
 c8c:	96 95       	lsr	r25
 c8e:	87 95       	ror	r24
 c90:	97 f9       	bld	r25, 7
 c92:	08 95       	ret
 c94:	e1 e0       	ldi	r30, 0x01	; 1
 c96:	66 0f       	add	r22, r22
 c98:	77 1f       	adc	r23, r23
 c9a:	88 1f       	adc	r24, r24
 c9c:	bb 1f       	adc	r27, r27
 c9e:	62 17       	cp	r22, r18
 ca0:	73 07       	cpc	r23, r19
 ca2:	84 07       	cpc	r24, r20
 ca4:	ba 07       	cpc	r27, r26
 ca6:	20 f0       	brcs	.+8      	; 0xcb0 <__divsf3_pse+0xae>
 ca8:	62 1b       	sub	r22, r18
 caa:	73 0b       	sbc	r23, r19
 cac:	84 0b       	sbc	r24, r20
 cae:	ba 0b       	sbc	r27, r26
 cb0:	ee 1f       	adc	r30, r30
 cb2:	88 f7       	brcc	.-30     	; 0xc96 <__divsf3_pse+0x94>
 cb4:	e0 95       	com	r30
 cb6:	08 95       	ret

00000cb8 <__fixsfsi>:
 cb8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__fixunssfsi>
 cbc:	68 94       	set
 cbe:	b1 11       	cpse	r27, r1
 cc0:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__fp_szero>
 cc4:	08 95       	ret

00000cc6 <__fixunssfsi>:
 cc6:	0e 94 23 07 	call	0xe46	; 0xe46 <__fp_splitA>
 cca:	88 f0       	brcs	.+34     	; 0xcee <__fixunssfsi+0x28>
 ccc:	9f 57       	subi	r25, 0x7F	; 127
 cce:	98 f0       	brcs	.+38     	; 0xcf6 <__fixunssfsi+0x30>
 cd0:	b9 2f       	mov	r27, r25
 cd2:	99 27       	eor	r25, r25
 cd4:	b7 51       	subi	r27, 0x17	; 23
 cd6:	b0 f0       	brcs	.+44     	; 0xd04 <__fixunssfsi+0x3e>
 cd8:	e1 f0       	breq	.+56     	; 0xd12 <__fixunssfsi+0x4c>
 cda:	66 0f       	add	r22, r22
 cdc:	77 1f       	adc	r23, r23
 cde:	88 1f       	adc	r24, r24
 ce0:	99 1f       	adc	r25, r25
 ce2:	1a f0       	brmi	.+6      	; 0xcea <__fixunssfsi+0x24>
 ce4:	ba 95       	dec	r27
 ce6:	c9 f7       	brne	.-14     	; 0xcda <__fixunssfsi+0x14>
 ce8:	14 c0       	rjmp	.+40     	; 0xd12 <__fixunssfsi+0x4c>
 cea:	b1 30       	cpi	r27, 0x01	; 1
 cec:	91 f0       	breq	.+36     	; 0xd12 <__fixunssfsi+0x4c>
 cee:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fp_zero>
 cf2:	b1 e0       	ldi	r27, 0x01	; 1
 cf4:	08 95       	ret
 cf6:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_zero>
 cfa:	67 2f       	mov	r22, r23
 cfc:	78 2f       	mov	r23, r24
 cfe:	88 27       	eor	r24, r24
 d00:	b8 5f       	subi	r27, 0xF8	; 248
 d02:	39 f0       	breq	.+14     	; 0xd12 <__fixunssfsi+0x4c>
 d04:	b9 3f       	cpi	r27, 0xF9	; 249
 d06:	cc f3       	brlt	.-14     	; 0xcfa <__fixunssfsi+0x34>
 d08:	86 95       	lsr	r24
 d0a:	77 95       	ror	r23
 d0c:	67 95       	ror	r22
 d0e:	b3 95       	inc	r27
 d10:	d9 f7       	brne	.-10     	; 0xd08 <__fixunssfsi+0x42>
 d12:	3e f4       	brtc	.+14     	; 0xd22 <__fixunssfsi+0x5c>
 d14:	90 95       	com	r25
 d16:	80 95       	com	r24
 d18:	70 95       	com	r23
 d1a:	61 95       	neg	r22
 d1c:	7f 4f       	sbci	r23, 0xFF	; 255
 d1e:	8f 4f       	sbci	r24, 0xFF	; 255
 d20:	9f 4f       	sbci	r25, 0xFF	; 255
 d22:	08 95       	ret

00000d24 <__floatunsisf>:
 d24:	e8 94       	clt
 d26:	09 c0       	rjmp	.+18     	; 0xd3a <__floatsisf+0x12>

00000d28 <__floatsisf>:
 d28:	97 fb       	bst	r25, 7
 d2a:	3e f4       	brtc	.+14     	; 0xd3a <__floatsisf+0x12>
 d2c:	90 95       	com	r25
 d2e:	80 95       	com	r24
 d30:	70 95       	com	r23
 d32:	61 95       	neg	r22
 d34:	7f 4f       	sbci	r23, 0xFF	; 255
 d36:	8f 4f       	sbci	r24, 0xFF	; 255
 d38:	9f 4f       	sbci	r25, 0xFF	; 255
 d3a:	99 23       	and	r25, r25
 d3c:	a9 f0       	breq	.+42     	; 0xd68 <__floatsisf+0x40>
 d3e:	f9 2f       	mov	r31, r25
 d40:	96 e9       	ldi	r25, 0x96	; 150
 d42:	bb 27       	eor	r27, r27
 d44:	93 95       	inc	r25
 d46:	f6 95       	lsr	r31
 d48:	87 95       	ror	r24
 d4a:	77 95       	ror	r23
 d4c:	67 95       	ror	r22
 d4e:	b7 95       	ror	r27
 d50:	f1 11       	cpse	r31, r1
 d52:	f8 cf       	rjmp	.-16     	; 0xd44 <__floatsisf+0x1c>
 d54:	fa f4       	brpl	.+62     	; 0xd94 <__floatsisf+0x6c>
 d56:	bb 0f       	add	r27, r27
 d58:	11 f4       	brne	.+4      	; 0xd5e <__floatsisf+0x36>
 d5a:	60 ff       	sbrs	r22, 0
 d5c:	1b c0       	rjmp	.+54     	; 0xd94 <__floatsisf+0x6c>
 d5e:	6f 5f       	subi	r22, 0xFF	; 255
 d60:	7f 4f       	sbci	r23, 0xFF	; 255
 d62:	8f 4f       	sbci	r24, 0xFF	; 255
 d64:	9f 4f       	sbci	r25, 0xFF	; 255
 d66:	16 c0       	rjmp	.+44     	; 0xd94 <__floatsisf+0x6c>
 d68:	88 23       	and	r24, r24
 d6a:	11 f0       	breq	.+4      	; 0xd70 <__floatsisf+0x48>
 d6c:	96 e9       	ldi	r25, 0x96	; 150
 d6e:	11 c0       	rjmp	.+34     	; 0xd92 <__floatsisf+0x6a>
 d70:	77 23       	and	r23, r23
 d72:	21 f0       	breq	.+8      	; 0xd7c <__floatsisf+0x54>
 d74:	9e e8       	ldi	r25, 0x8E	; 142
 d76:	87 2f       	mov	r24, r23
 d78:	76 2f       	mov	r23, r22
 d7a:	05 c0       	rjmp	.+10     	; 0xd86 <__floatsisf+0x5e>
 d7c:	66 23       	and	r22, r22
 d7e:	71 f0       	breq	.+28     	; 0xd9c <__floatsisf+0x74>
 d80:	96 e8       	ldi	r25, 0x86	; 134
 d82:	86 2f       	mov	r24, r22
 d84:	70 e0       	ldi	r23, 0x00	; 0
 d86:	60 e0       	ldi	r22, 0x00	; 0
 d88:	2a f0       	brmi	.+10     	; 0xd94 <__floatsisf+0x6c>
 d8a:	9a 95       	dec	r25
 d8c:	66 0f       	add	r22, r22
 d8e:	77 1f       	adc	r23, r23
 d90:	88 1f       	adc	r24, r24
 d92:	da f7       	brpl	.-10     	; 0xd8a <__floatsisf+0x62>
 d94:	88 0f       	add	r24, r24
 d96:	96 95       	lsr	r25
 d98:	87 95       	ror	r24
 d9a:	97 f9       	bld	r25, 7
 d9c:	08 95       	ret

00000d9e <__fp_cmp>:
 d9e:	99 0f       	add	r25, r25
 da0:	00 08       	sbc	r0, r0
 da2:	55 0f       	add	r21, r21
 da4:	aa 0b       	sbc	r26, r26
 da6:	e0 e8       	ldi	r30, 0x80	; 128
 da8:	fe ef       	ldi	r31, 0xFE	; 254
 daa:	16 16       	cp	r1, r22
 dac:	17 06       	cpc	r1, r23
 dae:	e8 07       	cpc	r30, r24
 db0:	f9 07       	cpc	r31, r25
 db2:	c0 f0       	brcs	.+48     	; 0xde4 <__fp_cmp+0x46>
 db4:	12 16       	cp	r1, r18
 db6:	13 06       	cpc	r1, r19
 db8:	e4 07       	cpc	r30, r20
 dba:	f5 07       	cpc	r31, r21
 dbc:	98 f0       	brcs	.+38     	; 0xde4 <__fp_cmp+0x46>
 dbe:	62 1b       	sub	r22, r18
 dc0:	73 0b       	sbc	r23, r19
 dc2:	84 0b       	sbc	r24, r20
 dc4:	95 0b       	sbc	r25, r21
 dc6:	39 f4       	brne	.+14     	; 0xdd6 <__fp_cmp+0x38>
 dc8:	0a 26       	eor	r0, r26
 dca:	61 f0       	breq	.+24     	; 0xde4 <__fp_cmp+0x46>
 dcc:	23 2b       	or	r18, r19
 dce:	24 2b       	or	r18, r20
 dd0:	25 2b       	or	r18, r21
 dd2:	21 f4       	brne	.+8      	; 0xddc <__fp_cmp+0x3e>
 dd4:	08 95       	ret
 dd6:	0a 26       	eor	r0, r26
 dd8:	09 f4       	brne	.+2      	; 0xddc <__fp_cmp+0x3e>
 dda:	a1 40       	sbci	r26, 0x01	; 1
 ddc:	a6 95       	lsr	r26
 dde:	8f ef       	ldi	r24, 0xFF	; 255
 de0:	81 1d       	adc	r24, r1
 de2:	81 1d       	adc	r24, r1
 de4:	08 95       	ret

00000de6 <__fp_inf>:
 de6:	97 f9       	bld	r25, 7
 de8:	9f 67       	ori	r25, 0x7F	; 127
 dea:	80 e8       	ldi	r24, 0x80	; 128
 dec:	70 e0       	ldi	r23, 0x00	; 0
 dee:	60 e0       	ldi	r22, 0x00	; 0
 df0:	08 95       	ret

00000df2 <__fp_nan>:
 df2:	9f ef       	ldi	r25, 0xFF	; 255
 df4:	80 ec       	ldi	r24, 0xC0	; 192
 df6:	08 95       	ret

00000df8 <__fp_pscA>:
 df8:	00 24       	eor	r0, r0
 dfa:	0a 94       	dec	r0
 dfc:	16 16       	cp	r1, r22
 dfe:	17 06       	cpc	r1, r23
 e00:	18 06       	cpc	r1, r24
 e02:	09 06       	cpc	r0, r25
 e04:	08 95       	ret

00000e06 <__fp_pscB>:
 e06:	00 24       	eor	r0, r0
 e08:	0a 94       	dec	r0
 e0a:	12 16       	cp	r1, r18
 e0c:	13 06       	cpc	r1, r19
 e0e:	14 06       	cpc	r1, r20
 e10:	05 06       	cpc	r0, r21
 e12:	08 95       	ret

00000e14 <__fp_round>:
 e14:	09 2e       	mov	r0, r25
 e16:	03 94       	inc	r0
 e18:	00 0c       	add	r0, r0
 e1a:	11 f4       	brne	.+4      	; 0xe20 <__fp_round+0xc>
 e1c:	88 23       	and	r24, r24
 e1e:	52 f0       	brmi	.+20     	; 0xe34 <__fp_round+0x20>
 e20:	bb 0f       	add	r27, r27
 e22:	40 f4       	brcc	.+16     	; 0xe34 <__fp_round+0x20>
 e24:	bf 2b       	or	r27, r31
 e26:	11 f4       	brne	.+4      	; 0xe2c <__fp_round+0x18>
 e28:	60 ff       	sbrs	r22, 0
 e2a:	04 c0       	rjmp	.+8      	; 0xe34 <__fp_round+0x20>
 e2c:	6f 5f       	subi	r22, 0xFF	; 255
 e2e:	7f 4f       	sbci	r23, 0xFF	; 255
 e30:	8f 4f       	sbci	r24, 0xFF	; 255
 e32:	9f 4f       	sbci	r25, 0xFF	; 255
 e34:	08 95       	ret

00000e36 <__fp_split3>:
 e36:	57 fd       	sbrc	r21, 7
 e38:	90 58       	subi	r25, 0x80	; 128
 e3a:	44 0f       	add	r20, r20
 e3c:	55 1f       	adc	r21, r21
 e3e:	59 f0       	breq	.+22     	; 0xe56 <__fp_splitA+0x10>
 e40:	5f 3f       	cpi	r21, 0xFF	; 255
 e42:	71 f0       	breq	.+28     	; 0xe60 <__fp_splitA+0x1a>
 e44:	47 95       	ror	r20

00000e46 <__fp_splitA>:
 e46:	88 0f       	add	r24, r24
 e48:	97 fb       	bst	r25, 7
 e4a:	99 1f       	adc	r25, r25
 e4c:	61 f0       	breq	.+24     	; 0xe66 <__fp_splitA+0x20>
 e4e:	9f 3f       	cpi	r25, 0xFF	; 255
 e50:	79 f0       	breq	.+30     	; 0xe70 <__fp_splitA+0x2a>
 e52:	87 95       	ror	r24
 e54:	08 95       	ret
 e56:	12 16       	cp	r1, r18
 e58:	13 06       	cpc	r1, r19
 e5a:	14 06       	cpc	r1, r20
 e5c:	55 1f       	adc	r21, r21
 e5e:	f2 cf       	rjmp	.-28     	; 0xe44 <__fp_split3+0xe>
 e60:	46 95       	lsr	r20
 e62:	f1 df       	rcall	.-30     	; 0xe46 <__fp_splitA>
 e64:	08 c0       	rjmp	.+16     	; 0xe76 <__fp_splitA+0x30>
 e66:	16 16       	cp	r1, r22
 e68:	17 06       	cpc	r1, r23
 e6a:	18 06       	cpc	r1, r24
 e6c:	99 1f       	adc	r25, r25
 e6e:	f1 cf       	rjmp	.-30     	; 0xe52 <__fp_splitA+0xc>
 e70:	86 95       	lsr	r24
 e72:	71 05       	cpc	r23, r1
 e74:	61 05       	cpc	r22, r1
 e76:	08 94       	sec
 e78:	08 95       	ret

00000e7a <__fp_zero>:
 e7a:	e8 94       	clt

00000e7c <__fp_szero>:
 e7c:	bb 27       	eor	r27, r27
 e7e:	66 27       	eor	r22, r22
 e80:	77 27       	eor	r23, r23
 e82:	cb 01       	movw	r24, r22
 e84:	97 f9       	bld	r25, 7
 e86:	08 95       	ret

00000e88 <__gesf2>:
 e88:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_cmp>
 e8c:	08 f4       	brcc	.+2      	; 0xe90 <__gesf2+0x8>
 e8e:	8f ef       	ldi	r24, 0xFF	; 255
 e90:	08 95       	ret

00000e92 <__mulsf3>:
 e92:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__mulsf3x>
 e96:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_round>
 e9a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__fp_pscA>
 e9e:	38 f0       	brcs	.+14     	; 0xeae <__mulsf3+0x1c>
 ea0:	0e 94 03 07 	call	0xe06	; 0xe06 <__fp_pscB>
 ea4:	20 f0       	brcs	.+8      	; 0xeae <__mulsf3+0x1c>
 ea6:	95 23       	and	r25, r21
 ea8:	11 f0       	breq	.+4      	; 0xeae <__mulsf3+0x1c>
 eaa:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_inf>
 eae:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__fp_nan>
 eb2:	11 24       	eor	r1, r1
 eb4:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__fp_szero>

00000eb8 <__mulsf3x>:
 eb8:	0e 94 1b 07 	call	0xe36	; 0xe36 <__fp_split3>
 ebc:	70 f3       	brcs	.-36     	; 0xe9a <__mulsf3+0x8>

00000ebe <__mulsf3_pse>:
 ebe:	95 9f       	mul	r25, r21
 ec0:	c1 f3       	breq	.-16     	; 0xeb2 <__mulsf3+0x20>
 ec2:	95 0f       	add	r25, r21
 ec4:	50 e0       	ldi	r21, 0x00	; 0
 ec6:	55 1f       	adc	r21, r21
 ec8:	62 9f       	mul	r22, r18
 eca:	f0 01       	movw	r30, r0
 ecc:	72 9f       	mul	r23, r18
 ece:	bb 27       	eor	r27, r27
 ed0:	f0 0d       	add	r31, r0
 ed2:	b1 1d       	adc	r27, r1
 ed4:	63 9f       	mul	r22, r19
 ed6:	aa 27       	eor	r26, r26
 ed8:	f0 0d       	add	r31, r0
 eda:	b1 1d       	adc	r27, r1
 edc:	aa 1f       	adc	r26, r26
 ede:	64 9f       	mul	r22, r20
 ee0:	66 27       	eor	r22, r22
 ee2:	b0 0d       	add	r27, r0
 ee4:	a1 1d       	adc	r26, r1
 ee6:	66 1f       	adc	r22, r22
 ee8:	82 9f       	mul	r24, r18
 eea:	22 27       	eor	r18, r18
 eec:	b0 0d       	add	r27, r0
 eee:	a1 1d       	adc	r26, r1
 ef0:	62 1f       	adc	r22, r18
 ef2:	73 9f       	mul	r23, r19
 ef4:	b0 0d       	add	r27, r0
 ef6:	a1 1d       	adc	r26, r1
 ef8:	62 1f       	adc	r22, r18
 efa:	83 9f       	mul	r24, r19
 efc:	a0 0d       	add	r26, r0
 efe:	61 1d       	adc	r22, r1
 f00:	22 1f       	adc	r18, r18
 f02:	74 9f       	mul	r23, r20
 f04:	33 27       	eor	r19, r19
 f06:	a0 0d       	add	r26, r0
 f08:	61 1d       	adc	r22, r1
 f0a:	23 1f       	adc	r18, r19
 f0c:	84 9f       	mul	r24, r20
 f0e:	60 0d       	add	r22, r0
 f10:	21 1d       	adc	r18, r1
 f12:	82 2f       	mov	r24, r18
 f14:	76 2f       	mov	r23, r22
 f16:	6a 2f       	mov	r22, r26
 f18:	11 24       	eor	r1, r1
 f1a:	9f 57       	subi	r25, 0x7F	; 127
 f1c:	50 40       	sbci	r21, 0x00	; 0
 f1e:	9a f0       	brmi	.+38     	; 0xf46 <__mulsf3_pse+0x88>
 f20:	f1 f0       	breq	.+60     	; 0xf5e <__mulsf3_pse+0xa0>
 f22:	88 23       	and	r24, r24
 f24:	4a f0       	brmi	.+18     	; 0xf38 <__mulsf3_pse+0x7a>
 f26:	ee 0f       	add	r30, r30
 f28:	ff 1f       	adc	r31, r31
 f2a:	bb 1f       	adc	r27, r27
 f2c:	66 1f       	adc	r22, r22
 f2e:	77 1f       	adc	r23, r23
 f30:	88 1f       	adc	r24, r24
 f32:	91 50       	subi	r25, 0x01	; 1
 f34:	50 40       	sbci	r21, 0x00	; 0
 f36:	a9 f7       	brne	.-22     	; 0xf22 <__mulsf3_pse+0x64>
 f38:	9e 3f       	cpi	r25, 0xFE	; 254
 f3a:	51 05       	cpc	r21, r1
 f3c:	80 f0       	brcs	.+32     	; 0xf5e <__mulsf3_pse+0xa0>
 f3e:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_inf>
 f42:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__fp_szero>
 f46:	5f 3f       	cpi	r21, 0xFF	; 255
 f48:	e4 f3       	brlt	.-8      	; 0xf42 <__mulsf3_pse+0x84>
 f4a:	98 3e       	cpi	r25, 0xE8	; 232
 f4c:	d4 f3       	brlt	.-12     	; 0xf42 <__mulsf3_pse+0x84>
 f4e:	86 95       	lsr	r24
 f50:	77 95       	ror	r23
 f52:	67 95       	ror	r22
 f54:	b7 95       	ror	r27
 f56:	f7 95       	ror	r31
 f58:	e7 95       	ror	r30
 f5a:	9f 5f       	subi	r25, 0xFF	; 255
 f5c:	c1 f7       	brne	.-16     	; 0xf4e <__mulsf3_pse+0x90>
 f5e:	fe 2b       	or	r31, r30
 f60:	88 0f       	add	r24, r24
 f62:	91 1d       	adc	r25, r1
 f64:	96 95       	lsr	r25
 f66:	87 95       	ror	r24
 f68:	97 f9       	bld	r25, 7
 f6a:	08 95       	ret

00000f6c <__divmodsi4>:
 f6c:	05 2e       	mov	r0, r21
 f6e:	97 fb       	bst	r25, 7
 f70:	1e f4       	brtc	.+6      	; 0xf78 <__divmodsi4+0xc>
 f72:	00 94       	com	r0
 f74:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__negsi2>
 f78:	57 fd       	sbrc	r21, 7
 f7a:	07 d0       	rcall	.+14     	; 0xf8a <__divmodsi4_neg2>
 f7c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__udivmodsi4>
 f80:	07 fc       	sbrc	r0, 7
 f82:	03 d0       	rcall	.+6      	; 0xf8a <__divmodsi4_neg2>
 f84:	4e f4       	brtc	.+18     	; 0xf98 <__divmodsi4_exit>
 f86:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__negsi2>

00000f8a <__divmodsi4_neg2>:
 f8a:	50 95       	com	r21
 f8c:	40 95       	com	r20
 f8e:	30 95       	com	r19
 f90:	21 95       	neg	r18
 f92:	3f 4f       	sbci	r19, 0xFF	; 255
 f94:	4f 4f       	sbci	r20, 0xFF	; 255
 f96:	5f 4f       	sbci	r21, 0xFF	; 255

00000f98 <__divmodsi4_exit>:
 f98:	08 95       	ret

00000f9a <__negsi2>:
 f9a:	90 95       	com	r25
 f9c:	80 95       	com	r24
 f9e:	70 95       	com	r23
 fa0:	61 95       	neg	r22
 fa2:	7f 4f       	sbci	r23, 0xFF	; 255
 fa4:	8f 4f       	sbci	r24, 0xFF	; 255
 fa6:	9f 4f       	sbci	r25, 0xFF	; 255
 fa8:	08 95       	ret

00000faa <__udivmodsi4>:
 faa:	a1 e2       	ldi	r26, 0x21	; 33
 fac:	1a 2e       	mov	r1, r26
 fae:	aa 1b       	sub	r26, r26
 fb0:	bb 1b       	sub	r27, r27
 fb2:	fd 01       	movw	r30, r26
 fb4:	0d c0       	rjmp	.+26     	; 0xfd0 <__udivmodsi4_ep>

00000fb6 <__udivmodsi4_loop>:
 fb6:	aa 1f       	adc	r26, r26
 fb8:	bb 1f       	adc	r27, r27
 fba:	ee 1f       	adc	r30, r30
 fbc:	ff 1f       	adc	r31, r31
 fbe:	a2 17       	cp	r26, r18
 fc0:	b3 07       	cpc	r27, r19
 fc2:	e4 07       	cpc	r30, r20
 fc4:	f5 07       	cpc	r31, r21
 fc6:	20 f0       	brcs	.+8      	; 0xfd0 <__udivmodsi4_ep>
 fc8:	a2 1b       	sub	r26, r18
 fca:	b3 0b       	sbc	r27, r19
 fcc:	e4 0b       	sbc	r30, r20
 fce:	f5 0b       	sbc	r31, r21

00000fd0 <__udivmodsi4_ep>:
 fd0:	66 1f       	adc	r22, r22
 fd2:	77 1f       	adc	r23, r23
 fd4:	88 1f       	adc	r24, r24
 fd6:	99 1f       	adc	r25, r25
 fd8:	1a 94       	dec	r1
 fda:	69 f7       	brne	.-38     	; 0xfb6 <__udivmodsi4_loop>
 fdc:	60 95       	com	r22
 fde:	70 95       	com	r23
 fe0:	80 95       	com	r24
 fe2:	90 95       	com	r25
 fe4:	9b 01       	movw	r18, r22
 fe6:	ac 01       	movw	r20, r24
 fe8:	bd 01       	movw	r22, r26
 fea:	cf 01       	movw	r24, r30
 fec:	08 95       	ret

00000fee <_exit>:
 fee:	f8 94       	cli

00000ff0 <__stop_program>:
 ff0:	ff cf       	rjmp	.-2      	; 0xff0 <__stop_program>

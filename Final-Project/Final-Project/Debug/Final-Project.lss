
Final-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000266  00800100  0000113c  000011d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000113c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800366  00800366  00001436  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000014a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000213f  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000920  00000000  00000000  0000373f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001096  00000000  00000000  0000405f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000050f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f4  00000000  00000000  000053d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000142e  00000000  00000000  00005ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00006ef6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e3       	ldi	r30, 0x3C	; 60
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 36       	cpi	r26, 0x66	; 102
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a6 e6       	ldi	r26, 0x66	; 102
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 38       	cpi	r26, 0x82	; 130
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9b 03 	call	0x736	; 0x736 <main>
      9e:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCDBusyLoop>:
	// Humidity average
	DHT11Data[0] = bufferRH / DHT_NR_OF_SAMPLES;
	
	// Temperature average
	DHT11Data[2] = (bufferTemp / DHT_NR_OF_SAMPLES) + DHT_TEMP_ERROR_OFFSET;
}
      a6:	87 b1       	in	r24, 0x07	; 7
      a8:	83 7c       	andi	r24, 0xC3	; 195
      aa:	87 b9       	out	0x07, r24	; 7
      ac:	8b b1       	in	r24, 0x0b	; 11
      ae:	88 60       	ori	r24, 0x08	; 8
      b0:	8b b9       	out	0x0b, r24	; 11
      b2:	8b b1       	in	r24, 0x0b	; 11
      b4:	8b 7f       	andi	r24, 0xFB	; 251
      b6:	8b b9       	out	0x0b, r24	; 11
      b8:	8b b1       	in	r24, 0x0b	; 11
      ba:	80 61       	ori	r24, 0x10	; 16
      bc:	8b b9       	out	0x0b, r24	; 11
      be:	85 e0       	ldi	r24, 0x05	; 5
      c0:	98 2f       	mov	r25, r24
      c2:	9a 95       	dec	r25
      c4:	f1 f7       	brne	.-4      	; 0xc2 <LCDBusyLoop+0x1c>
      c6:	96 b1       	in	r25, 0x06	; 6
      c8:	96 95       	lsr	r25
      ca:	96 95       	lsr	r25
      cc:	92 95       	swap	r25
      ce:	90 7f       	andi	r25, 0xF0	; 240
      d0:	2b b1       	in	r18, 0x0b	; 11
      d2:	2f 7e       	andi	r18, 0xEF	; 239
      d4:	2b b9       	out	0x0b, r18	; 11
      d6:	28 2f       	mov	r18, r24
      d8:	2a 95       	dec	r18
      da:	f1 f7       	brne	.-4      	; 0xd8 <LCDBusyLoop+0x32>
      dc:	2b b1       	in	r18, 0x0b	; 11
      de:	20 61       	ori	r18, 0x10	; 16
      e0:	2b b9       	out	0x0b, r18	; 11
      e2:	28 2f       	mov	r18, r24
      e4:	2a 95       	dec	r18
      e6:	f1 f7       	brne	.-4      	; 0xe4 <LCDBusyLoop+0x3e>
      e8:	2b b1       	in	r18, 0x0b	; 11
      ea:	2f 7e       	andi	r18, 0xEF	; 239
      ec:	2b b9       	out	0x0b, r18	; 11
      ee:	8a 95       	dec	r24
      f0:	f1 f7       	brne	.-4      	; 0xee <LCDBusyLoop+0x48>
      f2:	99 23       	and	r25, r25
      f4:	0c f3       	brlt	.-62     	; 0xb8 <LCDBusyLoop+0x12>
      f6:	8b b1       	in	r24, 0x0b	; 11
      f8:	87 7f       	andi	r24, 0xF7	; 247
      fa:	8b b9       	out	0x0b, r24	; 11
      fc:	8b b1       	in	r24, 0x0b	; 11
      fe:	84 60       	ori	r24, 0x04	; 4
     100:	8b b9       	out	0x0b, r24	; 11
     102:	87 b1       	in	r24, 0x07	; 7
     104:	8c 63       	ori	r24, 0x3C	; 60
     106:	87 b9       	out	0x07, r24	; 7
     108:	08 95       	ret

0000010a <FlashEnable>:
     10a:	8b b1       	in	r24, 0x0b	; 11
     10c:	80 61       	ori	r24, 0x10	; 16
     10e:	8b b9       	out	0x0b, r24	; 11
     110:	88 ec       	ldi	r24, 0xC8	; 200
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	01 97       	sbiw	r24, 0x01	; 1
     116:	f1 f7       	brne	.-4      	; 0x114 <FlashEnable+0xa>
     118:	8b b1       	in	r24, 0x0b	; 11
     11a:	8f 7e       	andi	r24, 0xEF	; 239
     11c:	8b b9       	out	0x0b, r24	; 11
     11e:	08 95       	ret

00000120 <LCDByte>:
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	c8 2f       	mov	r28, r24
     126:	d6 2f       	mov	r29, r22
     128:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
     12c:	d1 11       	cpse	r29, r1
     12e:	0d c0       	rjmp	.+26     	; 0x14a <LCDByte+0x2a>
     130:	8b b1       	in	r24, 0x0b	; 11
     132:	8b 7f       	andi	r24, 0xFB	; 251
     134:	8b b9       	out	0x0b, r24	; 11
     136:	c0 38       	cpi	r28, 0x80	; 128
     138:	11 f0       	breq	.+4      	; 0x13e <LCDByte+0x1e>
     13a:	c1 30       	cpi	r28, 0x01	; 1
     13c:	71 f4       	brne	.+28     	; 0x15a <LCDByte+0x3a>
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cursorPosition>
     144:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cursorLine>
     148:	08 c0       	rjmp	.+16     	; 0x15a <LCDByte+0x3a>
     14a:	8b b1       	in	r24, 0x0b	; 11
     14c:	84 60       	ori	r24, 0x04	; 4
     14e:	8b b9       	out	0x0b, r24	; 11
     150:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cursorPosition>
     154:	8f 5f       	subi	r24, 0xFF	; 255
     156:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cursorPosition>
     15a:	8b b1       	in	r24, 0x0b	; 11
     15c:	87 7f       	andi	r24, 0xF7	; 247
     15e:	8b b9       	out	0x0b, r24	; 11
     160:	9c 2f       	mov	r25, r28
     162:	90 7f       	andi	r25, 0xF0	; 240
     164:	28 b1       	in	r18, 0x08	; 8
     166:	89 2f       	mov	r24, r25
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	95 95       	asr	r25
     16c:	87 95       	ror	r24
     16e:	95 95       	asr	r25
     170:	87 95       	ror	r24
     172:	82 2b       	or	r24, r18
     174:	88 b9       	out	0x08, r24	; 8
     176:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     17a:	88 b1       	in	r24, 0x08	; 8
     17c:	83 7c       	andi	r24, 0xC3	; 195
     17e:	88 b9       	out	0x08, r24	; 8
     180:	20 e1       	ldi	r18, 0x10	; 16
     182:	c2 9f       	mul	r28, r18
     184:	c0 01       	movw	r24, r0
     186:	11 24       	eor	r1, r1
     188:	28 b1       	in	r18, 0x08	; 8
     18a:	99 27       	eor	r25, r25
     18c:	95 95       	asr	r25
     18e:	87 95       	ror	r24
     190:	95 95       	asr	r25
     192:	87 95       	ror	r24
     194:	82 2b       	or	r24, r18
     196:	88 b9       	out	0x08, r24	; 8
     198:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     19c:	88 b1       	in	r24, 0x08	; 8
     19e:	83 7c       	andi	r24, 0xC3	; 195
     1a0:	88 b9       	out	0x08, r24	; 8
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <LCDGotoXY>:
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	c8 2f       	mov	r28, r24
     1ae:	d6 2f       	mov	r29, r22
     1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	8c 0f       	add	r24, r28
     1b8:	8e 3f       	cpi	r24, 0xFE	; 254
     1ba:	08 f0       	brcs	.+2      	; 0x1be <LCDGotoXY+0x16>
     1bc:	c1 e0       	ldi	r28, 0x01	; 1
     1be:	c0 93 05 01 	sts	0x0105, r28	; 0x800105 <cursorPosition>
     1c2:	d0 93 04 01 	sts	0x0104, r29	; 0x800104 <cursorLine>
     1c6:	d2 30       	cpi	r29, 0x02	; 2
     1c8:	41 f0       	breq	.+16     	; 0x1da <LCDGotoXY+0x32>
     1ca:	28 f0       	brcs	.+10     	; 0x1d6 <LCDGotoXY+0x2e>
     1cc:	d4 30       	cpi	r29, 0x04	; 4
     1ce:	49 f0       	breq	.+18     	; 0x1e2 <LCDGotoXY+0x3a>
     1d0:	30 f0       	brcs	.+12     	; 0x1de <LCDGotoXY+0x36>
     1d2:	df 3f       	cpi	r29, 0xFF	; 255
     1d4:	39 f4       	brne	.+14     	; 0x1e4 <LCDGotoXY+0x3c>
     1d6:	c1 50       	subi	r28, 0x01	; 1
     1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <LCDGotoXY+0x3c>
     1da:	c1 5c       	subi	r28, 0xC1	; 193
     1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <LCDGotoXY+0x3c>
     1de:	c1 5f       	subi	r28, 0xF1	; 241
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <LCDGotoXY+0x3c>
     1e2:	c1 5b       	subi	r28, 0xB1	; 177
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	8c 2f       	mov	r24, r28
     1e8:	80 68       	ori	r24, 0x80	; 128
     1ea:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <LCDWriteString>:
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	ec 01       	movw	r28, r24
     1fe:	01 e0       	ldi	r16, 0x01	; 1
     200:	11 e0       	ldi	r17, 0x01	; 1
     202:	19 c0       	rjmp	.+50     	; 0x236 <LCDWriteString+0x42>
     204:	11 31       	cpi	r17, 0x11	; 17
     206:	90 f0       	brcs	.+36     	; 0x22c <LCDWriteString+0x38>
     208:	01 30       	cpi	r16, 0x01	; 1
     20a:	29 f4       	brne	.+10     	; 0x216 <LCDWriteString+0x22>
     20c:	62 e0       	ldi	r22, 0x02	; 2
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDGotoXY>
     214:	02 e0       	ldi	r16, 0x02	; 2
     216:	02 30       	cpi	r16, 0x02	; 2
     218:	30 f0       	brcs	.+12     	; 0x226 <LCDWriteString+0x32>
     21a:	88 81       	ld	r24, Y
     21c:	80 32       	cpi	r24, 0x20	; 32
     21e:	29 f4       	brne	.+10     	; 0x22a <LCDWriteString+0x36>
     220:	21 96       	adiw	r28, 0x01	; 1
     222:	11 e0       	ldi	r17, 0x01	; 1
     224:	03 c0       	rjmp	.+6      	; 0x22c <LCDWriteString+0x38>
     226:	11 e0       	ldi	r17, 0x01	; 1
     228:	01 c0       	rjmp	.+2      	; 0x22c <LCDWriteString+0x38>
     22a:	11 e0       	ldi	r17, 0x01	; 1
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	89 91       	ld	r24, Y+
     230:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     234:	1f 5f       	subi	r17, 0xFF	; 255
     236:	88 81       	ld	r24, Y
     238:	81 11       	cpse	r24, r1
     23a:	e4 cf       	rjmp	.-56     	; 0x204 <LCDWriteString+0x10>
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	08 95       	ret

00000246 <LCDWriteInt>:
     246:	8f 92       	push	r8
     248:	9f 92       	push	r9
     24a:	af 92       	push	r10
     24c:	bf 92       	push	r11
     24e:	df 92       	push	r13
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
     260:	2a 97       	sbiw	r28, 0x0a	; 10
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	4b 01       	movw	r8, r22
     26e:	5c 01       	movw	r10, r24
     270:	14 2f       	mov	r17, r20
     272:	fe 01       	movw	r30, r28
     274:	31 96       	adiw	r30, 0x01	; 1
     276:	8a e0       	ldi	r24, 0x0A	; 10
     278:	df 01       	movw	r26, r30
     27a:	1d 92       	st	X+, r1
     27c:	8a 95       	dec	r24
     27e:	e9 f7       	brne	.-6      	; 0x27a <LCDWriteInt+0x34>
     280:	81 14       	cp	r8, r1
     282:	91 04       	cpc	r9, r1
     284:	a1 04       	cpc	r10, r1
     286:	b1 04       	cpc	r11, r1
     288:	11 f0       	breq	.+4      	; 0x28e <LCDWriteInt+0x48>
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	01 c0       	rjmp	.+2      	; 0x290 <LCDWriteInt+0x4a>
     28e:	01 e0       	ldi	r16, 0x01	; 1
     290:	a5 01       	movw	r20, r10
     292:	94 01       	movw	r18, r8
     294:	09 c0       	rjmp	.+18     	; 0x2a8 <LCDWriteInt+0x62>
     296:	0f 5f       	subi	r16, 0xFF	; 255
     298:	ca 01       	movw	r24, r20
     29a:	b9 01       	movw	r22, r18
     29c:	2a e0       	ldi	r18, 0x0A	; 10
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divmodsi4>
     2a8:	21 15       	cp	r18, r1
     2aa:	31 05       	cpc	r19, r1
     2ac:	41 05       	cpc	r20, r1
     2ae:	51 05       	cpc	r21, r1
     2b0:	91 f7       	brne	.-28     	; 0x296 <LCDWriteInt+0x50>
     2b2:	10 1b       	sub	r17, r16
     2b4:	0a f4       	brpl	.+2      	; 0x2b8 <LCDWriteInt+0x72>
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	bb 20       	and	r11, r11
     2ba:	64 f4       	brge	.+24     	; 0x2d4 <LCDWriteInt+0x8e>
     2bc:	b0 94       	com	r11
     2be:	a0 94       	com	r10
     2c0:	90 94       	com	r9
     2c2:	80 94       	com	r8
     2c4:	81 1c       	adc	r8, r1
     2c6:	91 1c       	adc	r9, r1
     2c8:	a1 1c       	adc	r10, r1
     2ca:	b1 1c       	adc	r11, r1
     2cc:	0f 5f       	subi	r16, 0xFF	; 255
     2ce:	dd 24       	eor	r13, r13
     2d0:	d3 94       	inc	r13
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <LCDWriteInt+0x90>
     2d4:	d1 2c       	mov	r13, r1
     2d6:	10 0f       	add	r17, r16
     2d8:	22 c0       	rjmp	.+68     	; 0x31e <LCDWriteInt+0xd8>
     2da:	1a 30       	cpi	r17, 0x0A	; 10
     2dc:	a8 f4       	brcc	.+42     	; 0x308 <LCDWriteInt+0xc2>
     2de:	e1 2e       	mov	r14, r17
     2e0:	f1 2c       	mov	r15, r1
     2e2:	b1 e0       	ldi	r27, 0x01	; 1
     2e4:	eb 1a       	sub	r14, r27
     2e6:	f1 08       	sbc	r15, r1
     2e8:	c5 01       	movw	r24, r10
     2ea:	b4 01       	movw	r22, r8
     2ec:	2a e0       	ldi	r18, 0x0A	; 10
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divmodsi4>
     2f8:	e1 e0       	ldi	r30, 0x01	; 1
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	ec 0f       	add	r30, r28
     2fe:	fd 1f       	adc	r31, r29
     300:	ee 0d       	add	r30, r14
     302:	ff 1d       	adc	r31, r15
     304:	60 5d       	subi	r22, 0xD0	; 208
     306:	60 83       	st	Z, r22
     308:	c5 01       	movw	r24, r10
     30a:	b4 01       	movw	r22, r8
     30c:	2a e0       	ldi	r18, 0x0A	; 10
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divmodsi4>
     318:	49 01       	movw	r8, r18
     31a:	5a 01       	movw	r10, r20
     31c:	11 50       	subi	r17, 0x01	; 1
     31e:	11 11       	cpse	r17, r1
     320:	dc cf       	rjmp	.-72     	; 0x2da <LCDWriteInt+0x94>
     322:	dd 20       	and	r13, r13
     324:	11 f0       	breq	.+4      	; 0x32a <LCDWriteInt+0xe4>
     326:	8d e2       	ldi	r24, 0x2D	; 45
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	ce 01       	movw	r24, r28
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     332:	2a 96       	adiw	r28, 0x0a	; 10
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	df 90       	pop	r13
     34c:	bf 90       	pop	r11
     34e:	af 90       	pop	r10
     350:	9f 90       	pop	r9
     352:	8f 90       	pop	r8
     354:	08 95       	ret

00000356 <LCDSetup>:
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	f8 2e       	mov	r15, r24
     362:	88 ee       	ldi	r24, 0xE8	; 232
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	05 c0       	rjmp	.+10     	; 0x372 <LCDSetup+0x1c>
     368:	e0 e9       	ldi	r30, 0x90	; 144
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <LCDSetup+0x16>
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	c9 f7       	brne	.-14     	; 0x368 <LCDSetup+0x12>
     376:	87 b1       	in	r24, 0x07	; 7
     378:	8c 63       	ori	r24, 0x3C	; 60
     37a:	87 b9       	out	0x07, r24	; 7
     37c:	88 b1       	in	r24, 0x08	; 8
     37e:	83 7c       	andi	r24, 0xC3	; 195
     380:	88 b9       	out	0x08, r24	; 8
     382:	8a b1       	in	r24, 0x0a	; 10
     384:	84 60       	ori	r24, 0x04	; 4
     386:	8a b9       	out	0x0a, r24	; 10
     388:	8a b1       	in	r24, 0x0a	; 10
     38a:	88 60       	ori	r24, 0x08	; 8
     38c:	8a b9       	out	0x0a, r24	; 10
     38e:	8a b1       	in	r24, 0x0a	; 10
     390:	8c 61       	ori	r24, 0x1C	; 28
     392:	8a b9       	out	0x0a, r24	; 10
     394:	8b b1       	in	r24, 0x0b	; 11
     396:	8f 7e       	andi	r24, 0xEF	; 239
     398:	8b b9       	out	0x0b, r24	; 11
     39a:	8b b1       	in	r24, 0x0b	; 11
     39c:	87 7f       	andi	r24, 0xF7	; 247
     39e:	8b b9       	out	0x0b, r24	; 11
     3a0:	8b b1       	in	r24, 0x0b	; 11
     3a2:	8b 7f       	andi	r24, 0xFB	; 251
     3a4:	8b b9       	out	0x0b, r24	; 11
     3a6:	88 b1       	in	r24, 0x08	; 8
     3a8:	8c 60       	ori	r24, 0x0C	; 12
     3aa:	88 b9       	out	0x08, r24	; 8
     3ac:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     3b0:	88 b1       	in	r24, 0x08	; 8
     3b2:	83 7c       	andi	r24, 0xC3	; 195
     3b4:	88 b9       	out	0x08, r24	; 8
     3b6:	00 e4       	ldi	r16, 0x40	; 64
     3b8:	1c e9       	ldi	r17, 0x9C	; 156
     3ba:	c8 01       	movw	r24, r16
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <LCDSetup+0x66>
     3c0:	88 b1       	in	r24, 0x08	; 8
     3c2:	8c 60       	ori	r24, 0x0C	; 12
     3c4:	88 b9       	out	0x08, r24	; 8
     3c6:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     3ca:	88 b1       	in	r24, 0x08	; 8
     3cc:	83 7c       	andi	r24, 0xC3	; 195
     3ce:	88 b9       	out	0x08, r24	; 8
     3d0:	c0 ea       	ldi	r28, 0xA0	; 160
     3d2:	df e0       	ldi	r29, 0x0F	; 15
     3d4:	ce 01       	movw	r24, r28
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <LCDSetup+0x80>
     3da:	88 b1       	in	r24, 0x08	; 8
     3dc:	8c 60       	ori	r24, 0x0C	; 12
     3de:	88 b9       	out	0x08, r24	; 8
     3e0:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     3e4:	88 b1       	in	r24, 0x08	; 8
     3e6:	83 7c       	andi	r24, 0xC3	; 195
     3e8:	88 b9       	out	0x08, r24	; 8
     3ea:	ce 01       	movw	r24, r28
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCDSetup+0x96>
     3f0:	88 b1       	in	r24, 0x08	; 8
     3f2:	88 60       	ori	r24, 0x08	; 8
     3f4:	88 b9       	out	0x08, r24	; 8
     3f6:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     3fa:	88 b1       	in	r24, 0x08	; 8
     3fc:	83 7c       	andi	r24, 0xC3	; 195
     3fe:	88 b9       	out	0x08, r24	; 8
     400:	ce 01       	movw	r24, r28
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     406:	88 b1       	in	r24, 0x08	; 8
     408:	88 60       	ori	r24, 0x08	; 8
     40a:	88 b9       	out	0x08, r24	; 8
     40c:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     410:	88 b1       	in	r24, 0x08	; 8
     412:	83 7c       	andi	r24, 0xC3	; 195
     414:	88 b9       	out	0x08, r24	; 8
     416:	ce 01       	movw	r24, r28
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     41c:	88 b1       	in	r24, 0x08	; 8
     41e:	80 62       	ori	r24, 0x20	; 32
     420:	88 b9       	out	0x08, r24	; 8
     422:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     426:	88 b1       	in	r24, 0x08	; 8
     428:	83 7c       	andi	r24, 0xC3	; 195
     42a:	88 b9       	out	0x08, r24	; 8
     42c:	ce 01       	movw	r24, r28
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     432:	88 b1       	in	r24, 0x08	; 8
     434:	84 60       	ori	r24, 0x04	; 4
     436:	88 b9       	out	0x08, r24	; 8
     438:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     43c:	88 b1       	in	r24, 0x08	; 8
     43e:	83 7c       	andi	r24, 0xC3	; 195
     440:	88 b9       	out	0x08, r24	; 8
     442:	80 e2       	ldi	r24, 0x20	; 32
     444:	9e e4       	ldi	r25, 0x4E	; 78
     446:	01 97       	sbiw	r24, 0x01	; 1
     448:	f1 f7       	brne	.-4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     44a:	88 b1       	in	r24, 0x08	; 8
     44c:	88 61       	ori	r24, 0x18	; 24
     44e:	88 b9       	out	0x08, r24	; 8
     450:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     454:	88 b1       	in	r24, 0x08	; 8
     456:	83 7c       	andi	r24, 0xC3	; 195
     458:	88 b9       	out	0x08, r24	; 8
     45a:	ce 01       	movw	r24, r28
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     460:	88 b1       	in	r24, 0x08	; 8
     462:	80 63       	ori	r24, 0x30	; 48
     464:	88 b9       	out	0x08, r24	; 8
     466:	21 97       	sbiw	r28, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     46a:	88 b1       	in	r24, 0x08	; 8
     46c:	83 7c       	andi	r24, 0xC3	; 195
     46e:	88 b9       	out	0x08, r24	; 8
     470:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     474:	88 b1       	in	r24, 0x08	; 8
     476:	88 60       	ori	r24, 0x08	; 8
     478:	88 b9       	out	0x08, r24	; 8
     47a:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     47e:	88 b1       	in	r24, 0x08	; 8
     480:	83 7c       	andi	r24, 0xC3	; 195
     482:	88 b9       	out	0x08, r24	; 8
     484:	c8 01       	movw	r24, r16
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	8f 2d       	mov	r24, r15
     48e:	8c 60       	ori	r24, 0x0C	; 12
     490:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	80 e8       	ldi	r24, 0x80	; 128
     4a0:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	08 95       	ret

000004b0 <DHT11Setup>:
     4b0:	80 e2       	ldi	r24, 0x20	; 32
     4b2:	9e e4       	ldi	r25, 0x4E	; 78
     4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <DHT11Setup+0x10>
     4b6:	e0 e9       	ldi	r30, 0x90	; 144
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <DHT11Setup+0xa>
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	c9 f7       	brne	.-14     	; 0x4b6 <DHT11Setup+0x6>
     4c4:	84 b1       	in	r24, 0x04	; 4
     4c6:	81 60       	ori	r24, 0x01	; 1
     4c8:	84 b9       	out	0x04, r24	; 4
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <__data_end>
     4d0:	08 95       	ret

000004d2 <DHT11DisplayTemperatureF>:
     4d2:	8a e0       	ldi	r24, 0x0A	; 10
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     4da:	60 91 69 03 	lds	r22, 0x0369	; 0x800369 <DHT11Data+0x2>
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 d0 06 	call	0xda0	; 0xda0 <__floatsisf>
     4e8:	26 e6       	ldi	r18, 0x66	; 102
     4ea:	36 e6       	ldi	r19, 0x66	; 102
     4ec:	46 ee       	ldi	r20, 0xE6	; 230
     4ee:	5f e3       	ldi	r21, 0x3F	; 63
     4f0:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	52 e4       	ldi	r21, 0x42	; 66
     4fc:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__addsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	a9 01       	movw	r20, r18
     506:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__addsf3>
     50a:	0e 94 98 06 	call	0xd30	; 0xd30 <__fixsfsi>
     50e:	42 e0       	ldi	r20, 0x02	; 2
     510:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	8f ed       	ldi	r24, 0xDF	; 223
     518:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	86 e4       	ldi	r24, 0x46	; 70
     520:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     524:	08 95       	ret

00000526 <DHT11DisplayTemperatureC>:
     526:	8a e0       	ldi	r24, 0x0A	; 10
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     52e:	60 91 69 03 	lds	r22, 0x0369	; 0x800369 <DHT11Data+0x2>
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	42 e0       	ldi	r20, 0x02	; 2
     53a:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	8f ed       	ldi	r24, 0xDF	; 223
     542:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	83 e4       	ldi	r24, 0x43	; 67
     54a:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     54e:	08 95       	ret

00000550 <DHT11DisplayHumidity>:
     550:	8d e0       	ldi	r24, 0x0D	; 13
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     558:	60 91 67 03 	lds	r22, 0x0367	; 0x800367 <DHT11Data>
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	42 e0       	ldi	r20, 0x02	; 2
     564:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	85 e2       	ldi	r24, 0x25	; 37
     56c:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     570:	08 95       	ret

00000572 <DHT11ReadData>:
     572:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <__data_end>
     576:	81 11       	cpse	r24, r1
     578:	02 c0       	rjmp	.+4      	; 0x57e <DHT11ReadData+0xc>
     57a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <DHT11Setup>
     57e:	84 b1       	in	r24, 0x04	; 4
     580:	81 60       	ori	r24, 0x01	; 1
     582:	84 b9       	out	0x04, r24	; 4
     584:	85 b1       	in	r24, 0x05	; 5
     586:	8e 7f       	andi	r24, 0xFE	; 254
     588:	85 b9       	out	0x05, r24	; 5
     58a:	88 ec       	ldi	r24, 0xC8	; 200
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	05 c0       	rjmp	.+10     	; 0x59a <DHT11ReadData+0x28>
     590:	e0 e9       	ldi	r30, 0x90	; 144
     592:	f1 e0       	ldi	r31, 0x01	; 1
     594:	31 97       	sbiw	r30, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <DHT11ReadData+0x22>
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	00 97       	sbiw	r24, 0x00	; 0
     59c:	c9 f7       	brne	.-14     	; 0x590 <DHT11ReadData+0x1e>
     59e:	84 b1       	in	r24, 0x04	; 4
     5a0:	8e 7f       	andi	r24, 0xFE	; 254
     5a2:	84 b9       	out	0x04, r24	; 4
     5a4:	8a ea       	ldi	r24, 0xAA	; 170
     5a6:	8a 95       	dec	r24
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <DHT11ReadData+0x34>
     5aa:	18 99       	sbic	0x03, 0	; 3
     5ac:	5f c0       	rjmp	.+190    	; 0x66c <DHT11ReadData+0xfa>
     5ae:	88 e4       	ldi	r24, 0x48	; 72
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <DHT11ReadData+0x40>
     5b6:	18 9b       	sbis	0x03, 0	; 3
     5b8:	5b c0       	rjmp	.+182    	; 0x670 <DHT11ReadData+0xfe>
     5ba:	88 e4       	ldi	r24, 0x48	; 72
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	f1 f7       	brne	.-4      	; 0x5be <DHT11ReadData+0x4c>
     5c2:	18 99       	sbic	0x03, 0	; 3
     5c4:	57 c0       	rjmp	.+174    	; 0x674 <DHT11ReadData+0x102>
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	33 c0       	rjmp	.+102    	; 0x630 <DHT11ReadData+0xbe>
     5ca:	8f 5f       	subi	r24, 0xFF	; 255
     5cc:	89 30       	cpi	r24, 0x09	; 9
     5ce:	38 f4       	brcc	.+14     	; 0x5de <DHT11ReadData+0x6c>
     5d0:	95 e3       	ldi	r25, 0x35	; 53
     5d2:	9a 95       	dec	r25
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <DHT11ReadData+0x60>
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <DHT11ReadData+0x68>
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	18 9b       	sbis	0x03, 0	; 3
     5dc:	f6 cf       	rjmp	.-20     	; 0x5ca <DHT11ReadData+0x58>
     5de:	18 9b       	sbis	0x03, 0	; 3
     5e0:	4b c0       	rjmp	.+150    	; 0x678 <DHT11ReadData+0x106>
     5e2:	85 ed       	ldi	r24, 0xD5	; 213
     5e4:	8a 95       	dec	r24
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <DHT11ReadData+0x72>
     5e8:	18 9b       	sbis	0x03, 0	; 3
     5ea:	0c c0       	rjmp	.+24     	; 0x604 <DHT11ReadData+0x92>
     5ec:	47 e0       	ldi	r20, 0x07	; 7
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	42 1b       	sub	r20, r18
     5f2:	51 09       	sbc	r21, r1
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DHT11ReadData+0x8c>
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	4a 95       	dec	r20
     600:	e2 f7       	brpl	.-8      	; 0x5fa <DHT11ReadData+0x88>
     602:	38 2b       	or	r19, r24
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	06 c0       	rjmp	.+12     	; 0x614 <DHT11ReadData+0xa2>
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	89 30       	cpi	r24, 0x09	; 9
     60c:	28 f4       	brcc	.+10     	; 0x618 <DHT11ReadData+0xa6>
     60e:	95 e3       	ldi	r25, 0x35	; 53
     610:	9a 95       	dec	r25
     612:	f1 f7       	brne	.-4      	; 0x610 <DHT11ReadData+0x9e>
     614:	18 99       	sbic	0x03, 0	; 3
     616:	f8 cf       	rjmp	.-16     	; 0x608 <DHT11ReadData+0x96>
     618:	2f 5f       	subi	r18, 0xFF	; 255
     61a:	02 c0       	rjmp	.+4      	; 0x620 <DHT11ReadData+0xae>
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	28 30       	cpi	r18, 0x08	; 8
     622:	d0 f2       	brcs	.-76     	; 0x5d8 <DHT11ReadData+0x66>
     624:	e6 2f       	mov	r30, r22
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	e9 59       	subi	r30, 0x99	; 153
     62a:	fc 4f       	sbci	r31, 0xFC	; 252
     62c:	30 83       	st	Z, r19
     62e:	6f 5f       	subi	r22, 0xFF	; 255
     630:	65 30       	cpi	r22, 0x05	; 5
     632:	a0 f3       	brcs	.-24     	; 0x61c <DHT11ReadData+0xaa>
     634:	80 ef       	ldi	r24, 0xF0	; 240
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <DHT11ReadData+0xc6>
     63c:	e7 e6       	ldi	r30, 0x67	; 103
     63e:	f3 e0       	ldi	r31, 0x03	; 3
     640:	30 81       	ld	r19, Z
     642:	21 81       	ldd	r18, Z+1	; 0x01
     644:	92 81       	ldd	r25, Z+2	; 0x02
     646:	83 81       	ldd	r24, Z+3	; 0x03
     648:	23 0f       	add	r18, r19
     64a:	92 0f       	add	r25, r18
     64c:	89 0f       	add	r24, r25
     64e:	94 81       	ldd	r25, Z+4	; 0x04
     650:	89 13       	cpse	r24, r25
     652:	14 c0       	rjmp	.+40     	; 0x67c <DHT11ReadData+0x10a>
     654:	80 e1       	ldi	r24, 0x10	; 16
     656:	97 e2       	ldi	r25, 0x27	; 39
     658:	05 c0       	rjmp	.+10     	; 0x664 <DHT11ReadData+0xf2>
     65a:	e0 e9       	ldi	r30, 0x90	; 144
     65c:	f1 e0       	ldi	r31, 0x01	; 1
     65e:	31 97       	sbiw	r30, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <DHT11ReadData+0xec>
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	00 97       	sbiw	r24, 0x00	; 0
     666:	c9 f7       	brne	.-14     	; 0x65a <DHT11ReadData+0xe8>
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	08 95       	ret
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	08 95       	ret
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	08 95       	ret
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	08 95       	ret
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	08 95       	ret
     67c:	8f ef       	ldi	r24, 0xFF	; 255
     67e:	08 95       	ret

00000680 <adc_init>:
		}
    }
}

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));		//16Mhz/128 = 125Khz the ADC reference clock
     680:	ea e7       	ldi	r30, 0x7A	; 122
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	87 60       	ori	r24, 0x07	; 7
     688:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);								//Voltage reference from Avcc (5v)
     68a:	ac e7       	ldi	r26, 0x7C	; 124
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	8c 91       	ld	r24, X
     690:	80 64       	ori	r24, 0x40	; 64
     692:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);								//Turn on ADC
     694:	80 81       	ld	r24, Z
     696:	80 68       	ori	r24, 0x80	; 128
     698:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);								//Do an initial conversion because this one is the slowest
     69a:	80 81       	ld	r24, Z
     69c:	80 64       	ori	r24, 0x40	; 64
     69e:	80 83       	st	Z, r24
     6a0:	08 95       	ret

000006a2 <read_adc>:
}

uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;						//Clear the older channel that was read
     6a2:	ec e7       	ldi	r30, 0x7C	; 124
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	90 81       	ld	r25, Z
     6a8:	90 7f       	andi	r25, 0xF0	; 240
     6aa:	90 83       	st	Z, r25
	ADMUX |= channel;					//Defines the new ADC channel to be read
     6ac:	90 81       	ld	r25, Z
     6ae:	89 2b       	or	r24, r25
     6b0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
     6b2:	ea e7       	ldi	r30, 0x7A	; 122
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	80 81       	ld	r24, Z
     6b8:	80 64       	ori	r24, 0x40	; 64
     6ba:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
     6bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6c0:	86 fd       	sbrc	r24, 6
     6c2:	fc cf       	rjmp	.-8      	; 0x6bc <read_adc+0x1a>
	return (ADCW*5);                    //Returns the ADC value of the chosen channel
     6c4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6c8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     6cc:	9c 01       	movw	r18, r24
     6ce:	22 0f       	add	r18, r18
     6d0:	33 1f       	adc	r19, r19
     6d2:	22 0f       	add	r18, r18
     6d4:	33 1f       	adc	r19, r19
}
     6d6:	82 0f       	add	r24, r18
     6d8:	93 1f       	adc	r25, r19
     6da:	08 95       	ret

000006dc <USART_init>:

void USART_init(void){
	UBRR0H = (uint8_t)(BAUD_PRESCALER>>8);	//Setting Baud rate
     6dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALER);		//Setting Baud rate
     6e0:	87 e6       	ldi	r24, 0x67	; 103
     6e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);			//Enable receiver (RXEN0) and transmitter (TXENO)
     6e6:	e1 ec       	ldi	r30, 0xC1	; 193
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	88 e1       	ldi	r24, 0x18	; 24
     6ec:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSR0B)|(3<<UCSZ00);		//From datasheet, set format:8data, 2stop bit
     6ee:	20 81       	ld	r18, Z
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <USART_init+0x1e>
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	2a 95       	dec	r18
     6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <USART_init+0x1a>
     6fe:	86 60       	ori	r24, 0x06	; 6
     700:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt 
     704:	80 81       	ld	r24, Z
     706:	80 68       	ori	r24, 0x80	; 128
     708:	80 83       	st	Z, r24
	sei(); // Enable the Global Interrupt Enable flag so that interrupts can be processed
     70a:	78 94       	sei
     70c:	08 95       	ret

0000070e <USART_send>:
	UDR0 = ReceivedByte; //echo
	ReceivedByte = UDR0; // Next char
}

void USART_send(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));			//While UDRE0 (USART Data Register flag) is clear,
     70e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     712:	95 ff       	sbrs	r25, 5
     714:	fc cf       	rjmp	.-8      	; 0x70e <USART_send>
	UDR0 = data;	
     716:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     71a:	08 95       	ret

0000071c <USART_putstring>:
}

void USART_putstring(char* StringPtr){
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
     722:	03 c0       	rjmp	.+6      	; 0x72a <USART_putstring+0xe>
		USART_send(*StringPtr);
     724:	0e 94 87 03 	call	0x70e	; 0x70e <USART_send>
	StringPtr++;}	
     728:	21 96       	adiw	r28, 0x01	; 1
	while(!(UCSR0A & (1<<UDRE0)));			//While UDRE0 (USART Data Register flag) is clear,
	UDR0 = data;	
}

void USART_putstring(char* StringPtr){
	while(*StringPtr != 0x00){
     72a:	88 81       	ld	r24, Y
     72c:	81 11       	cpse	r24, r1
     72e:	fa cf       	rjmp	.-12     	; 0x724 <USART_putstring+0x8>
		USART_send(*StringPtr);
	StringPtr++;}	
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <main>:
int readValue = 2;
char buffer[5];	

int main(void)
{
	all = 1;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <all+0x1>
     73e:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <all>
	dt = 1;
     742:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <dt+0x1>
     746:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <dt>
	fahren = 0;
     74a:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <fahren+0x1>
     74e:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <fahren>
	LCDSetup(LCD_CURSOR_NONE);	
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 ab 01 	call	0x356	; 0x356 <LCDSetup>
	adc_init();
     758:	0e 94 40 03 	call	0x680	; 0x680 <adc_init>
	USART_init();
     75c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <USART_init>

	USART_putstring("Measurements are being taken 1s apart. \r \n");
     760:	80 e1       	ldi	r24, 0x10	; 16
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
	USART_putstring("To specify the spacing of measurements in seconds, enter the command Sx, where x is desired seconds. \r \n");
     768:	8b e3       	ldi	r24, 0x3B	; 59
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
	USART_putstring("To specify which measurement to view, enter the command: \r \n");
     770:	84 ea       	ldi	r24, 0xA4	; 164
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
	USART_putstring("T for temperature, \r \n");
     778:	81 ee       	ldi	r24, 0xE1	; 225
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
	USART_putstring("B for brightness, \r \n");
     780:	88 ef       	ldi	r24, 0xF8	; 248
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
	USART_putstring("H for humidity, or \r \n");
     788:	8e e0       	ldi	r24, 0x0E	; 14
     78a:	92 e0       	ldi	r25, 0x02	; 2
     78c:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
	USART_putstring("A for all measurements. \r \n");
     790:	85 e2       	ldi	r24, 0x25	; 37
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
	USART_putstring("To display temperature in Fahrenheit, enter the command F. \r \n");
     798:	81 e4       	ldi	r24, 0x41	; 65
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
	USART_putstring("To display temperature in Celsius, enter the command C. \r \n");
     7a0:	80 e8       	ldi	r24, 0x80	; 128
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
	USART_putstring("To store brightness in EEPROM, enter the command E. \r \n");
     7a8:	8c eb       	ldi	r24, 0xBC	; 188
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
	USART_putstring("To read brightness stored in EEPROM, enter the command R. \r \n");
     7b0:	84 ef       	ldi	r24, 0xF4	; 244
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
	
    while (1) 
    {

		_delay_ms(dt*1000);
     7b8:	20 91 7a 03 	lds	r18, 0x037A	; 0x80037a <dt>
     7bc:	30 91 7b 03 	lds	r19, 0x037B	; 0x80037b <dt+0x1>
     7c0:	88 ee       	ldi	r24, 0xE8	; 232
     7c2:	93 e0       	ldi	r25, 0x03	; 3
     7c4:	28 9f       	mul	r18, r24
     7c6:	b0 01       	movw	r22, r0
     7c8:	29 9f       	mul	r18, r25
     7ca:	70 0d       	add	r23, r0
     7cc:	38 9f       	mul	r19, r24
     7ce:	70 0d       	add	r23, r0
     7d0:	11 24       	eor	r1, r1
     7d2:	07 2e       	mov	r0, r23
     7d4:	00 0c       	add	r0, r0
     7d6:	88 0b       	sbc	r24, r24
     7d8:	99 0b       	sbc	r25, r25
     7da:	0e 94 d0 06 	call	0xda0	; 0xda0 <__floatsisf>
     7de:	4b 01       	movw	r8, r22
     7e0:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	4a e7       	ldi	r20, 0x7A	; 122
     7e8:	55 e4       	ldi	r21, 0x45	; 69
     7ea:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     7ee:	6b 01       	movw	r12, r22
     7f0:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e8       	ldi	r20, 0x80	; 128
     7f8:	5f e3       	ldi	r21, 0x3F	; 63
     7fa:	0e 94 21 06 	call	0xc42	; 0xc42 <__cmpsf2>
     7fe:	88 23       	and	r24, r24
     800:	24 f1       	brlt	.+72     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
		__ticks = 1;
	else if (__tmp > 65535)
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	3f ef       	ldi	r19, 0xFF	; 255
     806:	4f e7       	ldi	r20, 0x7F	; 127
     808:	57 e4       	ldi	r21, 0x47	; 71
     80a:	c7 01       	movw	r24, r14
     80c:	b6 01       	movw	r22, r12
     80e:	0e 94 80 07 	call	0xf00	; 0xf00 <__gesf2>
     812:	18 16       	cp	r1, r24
     814:	ac f4       	brge	.+42     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e2       	ldi	r20, 0x20	; 32
     81c:	51 e4       	ldi	r21, 0x41	; 65
     81e:	c5 01       	movw	r24, r10
     820:	b4 01       	movw	r22, r8
     822:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     826:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
     82a:	06 c0       	rjmp	.+12     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     82c:	80 e9       	ldi	r24, 0x90	; 144
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     834:	61 50       	subi	r22, 0x01	; 1
     836:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     838:	61 15       	cp	r22, r1
     83a:	71 05       	cpc	r23, r1
     83c:	b9 f7       	brne	.-18     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     83e:	0a c0       	rjmp	.+20     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     840:	c7 01       	movw	r24, r14
     842:	b6 01       	movw	r22, r12
     844:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
     848:	02 c0       	rjmp	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	cb 01       	movw	r24, r22
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	f1 f7       	brne	.-4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	
		DHTreturnCode = DHT11ReadData();		//Function to read and check the sensor data
     854:	0e 94 b9 02 	call	0x572	; 0x572 <DHT11ReadData>
     858:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <DHTreturnCode>
		if(DHTreturnCode == -1){
     85c:	8f 3f       	cpi	r24, 0xFF	; 255
     85e:	49 f4       	brne	.+18     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
			LCDHome();
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	80 e8       	ldi	r24, 0x80	; 128
     864:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
			LCDWriteString("Checksum Error");	//Error message on lcd to show data was received incorrectly
     868:	82 e3       	ldi	r24, 0x32	; 50
     86a:	93 e0       	ldi	r25, 0x03	; 3
     86c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     870:	a3 cf       	rjmp	.-186    	; 0x7b8 <main+0x82>
		} else {
			if (all == 1) {
     872:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <all>
     876:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <all+0x1>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	09 f0       	breq	.+2      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
     87e:	41 c0       	rjmp	.+130    	; 0x902 <__stack+0x3>
				LCDHome();
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	80 e8       	ldi	r24, 0x80	; 128
     884:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				if (fahren == 1) {
     888:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <fahren>
     88c:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <fahren+0x1>
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	19 f4       	brne	.+6      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
					DHT11DisplayTemperatureF();			//Display Temp F
     894:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DHT11DisplayTemperatureF>
     898:	02 c0       	rjmp	.+4      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
				} else {
					DHT11DisplayTemperatureC();			//Display Temp C
     89a:	0e 94 93 02 	call	0x526	; 0x526 <DHT11DisplayTemperatureC>
				}
				LCDGotoXY(8,1);
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	88 e0       	ldi	r24, 0x08	; 8
     8a2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDGotoXY>
				LCDWriteString("B:");				//Display Brightness
     8a6:	81 e4       	ldi	r24, 0x41	; 65
     8a8:	93 e0       	ldi	r25, 0x03	; 3
     8aa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
				adc_value =  ((float)read_adc(0)/2000)*100;
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_adc>
     8b4:	bc 01       	movw	r22, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__floatunsisf>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	4a ef       	ldi	r20, 0xFA	; 250
     8c4:	54 e4       	ldi	r21, 0x44	; 68
     8c6:	0e 94 26 06 	call	0xc4c	; 0xc4c <__divsf3>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	48 ec       	ldi	r20, 0xC8	; 200
     8d0:	52 e4       	ldi	r21, 0x42	; 66
     8d2:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     8d6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
     8da:	70 93 72 03 	sts	0x0372, r23	; 0x800372 <adc_value+0x1>
     8de:	60 93 71 03 	sts	0x0371, r22	; 0x800371 <adc_value>
				LCDWriteInt(adc_value,3);
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	43 e0       	ldi	r20, 0x03	; 3
     8e8:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
				LCDWriteString("%");
     8ec:	84 e4       	ldi	r24, 0x44	; 68
     8ee:	93 e0       	ldi	r25, 0x03	; 3
     8f0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
				LCDGotoXY(1,2);
     8f4:	62 e0       	ldi	r22, 0x02	; 2
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDGotoXY>
				DHT11DisplayHumidity();				//Display Humidity
     8fc:	0e 94 a8 02 	call	0x550	; 0x550 <DHT11DisplayHumidity>
     900:	5b cf       	rjmp	.-330    	; 0x7b8 <main+0x82>
			}
			else if (temp == 1) {
     902:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <temp>
     906:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <temp+0x1>
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	81 f4       	brne	.+32     	; 0x92e <__stack+0x2f>
				LCDHome(); 
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	80 e8       	ldi	r24, 0x80	; 128
     912:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				if (fahren == 1) {
     916:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <fahren>
     91a:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <fahren+0x1>
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	19 f4       	brne	.+6      	; 0x928 <__stack+0x29>
					DHT11DisplayTemperatureF();			//Display Temp F
     922:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DHT11DisplayTemperatureF>
     926:	48 cf       	rjmp	.-368    	; 0x7b8 <main+0x82>
				} else {
					DHT11DisplayTemperatureC();			//Display Temp C
     928:	0e 94 93 02 	call	0x526	; 0x526 <DHT11DisplayTemperatureC>
     92c:	45 cf       	rjmp	.-374    	; 0x7b8 <main+0x82>
				}
			}
			else if (bright == 1) {
     92e:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <bright>
     932:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <bright+0x1>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	61 f5       	brne	.+88     	; 0x992 <__stack+0x93>
				LCDHome();
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	80 e8       	ldi	r24, 0x80	; 128
     93e:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				LCDWriteString("B:");				//Display Brightness
     942:	81 e4       	ldi	r24, 0x41	; 65
     944:	93 e0       	ldi	r25, 0x03	; 3
     946:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
				adc_value =  ((float)read_adc(0)/5050)*100;
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_adc>
     950:	bc 01       	movw	r22, r24
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__floatunsisf>
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 ed       	ldi	r19, 0xD0	; 208
     95e:	4d e9       	ldi	r20, 0x9D	; 157
     960:	55 e4       	ldi	r21, 0x45	; 69
     962:	0e 94 26 06 	call	0xc4c	; 0xc4c <__divsf3>
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	48 ec       	ldi	r20, 0xC8	; 200
     96c:	52 e4       	ldi	r21, 0x42	; 66
     96e:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     972:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
     976:	70 93 72 03 	sts	0x0372, r23	; 0x800372 <adc_value+0x1>
     97a:	60 93 71 03 	sts	0x0371, r22	; 0x800371 <adc_value>
				LCDWriteInt(adc_value,3);
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	43 e0       	ldi	r20, 0x03	; 3
     984:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
				LCDWriteString("%");
     988:	84 e4       	ldi	r24, 0x44	; 68
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     990:	13 cf       	rjmp	.-474    	; 0x7b8 <main+0x82>
			}
			else if (humid == 1) {
     992:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <humid>
     996:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <humid+0x1>
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	09 f0       	breq	.+2      	; 0x9a0 <__stack+0xa1>
     99e:	0c cf       	rjmp	.-488    	; 0x7b8 <main+0x82>
				LCDHome();
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	80 e8       	ldi	r24, 0x80	; 128
     9a4:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				DHT11DisplayHumidity();				//Display Humidity
     9a8:	0e 94 a8 02 	call	0x550	; 0x550 <DHT11DisplayHumidity>
     9ac:	05 cf       	rjmp	.-502    	; 0x7b8 <main+0x82>

000009ae <__vector_18>:
	UCSR0C = (1<<UCSR0B)|(3<<UCSZ00);		//From datasheet, set format:8data, 2stop bit
	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt 
	sei(); // Enable the Global Interrupt Enable flag so that interrupts can be processed
}

ISR(USART_RX_vect) {
     9ae:	1f 92       	push	r1
     9b0:	0f 92       	push	r0
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	0f 92       	push	r0
     9b6:	11 24       	eor	r1, r1
     9b8:	2f 93       	push	r18
     9ba:	3f 93       	push	r19
     9bc:	4f 93       	push	r20
     9be:	5f 93       	push	r21
     9c0:	6f 93       	push	r22
     9c2:	7f 93       	push	r23
     9c4:	8f 93       	push	r24
     9c6:	9f 93       	push	r25
     9c8:	af 93       	push	r26
     9ca:	bf 93       	push	r27
     9cc:	cf 93       	push	r28
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
     9d2:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (ReceivedByte == 'S') {
     9d6:	c3 35       	cpi	r28, 0x53	; 83
     9d8:	51 f4       	brne	.+20     	; 0x9ee <__vector_18+0x40>
		ReceivedByte = UDR0;
     9da:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		dt = ReceivedByte - 48; //Change interval with which measurements are taken
     9de:	8c 2f       	mov	r24, r28
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	c0 97       	sbiw	r24, 0x30	; 48
     9e4:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <dt+0x1>
     9e8:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <dt>
     9ec:	a7 c0       	rjmp	.+334    	; 0xb3c <__vector_18+0x18e>
	}
	else if (ReceivedByte == 'T') {
     9ee:	c4 35       	cpi	r28, 0x54	; 84
     9f0:	b9 f4       	brne	.+46     	; 0xa20 <__vector_18+0x72>
		LCDClear();
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		temp = 1;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <temp+0x1>
     a02:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <temp>
		all = 0;
     a06:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <all+0x1>
     a0a:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <all>
		bright = 0;
     a0e:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <bright+0x1>
     a12:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <bright>
		humid = 0;
     a16:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <humid+0x1>
     a1a:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <humid>
     a1e:	8e c0       	rjmp	.+284    	; 0xb3c <__vector_18+0x18e>
	}
	else if (ReceivedByte == 'B') {
     a20:	c2 34       	cpi	r28, 0x42	; 66
     a22:	b9 f4       	brne	.+46     	; 0xa52 <__vector_18+0xa4>
		LCDClear();
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		bright = 1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <bright+0x1>
     a34:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <bright>
		all = 0;
     a38:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <all+0x1>
     a3c:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <all>
		temp = 0;
     a40:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <temp+0x1>
     a44:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <temp>
		humid = 0;
     a48:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <humid+0x1>
     a4c:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <humid>
     a50:	75 c0       	rjmp	.+234    	; 0xb3c <__vector_18+0x18e>
	}
	else if (ReceivedByte == 'H') {
     a52:	c8 34       	cpi	r28, 0x48	; 72
     a54:	b9 f4       	brne	.+46     	; 0xa84 <__vector_18+0xd6>
		LCDClear();
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		humid = 1;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <humid+0x1>
     a66:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <humid>
		all = 0;
     a6a:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <all+0x1>
     a6e:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <all>
		bright = 0;
     a72:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <bright+0x1>
     a76:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <bright>
		temp = 0;
     a7a:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <temp+0x1>
     a7e:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <temp>
     a82:	5c c0       	rjmp	.+184    	; 0xb3c <__vector_18+0x18e>
	}
	else if (ReceivedByte == 'A') {
     a84:	c1 34       	cpi	r28, 0x41	; 65
     a86:	b9 f4       	brne	.+46     	; 0xab6 <__vector_18+0x108>
		LCDClear();
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		all = 1;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <all+0x1>
     a98:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <all>
		temp = 0;
     a9c:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <temp+0x1>
     aa0:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <temp>
		bright = 0;
     aa4:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <bright+0x1>
     aa8:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <bright>
		humid = 0;
     aac:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <humid+0x1>
     ab0:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <humid>
     ab4:	43 c0       	rjmp	.+134    	; 0xb3c <__vector_18+0x18e>
	}
	else if (ReceivedByte == 'F') {
     ab6:	c6 34       	cpi	r28, 0x46	; 70
     ab8:	39 f4       	brne	.+14     	; 0xac8 <__vector_18+0x11a>
		fahren = 1;
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <fahren+0x1>
     ac2:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <fahren>
     ac6:	3a c0       	rjmp	.+116    	; 0xb3c <__vector_18+0x18e>
	}
	else if (ReceivedByte == 'C') {
     ac8:	c3 34       	cpi	r28, 0x43	; 67
     aca:	29 f4       	brne	.+10     	; 0xad6 <__vector_18+0x128>
		fahren = 0;
     acc:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <fahren+0x1>
     ad0:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <fahren>
     ad4:	33 c0       	rjmp	.+102    	; 0xb3c <__vector_18+0x18e>
	}
	else if (ReceivedByte == 'E') {
     ad6:	c5 34       	cpi	r28, 0x45	; 69
     ad8:	79 f4       	brne	.+30     	; 0xaf8 <__vector_18+0x14a>
		while (!eeprom_is_ready());
     ada:	f9 99       	sbic	0x1f, 1	; 31
     adc:	fe cf       	rjmp	.-4      	; 0xada <__vector_18+0x12c>
		cli();
     ade:	f8 94       	cli
		eeprom_write_word((uint16_t*)addr, adc_value);
     ae0:	60 91 71 03 	lds	r22, 0x0371	; 0x800371 <adc_value>
     ae4:	70 91 72 03 	lds	r23, 0x0372	; 0x800372 <adc_value+0x1>
     ae8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     aec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <addr+0x1>
     af0:	0e 94 79 08 	call	0x10f2	; 0x10f2 <eeprom_write_word>
		sei();
     af4:	78 94       	sei
     af6:	22 c0       	rjmp	.+68     	; 0xb3c <__vector_18+0x18e>
	}
	else if (ReceivedByte == 'R') {
     af8:	c2 35       	cpi	r28, 0x52	; 82
     afa:	01 f5       	brne	.+64     	; 0xb3c <__vector_18+0x18e>
		while (!eeprom_is_ready());
     afc:	f9 99       	sbic	0x1f, 1	; 31
     afe:	fe cf       	rjmp	.-4      	; 0xafc <__vector_18+0x14e>
		cli();
     b00:	f8 94       	cli
		readValue = eeprom_read_word((uint16_t*)addr); // => sensorValue
     b02:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <addr>
     b06:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <addr+0x1>
     b0a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <eeprom_read_word>
     b0e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b12:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		sei();
     b16:	78 94       	sei
		itoa(readValue, buffer,10);
     b18:	4a e0       	ldi	r20, 0x0A	; 10
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	63 e7       	ldi	r22, 0x73	; 115
     b1e:	73 e0       	ldi	r23, 0x03	; 3
     b20:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b24:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b28:	0e 94 33 08 	call	0x1066	; 0x1066 <itoa>
		USART_putstring("\r \n Stored brightness value = ");
     b2c:	86 e4       	ldi	r24, 0x46	; 70
     b2e:	93 e0       	ldi	r25, 0x03	; 3
     b30:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
		USART_putstring(buffer);
     b34:	83 e7       	ldi	r24, 0x73	; 115
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	0e 94 8e 03 	call	0x71c	; 0x71c <USART_putstring>
	}
	
	UDR0 = ReceivedByte; //echo
     b3c:	e6 ec       	ldi	r30, 0xC6	; 198
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	c0 83       	st	Z, r28
	ReceivedByte = UDR0; // Next char
     b42:	80 81       	ld	r24, Z
}
     b44:	ff 91       	pop	r31
     b46:	ef 91       	pop	r30
     b48:	cf 91       	pop	r28
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <__subsf3>:
     b68:	50 58       	subi	r21, 0x80	; 128

00000b6a <__addsf3>:
     b6a:	bb 27       	eor	r27, r27
     b6c:	aa 27       	eor	r26, r26
     b6e:	0e 94 cc 05 	call	0xb98	; 0xb98 <__addsf3x>
     b72:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__fp_round>
     b76:	0e 94 38 07 	call	0xe70	; 0xe70 <__fp_pscA>
     b7a:	38 f0       	brcs	.+14     	; 0xb8a <__addsf3+0x20>
     b7c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_pscB>
     b80:	20 f0       	brcs	.+8      	; 0xb8a <__addsf3+0x20>
     b82:	39 f4       	brne	.+14     	; 0xb92 <__addsf3+0x28>
     b84:	9f 3f       	cpi	r25, 0xFF	; 255
     b86:	19 f4       	brne	.+6      	; 0xb8e <__addsf3+0x24>
     b88:	26 f4       	brtc	.+8      	; 0xb92 <__addsf3+0x28>
     b8a:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_nan>
     b8e:	0e f4       	brtc	.+2      	; 0xb92 <__addsf3+0x28>
     b90:	e0 95       	com	r30
     b92:	e7 fb       	bst	r30, 7
     b94:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>

00000b98 <__addsf3x>:
     b98:	e9 2f       	mov	r30, r25
     b9a:	0e 94 57 07 	call	0xeae	; 0xeae <__fp_split3>
     b9e:	58 f3       	brcs	.-42     	; 0xb76 <__addsf3+0xc>
     ba0:	ba 17       	cp	r27, r26
     ba2:	62 07       	cpc	r22, r18
     ba4:	73 07       	cpc	r23, r19
     ba6:	84 07       	cpc	r24, r20
     ba8:	95 07       	cpc	r25, r21
     baa:	20 f0       	brcs	.+8      	; 0xbb4 <__addsf3x+0x1c>
     bac:	79 f4       	brne	.+30     	; 0xbcc <__addsf3x+0x34>
     bae:	a6 f5       	brtc	.+104    	; 0xc18 <__addsf3x+0x80>
     bb0:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_zero>
     bb4:	0e f4       	brtc	.+2      	; 0xbb8 <__addsf3x+0x20>
     bb6:	e0 95       	com	r30
     bb8:	0b 2e       	mov	r0, r27
     bba:	ba 2f       	mov	r27, r26
     bbc:	a0 2d       	mov	r26, r0
     bbe:	0b 01       	movw	r0, r22
     bc0:	b9 01       	movw	r22, r18
     bc2:	90 01       	movw	r18, r0
     bc4:	0c 01       	movw	r0, r24
     bc6:	ca 01       	movw	r24, r20
     bc8:	a0 01       	movw	r20, r0
     bca:	11 24       	eor	r1, r1
     bcc:	ff 27       	eor	r31, r31
     bce:	59 1b       	sub	r21, r25
     bd0:	99 f0       	breq	.+38     	; 0xbf8 <__addsf3x+0x60>
     bd2:	59 3f       	cpi	r21, 0xF9	; 249
     bd4:	50 f4       	brcc	.+20     	; 0xbea <__addsf3x+0x52>
     bd6:	50 3e       	cpi	r21, 0xE0	; 224
     bd8:	68 f1       	brcs	.+90     	; 0xc34 <__addsf3x+0x9c>
     bda:	1a 16       	cp	r1, r26
     bdc:	f0 40       	sbci	r31, 0x00	; 0
     bde:	a2 2f       	mov	r26, r18
     be0:	23 2f       	mov	r18, r19
     be2:	34 2f       	mov	r19, r20
     be4:	44 27       	eor	r20, r20
     be6:	58 5f       	subi	r21, 0xF8	; 248
     be8:	f3 cf       	rjmp	.-26     	; 0xbd0 <__addsf3x+0x38>
     bea:	46 95       	lsr	r20
     bec:	37 95       	ror	r19
     bee:	27 95       	ror	r18
     bf0:	a7 95       	ror	r26
     bf2:	f0 40       	sbci	r31, 0x00	; 0
     bf4:	53 95       	inc	r21
     bf6:	c9 f7       	brne	.-14     	; 0xbea <__addsf3x+0x52>
     bf8:	7e f4       	brtc	.+30     	; 0xc18 <__addsf3x+0x80>
     bfa:	1f 16       	cp	r1, r31
     bfc:	ba 0b       	sbc	r27, r26
     bfe:	62 0b       	sbc	r22, r18
     c00:	73 0b       	sbc	r23, r19
     c02:	84 0b       	sbc	r24, r20
     c04:	ba f0       	brmi	.+46     	; 0xc34 <__addsf3x+0x9c>
     c06:	91 50       	subi	r25, 0x01	; 1
     c08:	a1 f0       	breq	.+40     	; 0xc32 <__addsf3x+0x9a>
     c0a:	ff 0f       	add	r31, r31
     c0c:	bb 1f       	adc	r27, r27
     c0e:	66 1f       	adc	r22, r22
     c10:	77 1f       	adc	r23, r23
     c12:	88 1f       	adc	r24, r24
     c14:	c2 f7       	brpl	.-16     	; 0xc06 <__addsf3x+0x6e>
     c16:	0e c0       	rjmp	.+28     	; 0xc34 <__addsf3x+0x9c>
     c18:	ba 0f       	add	r27, r26
     c1a:	62 1f       	adc	r22, r18
     c1c:	73 1f       	adc	r23, r19
     c1e:	84 1f       	adc	r24, r20
     c20:	48 f4       	brcc	.+18     	; 0xc34 <__addsf3x+0x9c>
     c22:	87 95       	ror	r24
     c24:	77 95       	ror	r23
     c26:	67 95       	ror	r22
     c28:	b7 95       	ror	r27
     c2a:	f7 95       	ror	r31
     c2c:	9e 3f       	cpi	r25, 0xFE	; 254
     c2e:	08 f0       	brcs	.+2      	; 0xc32 <__addsf3x+0x9a>
     c30:	b0 cf       	rjmp	.-160    	; 0xb92 <__addsf3+0x28>
     c32:	93 95       	inc	r25
     c34:	88 0f       	add	r24, r24
     c36:	08 f0       	brcs	.+2      	; 0xc3a <__addsf3x+0xa2>
     c38:	99 27       	eor	r25, r25
     c3a:	ee 0f       	add	r30, r30
     c3c:	97 95       	ror	r25
     c3e:	87 95       	ror	r24
     c40:	08 95       	ret

00000c42 <__cmpsf2>:
     c42:	0e 94 0b 07 	call	0xe16	; 0xe16 <__fp_cmp>
     c46:	08 f4       	brcc	.+2      	; 0xc4a <__cmpsf2+0x8>
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	08 95       	ret

00000c4c <__divsf3>:
     c4c:	0e 94 3a 06 	call	0xc74	; 0xc74 <__divsf3x>
     c50:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__fp_round>
     c54:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_pscB>
     c58:	58 f0       	brcs	.+22     	; 0xc70 <__divsf3+0x24>
     c5a:	0e 94 38 07 	call	0xe70	; 0xe70 <__fp_pscA>
     c5e:	40 f0       	brcs	.+16     	; 0xc70 <__divsf3+0x24>
     c60:	29 f4       	brne	.+10     	; 0xc6c <__divsf3+0x20>
     c62:	5f 3f       	cpi	r21, 0xFF	; 255
     c64:	29 f0       	breq	.+10     	; 0xc70 <__divsf3+0x24>
     c66:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>
     c6a:	51 11       	cpse	r21, r1
     c6c:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_szero>
     c70:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_nan>

00000c74 <__divsf3x>:
     c74:	0e 94 57 07 	call	0xeae	; 0xeae <__fp_split3>
     c78:	68 f3       	brcs	.-38     	; 0xc54 <__divsf3+0x8>

00000c7a <__divsf3_pse>:
     c7a:	99 23       	and	r25, r25
     c7c:	b1 f3       	breq	.-20     	; 0xc6a <__divsf3+0x1e>
     c7e:	55 23       	and	r21, r21
     c80:	91 f3       	breq	.-28     	; 0xc66 <__divsf3+0x1a>
     c82:	95 1b       	sub	r25, r21
     c84:	55 0b       	sbc	r21, r21
     c86:	bb 27       	eor	r27, r27
     c88:	aa 27       	eor	r26, r26
     c8a:	62 17       	cp	r22, r18
     c8c:	73 07       	cpc	r23, r19
     c8e:	84 07       	cpc	r24, r20
     c90:	38 f0       	brcs	.+14     	; 0xca0 <__divsf3_pse+0x26>
     c92:	9f 5f       	subi	r25, 0xFF	; 255
     c94:	5f 4f       	sbci	r21, 0xFF	; 255
     c96:	22 0f       	add	r18, r18
     c98:	33 1f       	adc	r19, r19
     c9a:	44 1f       	adc	r20, r20
     c9c:	aa 1f       	adc	r26, r26
     c9e:	a9 f3       	breq	.-22     	; 0xc8a <__divsf3_pse+0x10>
     ca0:	35 d0       	rcall	.+106    	; 0xd0c <__divsf3_pse+0x92>
     ca2:	0e 2e       	mov	r0, r30
     ca4:	3a f0       	brmi	.+14     	; 0xcb4 <__divsf3_pse+0x3a>
     ca6:	e0 e8       	ldi	r30, 0x80	; 128
     ca8:	32 d0       	rcall	.+100    	; 0xd0e <__divsf3_pse+0x94>
     caa:	91 50       	subi	r25, 0x01	; 1
     cac:	50 40       	sbci	r21, 0x00	; 0
     cae:	e6 95       	lsr	r30
     cb0:	00 1c       	adc	r0, r0
     cb2:	ca f7       	brpl	.-14     	; 0xca6 <__divsf3_pse+0x2c>
     cb4:	2b d0       	rcall	.+86     	; 0xd0c <__divsf3_pse+0x92>
     cb6:	fe 2f       	mov	r31, r30
     cb8:	29 d0       	rcall	.+82     	; 0xd0c <__divsf3_pse+0x92>
     cba:	66 0f       	add	r22, r22
     cbc:	77 1f       	adc	r23, r23
     cbe:	88 1f       	adc	r24, r24
     cc0:	bb 1f       	adc	r27, r27
     cc2:	26 17       	cp	r18, r22
     cc4:	37 07       	cpc	r19, r23
     cc6:	48 07       	cpc	r20, r24
     cc8:	ab 07       	cpc	r26, r27
     cca:	b0 e8       	ldi	r27, 0x80	; 128
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <__divsf3_pse+0x56>
     cce:	bb 0b       	sbc	r27, r27
     cd0:	80 2d       	mov	r24, r0
     cd2:	bf 01       	movw	r22, r30
     cd4:	ff 27       	eor	r31, r31
     cd6:	93 58       	subi	r25, 0x83	; 131
     cd8:	5f 4f       	sbci	r21, 0xFF	; 255
     cda:	3a f0       	brmi	.+14     	; 0xcea <__divsf3_pse+0x70>
     cdc:	9e 3f       	cpi	r25, 0xFE	; 254
     cde:	51 05       	cpc	r21, r1
     ce0:	78 f0       	brcs	.+30     	; 0xd00 <__divsf3_pse+0x86>
     ce2:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>
     ce6:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_szero>
     cea:	5f 3f       	cpi	r21, 0xFF	; 255
     cec:	e4 f3       	brlt	.-8      	; 0xce6 <__divsf3_pse+0x6c>
     cee:	98 3e       	cpi	r25, 0xE8	; 232
     cf0:	d4 f3       	brlt	.-12     	; 0xce6 <__divsf3_pse+0x6c>
     cf2:	86 95       	lsr	r24
     cf4:	77 95       	ror	r23
     cf6:	67 95       	ror	r22
     cf8:	b7 95       	ror	r27
     cfa:	f7 95       	ror	r31
     cfc:	9f 5f       	subi	r25, 0xFF	; 255
     cfe:	c9 f7       	brne	.-14     	; 0xcf2 <__divsf3_pse+0x78>
     d00:	88 0f       	add	r24, r24
     d02:	91 1d       	adc	r25, r1
     d04:	96 95       	lsr	r25
     d06:	87 95       	ror	r24
     d08:	97 f9       	bld	r25, 7
     d0a:	08 95       	ret
     d0c:	e1 e0       	ldi	r30, 0x01	; 1
     d0e:	66 0f       	add	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	88 1f       	adc	r24, r24
     d14:	bb 1f       	adc	r27, r27
     d16:	62 17       	cp	r22, r18
     d18:	73 07       	cpc	r23, r19
     d1a:	84 07       	cpc	r24, r20
     d1c:	ba 07       	cpc	r27, r26
     d1e:	20 f0       	brcs	.+8      	; 0xd28 <__divsf3_pse+0xae>
     d20:	62 1b       	sub	r22, r18
     d22:	73 0b       	sbc	r23, r19
     d24:	84 0b       	sbc	r24, r20
     d26:	ba 0b       	sbc	r27, r26
     d28:	ee 1f       	adc	r30, r30
     d2a:	88 f7       	brcc	.-30     	; 0xd0e <__divsf3_pse+0x94>
     d2c:	e0 95       	com	r30
     d2e:	08 95       	ret

00000d30 <__fixsfsi>:
     d30:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
     d34:	68 94       	set
     d36:	b1 11       	cpse	r27, r1
     d38:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_szero>
     d3c:	08 95       	ret

00000d3e <__fixunssfsi>:
     d3e:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_splitA>
     d42:	88 f0       	brcs	.+34     	; 0xd66 <__fixunssfsi+0x28>
     d44:	9f 57       	subi	r25, 0x7F	; 127
     d46:	98 f0       	brcs	.+38     	; 0xd6e <__fixunssfsi+0x30>
     d48:	b9 2f       	mov	r27, r25
     d4a:	99 27       	eor	r25, r25
     d4c:	b7 51       	subi	r27, 0x17	; 23
     d4e:	b0 f0       	brcs	.+44     	; 0xd7c <__fixunssfsi+0x3e>
     d50:	e1 f0       	breq	.+56     	; 0xd8a <__fixunssfsi+0x4c>
     d52:	66 0f       	add	r22, r22
     d54:	77 1f       	adc	r23, r23
     d56:	88 1f       	adc	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	1a f0       	brmi	.+6      	; 0xd62 <__fixunssfsi+0x24>
     d5c:	ba 95       	dec	r27
     d5e:	c9 f7       	brne	.-14     	; 0xd52 <__fixunssfsi+0x14>
     d60:	14 c0       	rjmp	.+40     	; 0xd8a <__fixunssfsi+0x4c>
     d62:	b1 30       	cpi	r27, 0x01	; 1
     d64:	91 f0       	breq	.+36     	; 0xd8a <__fixunssfsi+0x4c>
     d66:	0e 94 79 07 	call	0xef2	; 0xef2 <__fp_zero>
     d6a:	b1 e0       	ldi	r27, 0x01	; 1
     d6c:	08 95       	ret
     d6e:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_zero>
     d72:	67 2f       	mov	r22, r23
     d74:	78 2f       	mov	r23, r24
     d76:	88 27       	eor	r24, r24
     d78:	b8 5f       	subi	r27, 0xF8	; 248
     d7a:	39 f0       	breq	.+14     	; 0xd8a <__fixunssfsi+0x4c>
     d7c:	b9 3f       	cpi	r27, 0xF9	; 249
     d7e:	cc f3       	brlt	.-14     	; 0xd72 <__fixunssfsi+0x34>
     d80:	86 95       	lsr	r24
     d82:	77 95       	ror	r23
     d84:	67 95       	ror	r22
     d86:	b3 95       	inc	r27
     d88:	d9 f7       	brne	.-10     	; 0xd80 <__fixunssfsi+0x42>
     d8a:	3e f4       	brtc	.+14     	; 0xd9a <__fixunssfsi+0x5c>
     d8c:	90 95       	com	r25
     d8e:	80 95       	com	r24
     d90:	70 95       	com	r23
     d92:	61 95       	neg	r22
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	8f 4f       	sbci	r24, 0xFF	; 255
     d98:	9f 4f       	sbci	r25, 0xFF	; 255
     d9a:	08 95       	ret

00000d9c <__floatunsisf>:
     d9c:	e8 94       	clt
     d9e:	09 c0       	rjmp	.+18     	; 0xdb2 <__floatsisf+0x12>

00000da0 <__floatsisf>:
     da0:	97 fb       	bst	r25, 7
     da2:	3e f4       	brtc	.+14     	; 0xdb2 <__floatsisf+0x12>
     da4:	90 95       	com	r25
     da6:	80 95       	com	r24
     da8:	70 95       	com	r23
     daa:	61 95       	neg	r22
     dac:	7f 4f       	sbci	r23, 0xFF	; 255
     dae:	8f 4f       	sbci	r24, 0xFF	; 255
     db0:	9f 4f       	sbci	r25, 0xFF	; 255
     db2:	99 23       	and	r25, r25
     db4:	a9 f0       	breq	.+42     	; 0xde0 <__floatsisf+0x40>
     db6:	f9 2f       	mov	r31, r25
     db8:	96 e9       	ldi	r25, 0x96	; 150
     dba:	bb 27       	eor	r27, r27
     dbc:	93 95       	inc	r25
     dbe:	f6 95       	lsr	r31
     dc0:	87 95       	ror	r24
     dc2:	77 95       	ror	r23
     dc4:	67 95       	ror	r22
     dc6:	b7 95       	ror	r27
     dc8:	f1 11       	cpse	r31, r1
     dca:	f8 cf       	rjmp	.-16     	; 0xdbc <__floatsisf+0x1c>
     dcc:	fa f4       	brpl	.+62     	; 0xe0c <__floatsisf+0x6c>
     dce:	bb 0f       	add	r27, r27
     dd0:	11 f4       	brne	.+4      	; 0xdd6 <__floatsisf+0x36>
     dd2:	60 ff       	sbrs	r22, 0
     dd4:	1b c0       	rjmp	.+54     	; 0xe0c <__floatsisf+0x6c>
     dd6:	6f 5f       	subi	r22, 0xFF	; 255
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	8f 4f       	sbci	r24, 0xFF	; 255
     ddc:	9f 4f       	sbci	r25, 0xFF	; 255
     dde:	16 c0       	rjmp	.+44     	; 0xe0c <__floatsisf+0x6c>
     de0:	88 23       	and	r24, r24
     de2:	11 f0       	breq	.+4      	; 0xde8 <__floatsisf+0x48>
     de4:	96 e9       	ldi	r25, 0x96	; 150
     de6:	11 c0       	rjmp	.+34     	; 0xe0a <__floatsisf+0x6a>
     de8:	77 23       	and	r23, r23
     dea:	21 f0       	breq	.+8      	; 0xdf4 <__floatsisf+0x54>
     dec:	9e e8       	ldi	r25, 0x8E	; 142
     dee:	87 2f       	mov	r24, r23
     df0:	76 2f       	mov	r23, r22
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <__floatsisf+0x5e>
     df4:	66 23       	and	r22, r22
     df6:	71 f0       	breq	.+28     	; 0xe14 <__floatsisf+0x74>
     df8:	96 e8       	ldi	r25, 0x86	; 134
     dfa:	86 2f       	mov	r24, r22
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	2a f0       	brmi	.+10     	; 0xe0c <__floatsisf+0x6c>
     e02:	9a 95       	dec	r25
     e04:	66 0f       	add	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	88 1f       	adc	r24, r24
     e0a:	da f7       	brpl	.-10     	; 0xe02 <__floatsisf+0x62>
     e0c:	88 0f       	add	r24, r24
     e0e:	96 95       	lsr	r25
     e10:	87 95       	ror	r24
     e12:	97 f9       	bld	r25, 7
     e14:	08 95       	ret

00000e16 <__fp_cmp>:
     e16:	99 0f       	add	r25, r25
     e18:	00 08       	sbc	r0, r0
     e1a:	55 0f       	add	r21, r21
     e1c:	aa 0b       	sbc	r26, r26
     e1e:	e0 e8       	ldi	r30, 0x80	; 128
     e20:	fe ef       	ldi	r31, 0xFE	; 254
     e22:	16 16       	cp	r1, r22
     e24:	17 06       	cpc	r1, r23
     e26:	e8 07       	cpc	r30, r24
     e28:	f9 07       	cpc	r31, r25
     e2a:	c0 f0       	brcs	.+48     	; 0xe5c <__fp_cmp+0x46>
     e2c:	12 16       	cp	r1, r18
     e2e:	13 06       	cpc	r1, r19
     e30:	e4 07       	cpc	r30, r20
     e32:	f5 07       	cpc	r31, r21
     e34:	98 f0       	brcs	.+38     	; 0xe5c <__fp_cmp+0x46>
     e36:	62 1b       	sub	r22, r18
     e38:	73 0b       	sbc	r23, r19
     e3a:	84 0b       	sbc	r24, r20
     e3c:	95 0b       	sbc	r25, r21
     e3e:	39 f4       	brne	.+14     	; 0xe4e <__fp_cmp+0x38>
     e40:	0a 26       	eor	r0, r26
     e42:	61 f0       	breq	.+24     	; 0xe5c <__fp_cmp+0x46>
     e44:	23 2b       	or	r18, r19
     e46:	24 2b       	or	r18, r20
     e48:	25 2b       	or	r18, r21
     e4a:	21 f4       	brne	.+8      	; 0xe54 <__fp_cmp+0x3e>
     e4c:	08 95       	ret
     e4e:	0a 26       	eor	r0, r26
     e50:	09 f4       	brne	.+2      	; 0xe54 <__fp_cmp+0x3e>
     e52:	a1 40       	sbci	r26, 0x01	; 1
     e54:	a6 95       	lsr	r26
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	81 1d       	adc	r24, r1
     e5a:	81 1d       	adc	r24, r1
     e5c:	08 95       	ret

00000e5e <__fp_inf>:
     e5e:	97 f9       	bld	r25, 7
     e60:	9f 67       	ori	r25, 0x7F	; 127
     e62:	80 e8       	ldi	r24, 0x80	; 128
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	08 95       	ret

00000e6a <__fp_nan>:
     e6a:	9f ef       	ldi	r25, 0xFF	; 255
     e6c:	80 ec       	ldi	r24, 0xC0	; 192
     e6e:	08 95       	ret

00000e70 <__fp_pscA>:
     e70:	00 24       	eor	r0, r0
     e72:	0a 94       	dec	r0
     e74:	16 16       	cp	r1, r22
     e76:	17 06       	cpc	r1, r23
     e78:	18 06       	cpc	r1, r24
     e7a:	09 06       	cpc	r0, r25
     e7c:	08 95       	ret

00000e7e <__fp_pscB>:
     e7e:	00 24       	eor	r0, r0
     e80:	0a 94       	dec	r0
     e82:	12 16       	cp	r1, r18
     e84:	13 06       	cpc	r1, r19
     e86:	14 06       	cpc	r1, r20
     e88:	05 06       	cpc	r0, r21
     e8a:	08 95       	ret

00000e8c <__fp_round>:
     e8c:	09 2e       	mov	r0, r25
     e8e:	03 94       	inc	r0
     e90:	00 0c       	add	r0, r0
     e92:	11 f4       	brne	.+4      	; 0xe98 <__fp_round+0xc>
     e94:	88 23       	and	r24, r24
     e96:	52 f0       	brmi	.+20     	; 0xeac <__fp_round+0x20>
     e98:	bb 0f       	add	r27, r27
     e9a:	40 f4       	brcc	.+16     	; 0xeac <__fp_round+0x20>
     e9c:	bf 2b       	or	r27, r31
     e9e:	11 f4       	brne	.+4      	; 0xea4 <__fp_round+0x18>
     ea0:	60 ff       	sbrs	r22, 0
     ea2:	04 c0       	rjmp	.+8      	; 0xeac <__fp_round+0x20>
     ea4:	6f 5f       	subi	r22, 0xFF	; 255
     ea6:	7f 4f       	sbci	r23, 0xFF	; 255
     ea8:	8f 4f       	sbci	r24, 0xFF	; 255
     eaa:	9f 4f       	sbci	r25, 0xFF	; 255
     eac:	08 95       	ret

00000eae <__fp_split3>:
     eae:	57 fd       	sbrc	r21, 7
     eb0:	90 58       	subi	r25, 0x80	; 128
     eb2:	44 0f       	add	r20, r20
     eb4:	55 1f       	adc	r21, r21
     eb6:	59 f0       	breq	.+22     	; 0xece <__fp_splitA+0x10>
     eb8:	5f 3f       	cpi	r21, 0xFF	; 255
     eba:	71 f0       	breq	.+28     	; 0xed8 <__fp_splitA+0x1a>
     ebc:	47 95       	ror	r20

00000ebe <__fp_splitA>:
     ebe:	88 0f       	add	r24, r24
     ec0:	97 fb       	bst	r25, 7
     ec2:	99 1f       	adc	r25, r25
     ec4:	61 f0       	breq	.+24     	; 0xede <__fp_splitA+0x20>
     ec6:	9f 3f       	cpi	r25, 0xFF	; 255
     ec8:	79 f0       	breq	.+30     	; 0xee8 <__fp_splitA+0x2a>
     eca:	87 95       	ror	r24
     ecc:	08 95       	ret
     ece:	12 16       	cp	r1, r18
     ed0:	13 06       	cpc	r1, r19
     ed2:	14 06       	cpc	r1, r20
     ed4:	55 1f       	adc	r21, r21
     ed6:	f2 cf       	rjmp	.-28     	; 0xebc <__fp_split3+0xe>
     ed8:	46 95       	lsr	r20
     eda:	f1 df       	rcall	.-30     	; 0xebe <__fp_splitA>
     edc:	08 c0       	rjmp	.+16     	; 0xeee <__fp_splitA+0x30>
     ede:	16 16       	cp	r1, r22
     ee0:	17 06       	cpc	r1, r23
     ee2:	18 06       	cpc	r1, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	f1 cf       	rjmp	.-30     	; 0xeca <__fp_splitA+0xc>
     ee8:	86 95       	lsr	r24
     eea:	71 05       	cpc	r23, r1
     eec:	61 05       	cpc	r22, r1
     eee:	08 94       	sec
     ef0:	08 95       	ret

00000ef2 <__fp_zero>:
     ef2:	e8 94       	clt

00000ef4 <__fp_szero>:
     ef4:	bb 27       	eor	r27, r27
     ef6:	66 27       	eor	r22, r22
     ef8:	77 27       	eor	r23, r23
     efa:	cb 01       	movw	r24, r22
     efc:	97 f9       	bld	r25, 7
     efe:	08 95       	ret

00000f00 <__gesf2>:
     f00:	0e 94 0b 07 	call	0xe16	; 0xe16 <__fp_cmp>
     f04:	08 f4       	brcc	.+2      	; 0xf08 <__gesf2+0x8>
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	08 95       	ret

00000f0a <__mulsf3>:
     f0a:	0e 94 98 07 	call	0xf30	; 0xf30 <__mulsf3x>
     f0e:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__fp_round>
     f12:	0e 94 38 07 	call	0xe70	; 0xe70 <__fp_pscA>
     f16:	38 f0       	brcs	.+14     	; 0xf26 <__mulsf3+0x1c>
     f18:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_pscB>
     f1c:	20 f0       	brcs	.+8      	; 0xf26 <__mulsf3+0x1c>
     f1e:	95 23       	and	r25, r21
     f20:	11 f0       	breq	.+4      	; 0xf26 <__mulsf3+0x1c>
     f22:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>
     f26:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_nan>
     f2a:	11 24       	eor	r1, r1
     f2c:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_szero>

00000f30 <__mulsf3x>:
     f30:	0e 94 57 07 	call	0xeae	; 0xeae <__fp_split3>
     f34:	70 f3       	brcs	.-36     	; 0xf12 <__mulsf3+0x8>

00000f36 <__mulsf3_pse>:
     f36:	95 9f       	mul	r25, r21
     f38:	c1 f3       	breq	.-16     	; 0xf2a <__mulsf3+0x20>
     f3a:	95 0f       	add	r25, r21
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	55 1f       	adc	r21, r21
     f40:	62 9f       	mul	r22, r18
     f42:	f0 01       	movw	r30, r0
     f44:	72 9f       	mul	r23, r18
     f46:	bb 27       	eor	r27, r27
     f48:	f0 0d       	add	r31, r0
     f4a:	b1 1d       	adc	r27, r1
     f4c:	63 9f       	mul	r22, r19
     f4e:	aa 27       	eor	r26, r26
     f50:	f0 0d       	add	r31, r0
     f52:	b1 1d       	adc	r27, r1
     f54:	aa 1f       	adc	r26, r26
     f56:	64 9f       	mul	r22, r20
     f58:	66 27       	eor	r22, r22
     f5a:	b0 0d       	add	r27, r0
     f5c:	a1 1d       	adc	r26, r1
     f5e:	66 1f       	adc	r22, r22
     f60:	82 9f       	mul	r24, r18
     f62:	22 27       	eor	r18, r18
     f64:	b0 0d       	add	r27, r0
     f66:	a1 1d       	adc	r26, r1
     f68:	62 1f       	adc	r22, r18
     f6a:	73 9f       	mul	r23, r19
     f6c:	b0 0d       	add	r27, r0
     f6e:	a1 1d       	adc	r26, r1
     f70:	62 1f       	adc	r22, r18
     f72:	83 9f       	mul	r24, r19
     f74:	a0 0d       	add	r26, r0
     f76:	61 1d       	adc	r22, r1
     f78:	22 1f       	adc	r18, r18
     f7a:	74 9f       	mul	r23, r20
     f7c:	33 27       	eor	r19, r19
     f7e:	a0 0d       	add	r26, r0
     f80:	61 1d       	adc	r22, r1
     f82:	23 1f       	adc	r18, r19
     f84:	84 9f       	mul	r24, r20
     f86:	60 0d       	add	r22, r0
     f88:	21 1d       	adc	r18, r1
     f8a:	82 2f       	mov	r24, r18
     f8c:	76 2f       	mov	r23, r22
     f8e:	6a 2f       	mov	r22, r26
     f90:	11 24       	eor	r1, r1
     f92:	9f 57       	subi	r25, 0x7F	; 127
     f94:	50 40       	sbci	r21, 0x00	; 0
     f96:	9a f0       	brmi	.+38     	; 0xfbe <__mulsf3_pse+0x88>
     f98:	f1 f0       	breq	.+60     	; 0xfd6 <__mulsf3_pse+0xa0>
     f9a:	88 23       	and	r24, r24
     f9c:	4a f0       	brmi	.+18     	; 0xfb0 <__mulsf3_pse+0x7a>
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	bb 1f       	adc	r27, r27
     fa4:	66 1f       	adc	r22, r22
     fa6:	77 1f       	adc	r23, r23
     fa8:	88 1f       	adc	r24, r24
     faa:	91 50       	subi	r25, 0x01	; 1
     fac:	50 40       	sbci	r21, 0x00	; 0
     fae:	a9 f7       	brne	.-22     	; 0xf9a <__mulsf3_pse+0x64>
     fb0:	9e 3f       	cpi	r25, 0xFE	; 254
     fb2:	51 05       	cpc	r21, r1
     fb4:	80 f0       	brcs	.+32     	; 0xfd6 <__mulsf3_pse+0xa0>
     fb6:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>
     fba:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_szero>
     fbe:	5f 3f       	cpi	r21, 0xFF	; 255
     fc0:	e4 f3       	brlt	.-8      	; 0xfba <__mulsf3_pse+0x84>
     fc2:	98 3e       	cpi	r25, 0xE8	; 232
     fc4:	d4 f3       	brlt	.-12     	; 0xfba <__mulsf3_pse+0x84>
     fc6:	86 95       	lsr	r24
     fc8:	77 95       	ror	r23
     fca:	67 95       	ror	r22
     fcc:	b7 95       	ror	r27
     fce:	f7 95       	ror	r31
     fd0:	e7 95       	ror	r30
     fd2:	9f 5f       	subi	r25, 0xFF	; 255
     fd4:	c1 f7       	brne	.-16     	; 0xfc6 <__mulsf3_pse+0x90>
     fd6:	fe 2b       	or	r31, r30
     fd8:	88 0f       	add	r24, r24
     fda:	91 1d       	adc	r25, r1
     fdc:	96 95       	lsr	r25
     fde:	87 95       	ror	r24
     fe0:	97 f9       	bld	r25, 7
     fe2:	08 95       	ret

00000fe4 <__divmodsi4>:
     fe4:	05 2e       	mov	r0, r21
     fe6:	97 fb       	bst	r25, 7
     fe8:	1e f4       	brtc	.+6      	; 0xff0 <__divmodsi4+0xc>
     fea:	00 94       	com	r0
     fec:	0e 94 09 08 	call	0x1012	; 0x1012 <__negsi2>
     ff0:	57 fd       	sbrc	r21, 7
     ff2:	07 d0       	rcall	.+14     	; 0x1002 <__divmodsi4_neg2>
     ff4:	0e 94 11 08 	call	0x1022	; 0x1022 <__udivmodsi4>
     ff8:	07 fc       	sbrc	r0, 7
     ffa:	03 d0       	rcall	.+6      	; 0x1002 <__divmodsi4_neg2>
     ffc:	4e f4       	brtc	.+18     	; 0x1010 <__divmodsi4_exit>
     ffe:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__negsi2>

00001002 <__divmodsi4_neg2>:
    1002:	50 95       	com	r21
    1004:	40 95       	com	r20
    1006:	30 95       	com	r19
    1008:	21 95       	neg	r18
    100a:	3f 4f       	sbci	r19, 0xFF	; 255
    100c:	4f 4f       	sbci	r20, 0xFF	; 255
    100e:	5f 4f       	sbci	r21, 0xFF	; 255

00001010 <__divmodsi4_exit>:
    1010:	08 95       	ret

00001012 <__negsi2>:
    1012:	90 95       	com	r25
    1014:	80 95       	com	r24
    1016:	70 95       	com	r23
    1018:	61 95       	neg	r22
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	8f 4f       	sbci	r24, 0xFF	; 255
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	08 95       	ret

00001022 <__udivmodsi4>:
    1022:	a1 e2       	ldi	r26, 0x21	; 33
    1024:	1a 2e       	mov	r1, r26
    1026:	aa 1b       	sub	r26, r26
    1028:	bb 1b       	sub	r27, r27
    102a:	fd 01       	movw	r30, r26
    102c:	0d c0       	rjmp	.+26     	; 0x1048 <__udivmodsi4_ep>

0000102e <__udivmodsi4_loop>:
    102e:	aa 1f       	adc	r26, r26
    1030:	bb 1f       	adc	r27, r27
    1032:	ee 1f       	adc	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	a2 17       	cp	r26, r18
    1038:	b3 07       	cpc	r27, r19
    103a:	e4 07       	cpc	r30, r20
    103c:	f5 07       	cpc	r31, r21
    103e:	20 f0       	brcs	.+8      	; 0x1048 <__udivmodsi4_ep>
    1040:	a2 1b       	sub	r26, r18
    1042:	b3 0b       	sbc	r27, r19
    1044:	e4 0b       	sbc	r30, r20
    1046:	f5 0b       	sbc	r31, r21

00001048 <__udivmodsi4_ep>:
    1048:	66 1f       	adc	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	1a 94       	dec	r1
    1052:	69 f7       	brne	.-38     	; 0x102e <__udivmodsi4_loop>
    1054:	60 95       	com	r22
    1056:	70 95       	com	r23
    1058:	80 95       	com	r24
    105a:	90 95       	com	r25
    105c:	9b 01       	movw	r18, r22
    105e:	ac 01       	movw	r20, r24
    1060:	bd 01       	movw	r22, r26
    1062:	cf 01       	movw	r24, r30
    1064:	08 95       	ret

00001066 <itoa>:
    1066:	45 32       	cpi	r20, 0x25	; 37
    1068:	51 05       	cpc	r21, r1
    106a:	20 f4       	brcc	.+8      	; 0x1074 <itoa+0xe>
    106c:	42 30       	cpi	r20, 0x02	; 2
    106e:	10 f0       	brcs	.+4      	; 0x1074 <itoa+0xe>
    1070:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__itoa_ncheck>
    1074:	fb 01       	movw	r30, r22
    1076:	10 82       	st	Z, r1
    1078:	cb 01       	movw	r24, r22
    107a:	08 95       	ret

0000107c <__itoa_ncheck>:
    107c:	bb 27       	eor	r27, r27
    107e:	4a 30       	cpi	r20, 0x0A	; 10
    1080:	31 f4       	brne	.+12     	; 0x108e <__itoa_ncheck+0x12>
    1082:	99 23       	and	r25, r25
    1084:	22 f4       	brpl	.+8      	; 0x108e <__itoa_ncheck+0x12>
    1086:	bd e2       	ldi	r27, 0x2D	; 45
    1088:	90 95       	com	r25
    108a:	81 95       	neg	r24
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__utoa_common>

00001092 <__utoa_ncheck>:
    1092:	bb 27       	eor	r27, r27

00001094 <__utoa_common>:
    1094:	fb 01       	movw	r30, r22
    1096:	55 27       	eor	r21, r21
    1098:	aa 27       	eor	r26, r26
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	aa 1f       	adc	r26, r26
    10a0:	a4 17       	cp	r26, r20
    10a2:	10 f0       	brcs	.+4      	; 0x10a8 <__utoa_common+0x14>
    10a4:	a4 1b       	sub	r26, r20
    10a6:	83 95       	inc	r24
    10a8:	50 51       	subi	r21, 0x10	; 16
    10aa:	b9 f7       	brne	.-18     	; 0x109a <__utoa_common+0x6>
    10ac:	a0 5d       	subi	r26, 0xD0	; 208
    10ae:	aa 33       	cpi	r26, 0x3A	; 58
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <__utoa_common+0x20>
    10b2:	a9 5d       	subi	r26, 0xD9	; 217
    10b4:	a1 93       	st	Z+, r26
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	79 f7       	brne	.-34     	; 0x1098 <__utoa_common+0x4>
    10ba:	b1 11       	cpse	r27, r1
    10bc:	b1 93       	st	Z+, r27
    10be:	11 92       	st	Z+, r1
    10c0:	cb 01       	movw	r24, r22
    10c2:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <strrev>

000010c6 <strrev>:
    10c6:	dc 01       	movw	r26, r24
    10c8:	fc 01       	movw	r30, r24
    10ca:	67 2f       	mov	r22, r23
    10cc:	71 91       	ld	r23, Z+
    10ce:	77 23       	and	r23, r23
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <strrev+0x4>
    10d2:	32 97       	sbiw	r30, 0x02	; 2
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <strrev+0x18>
    10d6:	7c 91       	ld	r23, X
    10d8:	6d 93       	st	X+, r22
    10da:	70 83       	st	Z, r23
    10dc:	62 91       	ld	r22, -Z
    10de:	ae 17       	cp	r26, r30
    10e0:	bf 07       	cpc	r27, r31
    10e2:	c8 f3       	brcs	.-14     	; 0x10d6 <strrev+0x10>
    10e4:	08 95       	ret

000010e6 <eeprom_read_word>:
    10e6:	a8 e1       	ldi	r26, 0x18	; 24
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	42 e0       	ldi	r20, 0x02	; 2
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	0c 94 80 08 	jmp	0x1100	; 0x1100 <eeprom_read_blraw>

000010f2 <eeprom_write_word>:
    10f2:	0e 94 8e 08 	call	0x111c	; 0x111c <eeprom_write_byte>
    10f6:	27 2f       	mov	r18, r23
    10f8:	0c 94 8f 08 	jmp	0x111e	; 0x111e <eeprom_write_r18>

000010fc <eeprom_read_block>:
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22

00001100 <eeprom_read_blraw>:
    1100:	fc 01       	movw	r30, r24
    1102:	f9 99       	sbic	0x1f, 1	; 31
    1104:	fe cf       	rjmp	.-4      	; 0x1102 <eeprom_read_blraw+0x2>
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <eeprom_read_blraw+0x14>
    1108:	f2 bd       	out	0x22, r31	; 34
    110a:	e1 bd       	out	0x21, r30	; 33
    110c:	f8 9a       	sbi	0x1f, 0	; 31
    110e:	31 96       	adiw	r30, 0x01	; 1
    1110:	00 b4       	in	r0, 0x20	; 32
    1112:	0d 92       	st	X+, r0
    1114:	41 50       	subi	r20, 0x01	; 1
    1116:	50 40       	sbci	r21, 0x00	; 0
    1118:	b8 f7       	brcc	.-18     	; 0x1108 <eeprom_read_blraw+0x8>
    111a:	08 95       	ret

0000111c <eeprom_write_byte>:
    111c:	26 2f       	mov	r18, r22

0000111e <eeprom_write_r18>:
    111e:	f9 99       	sbic	0x1f, 1	; 31
    1120:	fe cf       	rjmp	.-4      	; 0x111e <eeprom_write_r18>
    1122:	1f ba       	out	0x1f, r1	; 31
    1124:	92 bd       	out	0x22, r25	; 34
    1126:	81 bd       	out	0x21, r24	; 33
    1128:	20 bd       	out	0x20, r18	; 32
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	fa 9a       	sbi	0x1f, 2	; 31
    1130:	f9 9a       	sbi	0x1f, 1	; 31
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	08 95       	ret

00001138 <_exit>:
    1138:	f8 94       	cli

0000113a <__stop_program>:
    113a:	ff cf       	rjmp	.-2      	; 0x113a <__stop_program>

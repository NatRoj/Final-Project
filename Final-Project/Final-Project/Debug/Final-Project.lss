
Final-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ac  00800100  0000122c  000012c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000122c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008004ac  008004ac  0000166c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000016e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000230b  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000903  00000000  00000000  00003b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000117b  00000000  00000000  00004456  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  000055d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000743  00000000  00000000  000058d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001400  00000000  00000000  00006013  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00007413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e2       	ldi	r30, 0x2C	; 44
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3a       	cpi	r26, 0xAC	; 172
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	ac ea       	ldi	r26, 0xAC	; 172
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3c       	cpi	r26, 0xC6	; 198
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a9 03 	call	0x752	; 0x752 <main>
      9e:	0c 94 14 09 	jmp	0x1228	; 0x1228 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCDBusyLoop>:
	// Humidity average
	DHT11Data[0] = bufferRH / DHT_NR_OF_SAMPLES;
	
	// Temperature average
	DHT11Data[2] = (bufferTemp / DHT_NR_OF_SAMPLES) + DHT_TEMP_ERROR_OFFSET;
}
      a6:	87 b1       	in	r24, 0x07	; 7
      a8:	83 7c       	andi	r24, 0xC3	; 195
      aa:	87 b9       	out	0x07, r24	; 7
      ac:	8b b1       	in	r24, 0x0b	; 11
      ae:	88 60       	ori	r24, 0x08	; 8
      b0:	8b b9       	out	0x0b, r24	; 11
      b2:	8b b1       	in	r24, 0x0b	; 11
      b4:	8b 7f       	andi	r24, 0xFB	; 251
      b6:	8b b9       	out	0x0b, r24	; 11
      b8:	8b b1       	in	r24, 0x0b	; 11
      ba:	80 61       	ori	r24, 0x10	; 16
      bc:	8b b9       	out	0x0b, r24	; 11
      be:	85 e0       	ldi	r24, 0x05	; 5
      c0:	98 2f       	mov	r25, r24
      c2:	9a 95       	dec	r25
      c4:	f1 f7       	brne	.-4      	; 0xc2 <LCDBusyLoop+0x1c>
      c6:	96 b1       	in	r25, 0x06	; 6
      c8:	96 95       	lsr	r25
      ca:	96 95       	lsr	r25
      cc:	92 95       	swap	r25
      ce:	90 7f       	andi	r25, 0xF0	; 240
      d0:	2b b1       	in	r18, 0x0b	; 11
      d2:	2f 7e       	andi	r18, 0xEF	; 239
      d4:	2b b9       	out	0x0b, r18	; 11
      d6:	28 2f       	mov	r18, r24
      d8:	2a 95       	dec	r18
      da:	f1 f7       	brne	.-4      	; 0xd8 <LCDBusyLoop+0x32>
      dc:	2b b1       	in	r18, 0x0b	; 11
      de:	20 61       	ori	r18, 0x10	; 16
      e0:	2b b9       	out	0x0b, r18	; 11
      e2:	28 2f       	mov	r18, r24
      e4:	2a 95       	dec	r18
      e6:	f1 f7       	brne	.-4      	; 0xe4 <LCDBusyLoop+0x3e>
      e8:	2b b1       	in	r18, 0x0b	; 11
      ea:	2f 7e       	andi	r18, 0xEF	; 239
      ec:	2b b9       	out	0x0b, r18	; 11
      ee:	8a 95       	dec	r24
      f0:	f1 f7       	brne	.-4      	; 0xee <LCDBusyLoop+0x48>
      f2:	99 23       	and	r25, r25
      f4:	0c f3       	brlt	.-62     	; 0xb8 <LCDBusyLoop+0x12>
      f6:	8b b1       	in	r24, 0x0b	; 11
      f8:	87 7f       	andi	r24, 0xF7	; 247
      fa:	8b b9       	out	0x0b, r24	; 11
      fc:	8b b1       	in	r24, 0x0b	; 11
      fe:	84 60       	ori	r24, 0x04	; 4
     100:	8b b9       	out	0x0b, r24	; 11
     102:	87 b1       	in	r24, 0x07	; 7
     104:	8c 63       	ori	r24, 0x3C	; 60
     106:	87 b9       	out	0x07, r24	; 7
     108:	08 95       	ret

0000010a <FlashEnable>:
     10a:	8b b1       	in	r24, 0x0b	; 11
     10c:	80 61       	ori	r24, 0x10	; 16
     10e:	8b b9       	out	0x0b, r24	; 11
     110:	88 ec       	ldi	r24, 0xC8	; 200
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	01 97       	sbiw	r24, 0x01	; 1
     116:	f1 f7       	brne	.-4      	; 0x114 <FlashEnable+0xa>
     118:	8b b1       	in	r24, 0x0b	; 11
     11a:	8f 7e       	andi	r24, 0xEF	; 239
     11c:	8b b9       	out	0x0b, r24	; 11
     11e:	08 95       	ret

00000120 <LCDByte>:
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	c8 2f       	mov	r28, r24
     126:	d6 2f       	mov	r29, r22
     128:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
     12c:	d1 11       	cpse	r29, r1
     12e:	0d c0       	rjmp	.+26     	; 0x14a <LCDByte+0x2a>
     130:	8b b1       	in	r24, 0x0b	; 11
     132:	8b 7f       	andi	r24, 0xFB	; 251
     134:	8b b9       	out	0x0b, r24	; 11
     136:	c0 38       	cpi	r28, 0x80	; 128
     138:	11 f0       	breq	.+4      	; 0x13e <LCDByte+0x1e>
     13a:	c1 30       	cpi	r28, 0x01	; 1
     13c:	71 f4       	brne	.+28     	; 0x15a <LCDByte+0x3a>
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <cursorPosition>
     144:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <cursorLine>
     148:	08 c0       	rjmp	.+16     	; 0x15a <LCDByte+0x3a>
     14a:	8b b1       	in	r24, 0x0b	; 11
     14c:	84 60       	ori	r24, 0x04	; 4
     14e:	8b b9       	out	0x0b, r24	; 11
     150:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <cursorPosition>
     154:	8f 5f       	subi	r24, 0xFF	; 255
     156:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <cursorPosition>
     15a:	8b b1       	in	r24, 0x0b	; 11
     15c:	87 7f       	andi	r24, 0xF7	; 247
     15e:	8b b9       	out	0x0b, r24	; 11
     160:	9c 2f       	mov	r25, r28
     162:	90 7f       	andi	r25, 0xF0	; 240
     164:	28 b1       	in	r18, 0x08	; 8
     166:	89 2f       	mov	r24, r25
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	95 95       	asr	r25
     16c:	87 95       	ror	r24
     16e:	95 95       	asr	r25
     170:	87 95       	ror	r24
     172:	82 2b       	or	r24, r18
     174:	88 b9       	out	0x08, r24	; 8
     176:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     17a:	88 b1       	in	r24, 0x08	; 8
     17c:	83 7c       	andi	r24, 0xC3	; 195
     17e:	88 b9       	out	0x08, r24	; 8
     180:	20 e1       	ldi	r18, 0x10	; 16
     182:	c2 9f       	mul	r28, r18
     184:	c0 01       	movw	r24, r0
     186:	11 24       	eor	r1, r1
     188:	28 b1       	in	r18, 0x08	; 8
     18a:	99 27       	eor	r25, r25
     18c:	95 95       	asr	r25
     18e:	87 95       	ror	r24
     190:	95 95       	asr	r25
     192:	87 95       	ror	r24
     194:	82 2b       	or	r24, r18
     196:	88 b9       	out	0x08, r24	; 8
     198:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     19c:	88 b1       	in	r24, 0x08	; 8
     19e:	83 7c       	andi	r24, 0xC3	; 195
     1a0:	88 b9       	out	0x08, r24	; 8
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <LCDGotoXY>:
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	c8 2f       	mov	r28, r24
     1ae:	d6 2f       	mov	r29, r22
     1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	8c 0f       	add	r24, r28
     1b8:	8e 3f       	cpi	r24, 0xFE	; 254
     1ba:	08 f0       	brcs	.+2      	; 0x1be <LCDGotoXY+0x16>
     1bc:	c1 e0       	ldi	r28, 0x01	; 1
     1be:	c0 93 09 01 	sts	0x0109, r28	; 0x800109 <cursorPosition>
     1c2:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <cursorLine>
     1c6:	d2 30       	cpi	r29, 0x02	; 2
     1c8:	41 f0       	breq	.+16     	; 0x1da <LCDGotoXY+0x32>
     1ca:	28 f0       	brcs	.+10     	; 0x1d6 <LCDGotoXY+0x2e>
     1cc:	d4 30       	cpi	r29, 0x04	; 4
     1ce:	49 f0       	breq	.+18     	; 0x1e2 <LCDGotoXY+0x3a>
     1d0:	30 f0       	brcs	.+12     	; 0x1de <LCDGotoXY+0x36>
     1d2:	df 3f       	cpi	r29, 0xFF	; 255
     1d4:	39 f4       	brne	.+14     	; 0x1e4 <LCDGotoXY+0x3c>
     1d6:	c1 50       	subi	r28, 0x01	; 1
     1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <LCDGotoXY+0x3c>
     1da:	c1 5c       	subi	r28, 0xC1	; 193
     1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <LCDGotoXY+0x3c>
     1de:	c1 5f       	subi	r28, 0xF1	; 241
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <LCDGotoXY+0x3c>
     1e2:	c1 5b       	subi	r28, 0xB1	; 177
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	8c 2f       	mov	r24, r28
     1e8:	80 68       	ori	r24, 0x80	; 128
     1ea:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <LCDWriteString>:
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	ec 01       	movw	r28, r24
     1fe:	01 e0       	ldi	r16, 0x01	; 1
     200:	11 e0       	ldi	r17, 0x01	; 1
     202:	19 c0       	rjmp	.+50     	; 0x236 <LCDWriteString+0x42>
     204:	11 31       	cpi	r17, 0x11	; 17
     206:	90 f0       	brcs	.+36     	; 0x22c <LCDWriteString+0x38>
     208:	01 30       	cpi	r16, 0x01	; 1
     20a:	29 f4       	brne	.+10     	; 0x216 <LCDWriteString+0x22>
     20c:	62 e0       	ldi	r22, 0x02	; 2
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDGotoXY>
     214:	02 e0       	ldi	r16, 0x02	; 2
     216:	02 30       	cpi	r16, 0x02	; 2
     218:	30 f0       	brcs	.+12     	; 0x226 <LCDWriteString+0x32>
     21a:	88 81       	ld	r24, Y
     21c:	80 32       	cpi	r24, 0x20	; 32
     21e:	29 f4       	brne	.+10     	; 0x22a <LCDWriteString+0x36>
     220:	21 96       	adiw	r28, 0x01	; 1
     222:	11 e0       	ldi	r17, 0x01	; 1
     224:	03 c0       	rjmp	.+6      	; 0x22c <LCDWriteString+0x38>
     226:	11 e0       	ldi	r17, 0x01	; 1
     228:	01 c0       	rjmp	.+2      	; 0x22c <LCDWriteString+0x38>
     22a:	11 e0       	ldi	r17, 0x01	; 1
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	89 91       	ld	r24, Y+
     230:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     234:	1f 5f       	subi	r17, 0xFF	; 255
     236:	88 81       	ld	r24, Y
     238:	81 11       	cpse	r24, r1
     23a:	e4 cf       	rjmp	.-56     	; 0x204 <LCDWriteString+0x10>
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	08 95       	ret

00000246 <LCDWriteInt>:
     246:	8f 92       	push	r8
     248:	9f 92       	push	r9
     24a:	af 92       	push	r10
     24c:	bf 92       	push	r11
     24e:	df 92       	push	r13
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
     260:	2a 97       	sbiw	r28, 0x0a	; 10
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	4b 01       	movw	r8, r22
     26e:	5c 01       	movw	r10, r24
     270:	14 2f       	mov	r17, r20
     272:	fe 01       	movw	r30, r28
     274:	31 96       	adiw	r30, 0x01	; 1
     276:	8a e0       	ldi	r24, 0x0A	; 10
     278:	df 01       	movw	r26, r30
     27a:	1d 92       	st	X+, r1
     27c:	8a 95       	dec	r24
     27e:	e9 f7       	brne	.-6      	; 0x27a <LCDWriteInt+0x34>
     280:	81 14       	cp	r8, r1
     282:	91 04       	cpc	r9, r1
     284:	a1 04       	cpc	r10, r1
     286:	b1 04       	cpc	r11, r1
     288:	11 f0       	breq	.+4      	; 0x28e <LCDWriteInt+0x48>
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	01 c0       	rjmp	.+2      	; 0x290 <LCDWriteInt+0x4a>
     28e:	01 e0       	ldi	r16, 0x01	; 1
     290:	a5 01       	movw	r20, r10
     292:	94 01       	movw	r18, r8
     294:	09 c0       	rjmp	.+18     	; 0x2a8 <LCDWriteInt+0x62>
     296:	0f 5f       	subi	r16, 0xFF	; 255
     298:	ca 01       	movw	r24, r20
     29a:	b9 01       	movw	r22, r18
     29c:	2a e0       	ldi	r18, 0x0A	; 10
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__divmodsi4>
     2a8:	21 15       	cp	r18, r1
     2aa:	31 05       	cpc	r19, r1
     2ac:	41 05       	cpc	r20, r1
     2ae:	51 05       	cpc	r21, r1
     2b0:	91 f7       	brne	.-28     	; 0x296 <LCDWriteInt+0x50>
     2b2:	10 1b       	sub	r17, r16
     2b4:	0a f4       	brpl	.+2      	; 0x2b8 <LCDWriteInt+0x72>
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	bb 20       	and	r11, r11
     2ba:	64 f4       	brge	.+24     	; 0x2d4 <LCDWriteInt+0x8e>
     2bc:	b0 94       	com	r11
     2be:	a0 94       	com	r10
     2c0:	90 94       	com	r9
     2c2:	80 94       	com	r8
     2c4:	81 1c       	adc	r8, r1
     2c6:	91 1c       	adc	r9, r1
     2c8:	a1 1c       	adc	r10, r1
     2ca:	b1 1c       	adc	r11, r1
     2cc:	0f 5f       	subi	r16, 0xFF	; 255
     2ce:	dd 24       	eor	r13, r13
     2d0:	d3 94       	inc	r13
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <LCDWriteInt+0x90>
     2d4:	d1 2c       	mov	r13, r1
     2d6:	10 0f       	add	r17, r16
     2d8:	22 c0       	rjmp	.+68     	; 0x31e <LCDWriteInt+0xd8>
     2da:	1a 30       	cpi	r17, 0x0A	; 10
     2dc:	a8 f4       	brcc	.+42     	; 0x308 <LCDWriteInt+0xc2>
     2de:	e1 2e       	mov	r14, r17
     2e0:	f1 2c       	mov	r15, r1
     2e2:	b1 e0       	ldi	r27, 0x01	; 1
     2e4:	eb 1a       	sub	r14, r27
     2e6:	f1 08       	sbc	r15, r1
     2e8:	c5 01       	movw	r24, r10
     2ea:	b4 01       	movw	r22, r8
     2ec:	2a e0       	ldi	r18, 0x0A	; 10
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__divmodsi4>
     2f8:	e1 e0       	ldi	r30, 0x01	; 1
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	ec 0f       	add	r30, r28
     2fe:	fd 1f       	adc	r31, r29
     300:	ee 0d       	add	r30, r14
     302:	ff 1d       	adc	r31, r15
     304:	60 5d       	subi	r22, 0xD0	; 208
     306:	60 83       	st	Z, r22
     308:	c5 01       	movw	r24, r10
     30a:	b4 01       	movw	r22, r8
     30c:	2a e0       	ldi	r18, 0x0A	; 10
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__divmodsi4>
     318:	49 01       	movw	r8, r18
     31a:	5a 01       	movw	r10, r20
     31c:	11 50       	subi	r17, 0x01	; 1
     31e:	11 11       	cpse	r17, r1
     320:	dc cf       	rjmp	.-72     	; 0x2da <LCDWriteInt+0x94>
     322:	dd 20       	and	r13, r13
     324:	11 f0       	breq	.+4      	; 0x32a <LCDWriteInt+0xe4>
     326:	8d e2       	ldi	r24, 0x2D	; 45
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	ce 01       	movw	r24, r28
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     332:	2a 96       	adiw	r28, 0x0a	; 10
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	df 90       	pop	r13
     34c:	bf 90       	pop	r11
     34e:	af 90       	pop	r10
     350:	9f 90       	pop	r9
     352:	8f 90       	pop	r8
     354:	08 95       	ret

00000356 <LCDSetup>:
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	f8 2e       	mov	r15, r24
     362:	88 ee       	ldi	r24, 0xE8	; 232
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	05 c0       	rjmp	.+10     	; 0x372 <LCDSetup+0x1c>
     368:	e0 e9       	ldi	r30, 0x90	; 144
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <LCDSetup+0x16>
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	c9 f7       	brne	.-14     	; 0x368 <LCDSetup+0x12>
     376:	87 b1       	in	r24, 0x07	; 7
     378:	8c 63       	ori	r24, 0x3C	; 60
     37a:	87 b9       	out	0x07, r24	; 7
     37c:	88 b1       	in	r24, 0x08	; 8
     37e:	83 7c       	andi	r24, 0xC3	; 195
     380:	88 b9       	out	0x08, r24	; 8
     382:	8a b1       	in	r24, 0x0a	; 10
     384:	84 60       	ori	r24, 0x04	; 4
     386:	8a b9       	out	0x0a, r24	; 10
     388:	8a b1       	in	r24, 0x0a	; 10
     38a:	88 60       	ori	r24, 0x08	; 8
     38c:	8a b9       	out	0x0a, r24	; 10
     38e:	8a b1       	in	r24, 0x0a	; 10
     390:	8c 61       	ori	r24, 0x1C	; 28
     392:	8a b9       	out	0x0a, r24	; 10
     394:	8b b1       	in	r24, 0x0b	; 11
     396:	8f 7e       	andi	r24, 0xEF	; 239
     398:	8b b9       	out	0x0b, r24	; 11
     39a:	8b b1       	in	r24, 0x0b	; 11
     39c:	87 7f       	andi	r24, 0xF7	; 247
     39e:	8b b9       	out	0x0b, r24	; 11
     3a0:	8b b1       	in	r24, 0x0b	; 11
     3a2:	8b 7f       	andi	r24, 0xFB	; 251
     3a4:	8b b9       	out	0x0b, r24	; 11
     3a6:	88 b1       	in	r24, 0x08	; 8
     3a8:	8c 60       	ori	r24, 0x0C	; 12
     3aa:	88 b9       	out	0x08, r24	; 8
     3ac:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     3b0:	88 b1       	in	r24, 0x08	; 8
     3b2:	83 7c       	andi	r24, 0xC3	; 195
     3b4:	88 b9       	out	0x08, r24	; 8
     3b6:	00 e4       	ldi	r16, 0x40	; 64
     3b8:	1c e9       	ldi	r17, 0x9C	; 156
     3ba:	c8 01       	movw	r24, r16
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <LCDSetup+0x66>
     3c0:	88 b1       	in	r24, 0x08	; 8
     3c2:	8c 60       	ori	r24, 0x0C	; 12
     3c4:	88 b9       	out	0x08, r24	; 8
     3c6:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     3ca:	88 b1       	in	r24, 0x08	; 8
     3cc:	83 7c       	andi	r24, 0xC3	; 195
     3ce:	88 b9       	out	0x08, r24	; 8
     3d0:	c0 ea       	ldi	r28, 0xA0	; 160
     3d2:	df e0       	ldi	r29, 0x0F	; 15
     3d4:	ce 01       	movw	r24, r28
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <LCDSetup+0x80>
     3da:	88 b1       	in	r24, 0x08	; 8
     3dc:	8c 60       	ori	r24, 0x0C	; 12
     3de:	88 b9       	out	0x08, r24	; 8
     3e0:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     3e4:	88 b1       	in	r24, 0x08	; 8
     3e6:	83 7c       	andi	r24, 0xC3	; 195
     3e8:	88 b9       	out	0x08, r24	; 8
     3ea:	ce 01       	movw	r24, r28
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCDSetup+0x96>
     3f0:	88 b1       	in	r24, 0x08	; 8
     3f2:	88 60       	ori	r24, 0x08	; 8
     3f4:	88 b9       	out	0x08, r24	; 8
     3f6:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     3fa:	88 b1       	in	r24, 0x08	; 8
     3fc:	83 7c       	andi	r24, 0xC3	; 195
     3fe:	88 b9       	out	0x08, r24	; 8
     400:	ce 01       	movw	r24, r28
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     406:	88 b1       	in	r24, 0x08	; 8
     408:	88 60       	ori	r24, 0x08	; 8
     40a:	88 b9       	out	0x08, r24	; 8
     40c:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     410:	88 b1       	in	r24, 0x08	; 8
     412:	83 7c       	andi	r24, 0xC3	; 195
     414:	88 b9       	out	0x08, r24	; 8
     416:	ce 01       	movw	r24, r28
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     41c:	88 b1       	in	r24, 0x08	; 8
     41e:	80 62       	ori	r24, 0x20	; 32
     420:	88 b9       	out	0x08, r24	; 8
     422:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     426:	88 b1       	in	r24, 0x08	; 8
     428:	83 7c       	andi	r24, 0xC3	; 195
     42a:	88 b9       	out	0x08, r24	; 8
     42c:	ce 01       	movw	r24, r28
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     432:	88 b1       	in	r24, 0x08	; 8
     434:	84 60       	ori	r24, 0x04	; 4
     436:	88 b9       	out	0x08, r24	; 8
     438:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     43c:	88 b1       	in	r24, 0x08	; 8
     43e:	83 7c       	andi	r24, 0xC3	; 195
     440:	88 b9       	out	0x08, r24	; 8
     442:	80 e2       	ldi	r24, 0x20	; 32
     444:	9e e4       	ldi	r25, 0x4E	; 78
     446:	01 97       	sbiw	r24, 0x01	; 1
     448:	f1 f7       	brne	.-4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     44a:	88 b1       	in	r24, 0x08	; 8
     44c:	88 61       	ori	r24, 0x18	; 24
     44e:	88 b9       	out	0x08, r24	; 8
     450:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     454:	88 b1       	in	r24, 0x08	; 8
     456:	83 7c       	andi	r24, 0xC3	; 195
     458:	88 b9       	out	0x08, r24	; 8
     45a:	ce 01       	movw	r24, r28
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     460:	88 b1       	in	r24, 0x08	; 8
     462:	80 63       	ori	r24, 0x30	; 48
     464:	88 b9       	out	0x08, r24	; 8
     466:	21 97       	sbiw	r28, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     46a:	88 b1       	in	r24, 0x08	; 8
     46c:	83 7c       	andi	r24, 0xC3	; 195
     46e:	88 b9       	out	0x08, r24	; 8
     470:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     474:	88 b1       	in	r24, 0x08	; 8
     476:	88 60       	ori	r24, 0x08	; 8
     478:	88 b9       	out	0x08, r24	; 8
     47a:	0e 94 85 00 	call	0x10a	; 0x10a <FlashEnable>
     47e:	88 b1       	in	r24, 0x08	; 8
     480:	83 7c       	andi	r24, 0xC3	; 195
     482:	88 b9       	out	0x08, r24	; 8
     484:	c8 01       	movw	r24, r16
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	8f 2d       	mov	r24, r15
     48e:	8c 60       	ori	r24, 0x0C	; 12
     490:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	80 e8       	ldi	r24, 0x80	; 128
     4a0:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	08 95       	ret

000004b0 <DHT11Setup>:
     4b0:	80 e2       	ldi	r24, 0x20	; 32
     4b2:	9e e4       	ldi	r25, 0x4E	; 78
     4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <DHT11Setup+0x10>
     4b6:	e0 e9       	ldi	r30, 0x90	; 144
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <DHT11Setup+0xa>
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	c9 f7       	brne	.-14     	; 0x4b6 <DHT11Setup+0x6>
     4c4:	84 b1       	in	r24, 0x04	; 4
     4c6:	81 60       	ori	r24, 0x01	; 1
     4c8:	84 b9       	out	0x04, r24	; 4
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <__data_end>
     4d0:	08 95       	ret

000004d2 <DHT11DisplayTemperatureF>:
     4d2:	8e e0       	ldi	r24, 0x0E	; 14
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     4da:	60 91 af 04 	lds	r22, 0x04AF	; 0x8004af <DHT11Data+0x2>
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 48 07 	call	0xe90	; 0xe90 <__floatsisf>
     4e8:	26 e6       	ldi	r18, 0x66	; 102
     4ea:	36 e6       	ldi	r19, 0x66	; 102
     4ec:	46 ee       	ldi	r20, 0xE6	; 230
     4ee:	5f e3       	ldi	r21, 0x3F	; 63
     4f0:	0e 94 fd 07 	call	0xffa	; 0xffa <__mulsf3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	52 e4       	ldi	r21, 0x42	; 66
     4fc:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__addsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	a9 01       	movw	r20, r18
     506:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__addsf3>
     50a:	0e 94 10 07 	call	0xe20	; 0xe20 <__fixsfsi>
     50e:	42 e0       	ldi	r20, 0x02	; 2
     510:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	8f ed       	ldi	r24, 0xDF	; 223
     518:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	86 e4       	ldi	r24, 0x46	; 70
     520:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     524:	08 95       	ret

00000526 <DHT11DisplayTemperatureC>:
     526:	8e e0       	ldi	r24, 0x0E	; 14
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     52e:	60 91 af 04 	lds	r22, 0x04AF	; 0x8004af <DHT11Data+0x2>
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	42 e0       	ldi	r20, 0x02	; 2
     53a:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	8f ed       	ldi	r24, 0xDF	; 223
     542:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	83 e4       	ldi	r24, 0x43	; 67
     54a:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     54e:	08 95       	ret

00000550 <DHT11WriteTemperatureEEPROM>:
     550:	f9 99       	sbic	0x1f, 1	; 31
     552:	fe cf       	rjmp	.-4      	; 0x550 <DHT11WriteTemperatureEEPROM>
     554:	f8 94       	cli
     556:	60 91 af 04 	lds	r22, 0x04AF	; 0x8004af <DHT11Data+0x2>
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <eeprom_write_word>
     564:	78 94       	sei
     566:	08 95       	ret

00000568 <DHT11DisplayHumidity>:
     568:	81 e1       	ldi	r24, 0x11	; 17
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     570:	60 91 ad 04 	lds	r22, 0x04AD	; 0x8004ad <DHT11Data>
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	42 e0       	ldi	r20, 0x02	; 2
     57c:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	85 e2       	ldi	r24, 0x25	; 37
     584:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
     588:	08 95       	ret

0000058a <DHT11WriteHumidityEEPROM>:
     58a:	f9 99       	sbic	0x1f, 1	; 31
     58c:	fe cf       	rjmp	.-4      	; 0x58a <DHT11WriteHumidityEEPROM>
     58e:	f8 94       	cli
     590:	60 91 ad 04 	lds	r22, 0x04AD	; 0x8004ad <DHT11Data>
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	83 e0       	ldi	r24, 0x03	; 3
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <eeprom_write_word>
     59e:	78 94       	sei
     5a0:	08 95       	ret

000005a2 <DHT11ReadData>:
     5a2:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <__data_end>
     5a6:	81 11       	cpse	r24, r1
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DHT11ReadData+0xc>
     5aa:	0e 94 58 02 	call	0x4b0	; 0x4b0 <DHT11Setup>
     5ae:	84 b1       	in	r24, 0x04	; 4
     5b0:	81 60       	ori	r24, 0x01	; 1
     5b2:	84 b9       	out	0x04, r24	; 4
     5b4:	85 b1       	in	r24, 0x05	; 5
     5b6:	8e 7f       	andi	r24, 0xFE	; 254
     5b8:	85 b9       	out	0x05, r24	; 5
     5ba:	88 ec       	ldi	r24, 0xC8	; 200
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <DHT11ReadData+0x28>
     5c0:	e0 e9       	ldi	r30, 0x90	; 144
     5c2:	f1 e0       	ldi	r31, 0x01	; 1
     5c4:	31 97       	sbiw	r30, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <DHT11ReadData+0x22>
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	00 97       	sbiw	r24, 0x00	; 0
     5cc:	c9 f7       	brne	.-14     	; 0x5c0 <DHT11ReadData+0x1e>
     5ce:	84 b1       	in	r24, 0x04	; 4
     5d0:	8e 7f       	andi	r24, 0xFE	; 254
     5d2:	84 b9       	out	0x04, r24	; 4
     5d4:	8a ea       	ldi	r24, 0xAA	; 170
     5d6:	8a 95       	dec	r24
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <DHT11ReadData+0x34>
     5da:	18 99       	sbic	0x03, 0	; 3
     5dc:	55 c0       	rjmp	.+170    	; 0x688 <DHT11ReadData+0xe6>
     5de:	88 e4       	ldi	r24, 0x48	; 72
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <DHT11ReadData+0x40>
     5e6:	18 9b       	sbis	0x03, 0	; 3
     5e8:	51 c0       	rjmp	.+162    	; 0x68c <DHT11ReadData+0xea>
     5ea:	88 e4       	ldi	r24, 0x48	; 72
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <DHT11ReadData+0x4c>
     5f2:	18 99       	sbic	0x03, 0	; 3
     5f4:	4d c0       	rjmp	.+154    	; 0x690 <DHT11ReadData+0xee>
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	33 c0       	rjmp	.+102    	; 0x660 <DHT11ReadData+0xbe>
     5fa:	8f 5f       	subi	r24, 0xFF	; 255
     5fc:	89 30       	cpi	r24, 0x09	; 9
     5fe:	38 f4       	brcc	.+14     	; 0x60e <DHT11ReadData+0x6c>
     600:	95 e3       	ldi	r25, 0x35	; 53
     602:	9a 95       	dec	r25
     604:	f1 f7       	brne	.-4      	; 0x602 <DHT11ReadData+0x60>
     606:	01 c0       	rjmp	.+2      	; 0x60a <DHT11ReadData+0x68>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	18 9b       	sbis	0x03, 0	; 3
     60c:	f6 cf       	rjmp	.-20     	; 0x5fa <DHT11ReadData+0x58>
     60e:	18 9b       	sbis	0x03, 0	; 3
     610:	41 c0       	rjmp	.+130    	; 0x694 <DHT11ReadData+0xf2>
     612:	85 ed       	ldi	r24, 0xD5	; 213
     614:	8a 95       	dec	r24
     616:	f1 f7       	brne	.-4      	; 0x614 <DHT11ReadData+0x72>
     618:	18 9b       	sbis	0x03, 0	; 3
     61a:	0c c0       	rjmp	.+24     	; 0x634 <DHT11ReadData+0x92>
     61c:	47 e0       	ldi	r20, 0x07	; 7
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	42 1b       	sub	r20, r18
     622:	51 09       	sbc	r21, r1
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	02 c0       	rjmp	.+4      	; 0x62e <DHT11ReadData+0x8c>
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	4a 95       	dec	r20
     630:	e2 f7       	brpl	.-8      	; 0x62a <DHT11ReadData+0x88>
     632:	38 2b       	or	r19, r24
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	06 c0       	rjmp	.+12     	; 0x644 <DHT11ReadData+0xa2>
     638:	8f 5f       	subi	r24, 0xFF	; 255
     63a:	89 30       	cpi	r24, 0x09	; 9
     63c:	28 f4       	brcc	.+10     	; 0x648 <DHT11ReadData+0xa6>
     63e:	95 e3       	ldi	r25, 0x35	; 53
     640:	9a 95       	dec	r25
     642:	f1 f7       	brne	.-4      	; 0x640 <DHT11ReadData+0x9e>
     644:	18 99       	sbic	0x03, 0	; 3
     646:	f8 cf       	rjmp	.-16     	; 0x638 <DHT11ReadData+0x96>
     648:	2f 5f       	subi	r18, 0xFF	; 255
     64a:	02 c0       	rjmp	.+4      	; 0x650 <DHT11ReadData+0xae>
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	28 30       	cpi	r18, 0x08	; 8
     652:	d0 f2       	brcs	.-76     	; 0x608 <DHT11ReadData+0x66>
     654:	e6 2f       	mov	r30, r22
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	e3 55       	subi	r30, 0x53	; 83
     65a:	fb 4f       	sbci	r31, 0xFB	; 251
     65c:	30 83       	st	Z, r19
     65e:	6f 5f       	subi	r22, 0xFF	; 255
     660:	65 30       	cpi	r22, 0x05	; 5
     662:	a0 f3       	brcs	.-24     	; 0x64c <DHT11ReadData+0xaa>
     664:	80 ef       	ldi	r24, 0xF0	; 240
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <DHT11ReadData+0xc6>
     66c:	ed ea       	ldi	r30, 0xAD	; 173
     66e:	f4 e0       	ldi	r31, 0x04	; 4
     670:	30 81       	ld	r19, Z
     672:	21 81       	ldd	r18, Z+1	; 0x01
     674:	92 81       	ldd	r25, Z+2	; 0x02
     676:	83 81       	ldd	r24, Z+3	; 0x03
     678:	23 0f       	add	r18, r19
     67a:	92 0f       	add	r25, r18
     67c:	89 0f       	add	r24, r25
     67e:	94 81       	ldd	r25, Z+4	; 0x04
     680:	89 17       	cp	r24, r25
     682:	51 f0       	breq	.+20     	; 0x698 <DHT11ReadData+0xf6>
     684:	8f ef       	ldi	r24, 0xFF	; 255
     686:	08 95       	ret
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	08 95       	ret
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	08 95       	ret
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	08 95       	ret
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	08 95       	ret
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	08 95       	ret

0000069c <adc_init>:
		}
    }
}

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));		//16Mhz/128 = 125Khz the ADC reference clock
     69c:	ea e7       	ldi	r30, 0x7A	; 122
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	87 60       	ori	r24, 0x07	; 7
     6a4:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);								//Voltage reference from Avcc (5v)
     6a6:	ac e7       	ldi	r26, 0x7C	; 124
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	8c 91       	ld	r24, X
     6ac:	80 64       	ori	r24, 0x40	; 64
     6ae:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);								//Turn on ADC
     6b0:	80 81       	ld	r24, Z
     6b2:	80 68       	ori	r24, 0x80	; 128
     6b4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);								//Do an initial conversion because this one is the slowest
     6b6:	80 81       	ld	r24, Z
     6b8:	80 64       	ori	r24, 0x40	; 64
     6ba:	80 83       	st	Z, r24
     6bc:	08 95       	ret

000006be <read_adc>:
}

uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;						//Clear the older channel that was read
     6be:	ec e7       	ldi	r30, 0x7C	; 124
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	90 81       	ld	r25, Z
     6c4:	90 7f       	andi	r25, 0xF0	; 240
     6c6:	90 83       	st	Z, r25
	ADMUX |= channel;					//Defines the new ADC channel to be read
     6c8:	90 81       	ld	r25, Z
     6ca:	89 2b       	or	r24, r25
     6cc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
     6ce:	ea e7       	ldi	r30, 0x7A	; 122
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	80 64       	ori	r24, 0x40	; 64
     6d6:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
     6d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6dc:	86 fd       	sbrc	r24, 6
     6de:	fc cf       	rjmp	.-8      	; 0x6d8 <read_adc+0x1a>
	return (ADCW*5);                    //Returns the ADC value of the chosen channel
     6e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     6e8:	9c 01       	movw	r18, r24
     6ea:	22 0f       	add	r18, r18
     6ec:	33 1f       	adc	r19, r19
     6ee:	22 0f       	add	r18, r18
     6f0:	33 1f       	adc	r19, r19
}
     6f2:	82 0f       	add	r24, r18
     6f4:	93 1f       	adc	r25, r19
     6f6:	08 95       	ret

000006f8 <USART_init>:

void USART_init(void){
	UBRR0H = (uint8_t)(BAUD_PRESCALER>>8);	//Setting Baud rate
     6f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALER);		//Setting Baud rate
     6fc:	87 e6       	ldi	r24, 0x67	; 103
     6fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);			//Enable receiver (RXEN0) and transmitter (TXENO)
     702:	e1 ec       	ldi	r30, 0xC1	; 193
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	88 e1       	ldi	r24, 0x18	; 24
     708:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSR0B)|(3<<UCSZ00);		//From datasheet, set format:8data, 2stop bit
     70a:	20 81       	ld	r18, Z
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	02 c0       	rjmp	.+4      	; 0x716 <USART_init+0x1e>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	2a 95       	dec	r18
     718:	e2 f7       	brpl	.-8      	; 0x712 <USART_init+0x1a>
     71a:	86 60       	ori	r24, 0x06	; 6
     71c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt 
     720:	80 81       	ld	r24, Z
     722:	80 68       	ori	r24, 0x80	; 128
     724:	80 83       	st	Z, r24
	sei(); // Enable the Global Interrupt Enable flag so that interrupts can be processed
     726:	78 94       	sei
     728:	08 95       	ret

0000072a <USART_send>:
	UDR0 = ReceivedByte; //echo
	ReceivedByte = UDR0; // Next char
}

void USART_send(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));			//While UDRE0 (USART Data Register flag) is clear,
     72a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     72e:	95 ff       	sbrs	r25, 5
     730:	fc cf       	rjmp	.-8      	; 0x72a <USART_send>
	UDR0 = data;	
     732:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     736:	08 95       	ret

00000738 <USART_putstring>:
}

void USART_putstring(char* StringPtr){
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
     73e:	03 c0       	rjmp	.+6      	; 0x746 <USART_putstring+0xe>
		USART_send(*StringPtr);
     740:	0e 94 95 03 	call	0x72a	; 0x72a <USART_send>
	StringPtr++;}	
     744:	21 96       	adiw	r28, 0x01	; 1
	while(!(UCSR0A & (1<<UDRE0)));			//While UDRE0 (USART Data Register flag) is clear,
	UDR0 = data;	
}

void USART_putstring(char* StringPtr){
	while(*StringPtr != 0x00){
     746:	88 81       	ld	r24, Y
     748:	81 11       	cpse	r24, r1
     74a:	fa cf       	rjmp	.-12     	; 0x740 <USART_putstring+0x8>
		USART_send(*StringPtr);
	StringPtr++;}	
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <main>:
int readValue = 2;
char buffer[5];	

int main(void)
{
	all = 1;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <all+0x1>
     75a:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <all>
	dt = 1;
     75e:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <dt+0x1>
     762:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <dt>
	fahren = 0;
     766:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <fahren+0x1>
     76a:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <fahren>
	LCDSetup(LCD_CURSOR_NONE);	
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	0e 94 ab 01 	call	0x356	; 0x356 <LCDSetup>
	adc_init();
     774:	0e 94 4e 03 	call	0x69c	; 0x69c <adc_init>
	USART_init();
     778:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <USART_init>

	USART_putstring("Measurements are being taken 1s apart. \r \n");
     77c:	84 e1       	ldi	r24, 0x14	; 20
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("To specify the spacing of measurements in seconds, enter the command Sx, where x is desired seconds. \r \n");
     784:	8f e3       	ldi	r24, 0x3F	; 63
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("To specify which measurement to view, enter the command: \r \n");
     78c:	88 ea       	ldi	r24, 0xA8	; 168
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("T for temperature, \r \n");
     794:	85 ee       	ldi	r24, 0xE5	; 229
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("B for brightness, \r \n");
     79c:	8c ef       	ldi	r24, 0xFC	; 252
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("H for humidity, or \r \n");
     7a4:	82 e1       	ldi	r24, 0x12	; 18
     7a6:	92 e0       	ldi	r25, 0x02	; 2
     7a8:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("A for all measurements. \r \n");
     7ac:	89 e2       	ldi	r24, 0x29	; 41
     7ae:	92 e0       	ldi	r25, 0x02	; 2
     7b0:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("To display temperature in Fahrenheit, enter the command F. \r \n");
     7b4:	85 e4       	ldi	r24, 0x45	; 69
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("To display temperature in Celsius, enter the command C. \r \n");
     7bc:	84 e8       	ldi	r24, 0x84	; 132
     7be:	92 e0       	ldi	r25, 0x02	; 2
     7c0:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("To store brightness in EEPROM, enter the command W. \r \n");
     7c4:	80 ec       	ldi	r24, 0xC0	; 192
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("To read brightness stored in EEPROM, enter the command D. \r \n");
     7cc:	88 ef       	ldi	r24, 0xF8	; 248
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("To store temperature (in C) in EEPROM, enter the command Q. \r \n");
     7d4:	86 e3       	ldi	r24, 0x36	; 54
     7d6:	93 e0       	ldi	r25, 0x03	; 3
     7d8:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("To read temperature (in C) stored in EEPROM, enter the command G. \r \n");	
     7dc:	86 e7       	ldi	r24, 0x76	; 118
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("To store humidity in EEPROM, enter the command J. \r \n");
     7e4:	8c eb       	ldi	r24, 0xBC	; 188
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	USART_putstring("To read humidity stored in EEPROM, enter the command K. \r \n");
     7ec:	82 ef       	ldi	r24, 0xF2	; 242
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
		
    while (1) 
    {
		_delay_ms(dt*1000);
     7f4:	20 91 be 04 	lds	r18, 0x04BE	; 0x8004be <dt>
     7f8:	30 91 bf 04 	lds	r19, 0x04BF	; 0x8004bf <dt+0x1>
     7fc:	88 ee       	ldi	r24, 0xE8	; 232
     7fe:	93 e0       	ldi	r25, 0x03	; 3
     800:	28 9f       	mul	r18, r24
     802:	b0 01       	movw	r22, r0
     804:	29 9f       	mul	r18, r25
     806:	70 0d       	add	r23, r0
     808:	38 9f       	mul	r19, r24
     80a:	70 0d       	add	r23, r0
     80c:	11 24       	eor	r1, r1
     80e:	07 2e       	mov	r0, r23
     810:	00 0c       	add	r0, r0
     812:	88 0b       	sbc	r24, r24
     814:	99 0b       	sbc	r25, r25
     816:	0e 94 48 07 	call	0xe90	; 0xe90 <__floatsisf>
     81a:	4b 01       	movw	r8, r22
     81c:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	4a e7       	ldi	r20, 0x7A	; 122
     824:	55 e4       	ldi	r21, 0x45	; 69
     826:	0e 94 fd 07 	call	0xffa	; 0xffa <__mulsf3>
     82a:	6b 01       	movw	r12, r22
     82c:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e8       	ldi	r20, 0x80	; 128
     834:	5f e3       	ldi	r21, 0x3F	; 63
     836:	0e 94 99 06 	call	0xd32	; 0xd32 <__cmpsf2>
     83a:	88 23       	and	r24, r24
     83c:	24 f1       	brlt	.+72     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
		__ticks = 1;
	else if (__tmp > 65535)
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	3f ef       	ldi	r19, 0xFF	; 255
     842:	4f e7       	ldi	r20, 0x7F	; 127
     844:	57 e4       	ldi	r21, 0x47	; 71
     846:	c7 01       	movw	r24, r14
     848:	b6 01       	movw	r22, r12
     84a:	0e 94 f8 07 	call	0xff0	; 0xff0 <__gesf2>
     84e:	18 16       	cp	r1, r24
     850:	ac f4       	brge	.+42     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	40 e2       	ldi	r20, 0x20	; 32
     858:	51 e4       	ldi	r21, 0x41	; 65
     85a:	c5 01       	movw	r24, r10
     85c:	b4 01       	movw	r22, r8
     85e:	0e 94 fd 07 	call	0xffa	; 0xffa <__mulsf3>
     862:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fixunssfsi>
     866:	06 c0       	rjmp	.+12     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     868:	80 e9       	ldi	r24, 0x90	; 144
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     870:	61 50       	subi	r22, 0x01	; 1
     872:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     874:	61 15       	cp	r22, r1
     876:	71 05       	cpc	r23, r1
     878:	b9 f7       	brne	.-18     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
     87a:	0a c0       	rjmp	.+20     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     87c:	c7 01       	movw	r24, r14
     87e:	b6 01       	movw	r22, r12
     880:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fixunssfsi>
     884:	02 c0       	rjmp	.+4      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	cb 01       	movw	r24, r22
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	f1 f7       	brne	.-4      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
	
		DHTreturnCode = DHT11ReadData();		//Function to read and check the sensor data
     890:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DHT11ReadData>
     894:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <DHTreturnCode>
		if(DHTreturnCode == -1){
     898:	8f 3f       	cpi	r24, 0xFF	; 255
     89a:	49 f4       	brne	.+18     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
			LCDHome();
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	80 e8       	ldi	r24, 0x80	; 128
     8a0:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
			LCDWriteString("Checksum Error");	//Error message on lcd to show data was received incorrectly
     8a4:	8e e2       	ldi	r24, 0x2E	; 46
     8a6:	94 e0       	ldi	r25, 0x04	; 4
     8a8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     8ac:	a3 cf       	rjmp	.-186    	; 0x7f4 <main+0xa2>
		} else {
			if (all == 1) {
     8ae:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <all>
     8b2:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <all+0x1>
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	09 f0       	breq	.+2      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
     8ba:	41 c0       	rjmp	.+130    	; 0x93e <__stack+0x3f>
				LCDHome();
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	80 e8       	ldi	r24, 0x80	; 128
     8c0:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				if (fahren == 1) {
     8c4:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <fahren>
     8c8:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <fahren+0x1>
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
					DHT11DisplayTemperatureF();			//Display Temp F
     8d0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DHT11DisplayTemperatureF>
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
				} else {
					DHT11DisplayTemperatureC();			//Display Temp C
     8d6:	0e 94 93 02 	call	0x526	; 0x526 <DHT11DisplayTemperatureC>
				}
				LCDGotoXY(8,1);
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	88 e0       	ldi	r24, 0x08	; 8
     8de:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDGotoXY>
				LCDWriteString("B:");				//Display Brightness
     8e2:	8d e3       	ldi	r24, 0x3D	; 61
     8e4:	94 e0       	ldi	r25, 0x04	; 4
     8e6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
				adc_value =  ((float)read_adc(0)/5050)*100;
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	0e 94 5f 03 	call	0x6be	; 0x6be <read_adc>
     8f0:	bc 01       	movw	r22, r24
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 46 07 	call	0xe8c	; 0xe8c <__floatunsisf>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 ed       	ldi	r19, 0xD0	; 208
     8fe:	4d e9       	ldi	r20, 0x9D	; 157
     900:	55 e4       	ldi	r21, 0x45	; 69
     902:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__divsf3>
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	48 ec       	ldi	r20, 0xC8	; 200
     90c:	52 e4       	ldi	r21, 0x42	; 66
     90e:	0e 94 fd 07 	call	0xffa	; 0xffa <__mulsf3>
     912:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fixunssfsi>
     916:	70 93 b8 04 	sts	0x04B8, r23	; 0x8004b8 <adc_value+0x1>
     91a:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <adc_value>
				LCDWriteInt(adc_value,3);
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	43 e0       	ldi	r20, 0x03	; 3
     924:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
				LCDWriteString("%");
     928:	80 e4       	ldi	r24, 0x40	; 64
     92a:	94 e0       	ldi	r25, 0x04	; 4
     92c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
				LCDGotoXY(1,2);
     930:	62 e0       	ldi	r22, 0x02	; 2
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDGotoXY>
				DHT11DisplayHumidity();				//Display Humidity
     938:	0e 94 b4 02 	call	0x568	; 0x568 <DHT11DisplayHumidity>
     93c:	5b cf       	rjmp	.-330    	; 0x7f4 <main+0xa2>
			}
			else if (temp == 1) {
     93e:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <temp>
     942:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <temp+0x1>
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	81 f4       	brne	.+32     	; 0x96a <__stack+0x6b>
				LCDHome(); 
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	80 e8       	ldi	r24, 0x80	; 128
     94e:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				if (fahren == 1) {
     952:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <fahren>
     956:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <fahren+0x1>
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	19 f4       	brne	.+6      	; 0x964 <__stack+0x65>
					DHT11DisplayTemperatureF();			//Display Temp F
     95e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DHT11DisplayTemperatureF>
     962:	48 cf       	rjmp	.-368    	; 0x7f4 <main+0xa2>
				} else {
					DHT11DisplayTemperatureC();			//Display Temp C
     964:	0e 94 93 02 	call	0x526	; 0x526 <DHT11DisplayTemperatureC>
     968:	45 cf       	rjmp	.-374    	; 0x7f4 <main+0xa2>
				}
			}
			else if (bright == 1) {
     96a:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <bright>
     96e:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <bright+0x1>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	61 f5       	brne	.+88     	; 0x9ce <__stack+0xcf>
				LCDHome();
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	80 e8       	ldi	r24, 0x80	; 128
     97a:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				LCDWriteString("B:");				//Display Brightness
     97e:	8d e3       	ldi	r24, 0x3D	; 61
     980:	94 e0       	ldi	r25, 0x04	; 4
     982:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
				adc_value =  ((float)read_adc(0)/5050)*100;
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 5f 03 	call	0x6be	; 0x6be <read_adc>
     98c:	bc 01       	movw	r22, r24
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 46 07 	call	0xe8c	; 0xe8c <__floatunsisf>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 ed       	ldi	r19, 0xD0	; 208
     99a:	4d e9       	ldi	r20, 0x9D	; 157
     99c:	55 e4       	ldi	r21, 0x45	; 69
     99e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__divsf3>
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	48 ec       	ldi	r20, 0xC8	; 200
     9a8:	52 e4       	ldi	r21, 0x42	; 66
     9aa:	0e 94 fd 07 	call	0xffa	; 0xffa <__mulsf3>
     9ae:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fixunssfsi>
     9b2:	70 93 b8 04 	sts	0x04B8, r23	; 0x8004b8 <adc_value+0x1>
     9b6:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <adc_value>
				LCDWriteInt(adc_value,3);
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	43 e0       	ldi	r20, 0x03	; 3
     9c0:	0e 94 23 01 	call	0x246	; 0x246 <LCDWriteInt>
				LCDWriteString("%");
     9c4:	80 e4       	ldi	r24, 0x40	; 64
     9c6:	94 e0       	ldi	r25, 0x04	; 4
     9c8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDWriteString>
     9cc:	13 cf       	rjmp	.-474    	; 0x7f4 <main+0xa2>
			}
			else if (humid == 1) {
     9ce:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <humid>
     9d2:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <humid+0x1>
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	09 f0       	breq	.+2      	; 0x9dc <__stack+0xdd>
     9da:	0c cf       	rjmp	.-488    	; 0x7f4 <main+0xa2>
				LCDHome();
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	80 e8       	ldi	r24, 0x80	; 128
     9e0:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
				DHT11DisplayHumidity();				//Display Humidity
     9e4:	0e 94 b4 02 	call	0x568	; 0x568 <DHT11DisplayHumidity>
     9e8:	05 cf       	rjmp	.-502    	; 0x7f4 <main+0xa2>

000009ea <__vector_18>:
	UCSR0C = (1<<UCSR0B)|(3<<UCSZ00);		//From datasheet, set format:8data, 2stop bit
	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt 
	sei(); // Enable the Global Interrupt Enable flag so that interrupts can be processed
}

ISR(USART_RX_vect) {
     9ea:	1f 92       	push	r1
     9ec:	0f 92       	push	r0
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	0f 92       	push	r0
     9f2:	11 24       	eor	r1, r1
     9f4:	2f 93       	push	r18
     9f6:	3f 93       	push	r19
     9f8:	4f 93       	push	r20
     9fa:	5f 93       	push	r21
     9fc:	6f 93       	push	r22
     9fe:	7f 93       	push	r23
     a00:	8f 93       	push	r24
     a02:	9f 93       	push	r25
     a04:	af 93       	push	r26
     a06:	bf 93       	push	r27
     a08:	cf 93       	push	r28
     a0a:	ef 93       	push	r30
     a0c:	ff 93       	push	r31
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
     a0e:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (ReceivedByte == 'S') {
     a12:	c3 35       	cpi	r28, 0x53	; 83
     a14:	51 f4       	brne	.+20     	; 0xa2a <__vector_18+0x40>
		ReceivedByte = UDR0;
     a16:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		dt = ReceivedByte - 48; //Change interval with which measurements are taken
     a1a:	8c 2f       	mov	r24, r28
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	c0 97       	sbiw	r24, 0x30	; 48
     a20:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <dt+0x1>
     a24:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <dt>
     a28:	01 c1       	rjmp	.+514    	; 0xc2c <__vector_18+0x242>
	}
	else if (ReceivedByte == 'T') {
     a2a:	c4 35       	cpi	r28, 0x54	; 84
     a2c:	b9 f4       	brne	.+46     	; 0xa5c <__vector_18+0x72>
		LCDClear();
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		temp = 1;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <temp+0x1>
     a3e:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <temp>
		all = 0;
     a42:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <all+0x1>
     a46:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <all>
		bright = 0;
     a4a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <bright+0x1>
     a4e:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <bright>
		humid = 0;
     a52:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <humid+0x1>
     a56:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <humid>
     a5a:	e8 c0       	rjmp	.+464    	; 0xc2c <__vector_18+0x242>
	}
	else if (ReceivedByte == 'B') {
     a5c:	c2 34       	cpi	r28, 0x42	; 66
     a5e:	b9 f4       	brne	.+46     	; 0xa8e <__vector_18+0xa4>
		LCDClear();
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		bright = 1;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <bright+0x1>
     a70:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <bright>
		all = 0;
     a74:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <all+0x1>
     a78:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <all>
		temp = 0;
     a7c:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <temp+0x1>
     a80:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <temp>
		humid = 0;
     a84:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <humid+0x1>
     a88:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <humid>
     a8c:	cf c0       	rjmp	.+414    	; 0xc2c <__vector_18+0x242>
	}
	else if (ReceivedByte == 'H') {
     a8e:	c8 34       	cpi	r28, 0x48	; 72
     a90:	b9 f4       	brne	.+46     	; 0xac0 <__vector_18+0xd6>
		LCDClear();
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		humid = 1;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <humid+0x1>
     aa2:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <humid>
		all = 0;
     aa6:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <all+0x1>
     aaa:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <all>
		bright = 0;
     aae:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <bright+0x1>
     ab2:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <bright>
		temp = 0;
     ab6:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <temp+0x1>
     aba:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <temp>
     abe:	b6 c0       	rjmp	.+364    	; 0xc2c <__vector_18+0x242>
	}
	else if (ReceivedByte == 'A') {
     ac0:	c1 34       	cpi	r28, 0x41	; 65
     ac2:	b9 f4       	brne	.+46     	; 0xaf2 <__vector_18+0x108>
		LCDClear();
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	0e 94 90 00 	call	0x120	; 0x120 <LCDByte>
		all = 1;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <all+0x1>
     ad4:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <all>
		temp = 0;
     ad8:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <temp+0x1>
     adc:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <temp>
		bright = 0;
     ae0:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <bright+0x1>
     ae4:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <bright>
		humid = 0;
     ae8:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <humid+0x1>
     aec:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <humid>
     af0:	9d c0       	rjmp	.+314    	; 0xc2c <__vector_18+0x242>
	}
	else if (ReceivedByte == 'F') {
     af2:	c6 34       	cpi	r28, 0x46	; 70
     af4:	39 f4       	brne	.+14     	; 0xb04 <__vector_18+0x11a>
		fahren = 1;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <fahren+0x1>
     afe:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <fahren>
     b02:	94 c0       	rjmp	.+296    	; 0xc2c <__vector_18+0x242>
	}
	else if (ReceivedByte == 'C') {
     b04:	c3 34       	cpi	r28, 0x43	; 67
     b06:	29 f4       	brne	.+10     	; 0xb12 <__vector_18+0x128>
		fahren = 0;
     b08:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <fahren+0x1>
     b0c:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <fahren>
     b10:	8d c0       	rjmp	.+282    	; 0xc2c <__vector_18+0x242>
	}
	else if (ReceivedByte == 'W') { //store brightness in EEPROM
     b12:	c7 35       	cpi	r28, 0x57	; 87
     b14:	79 f4       	brne	.+30     	; 0xb34 <__vector_18+0x14a>
		while (!eeprom_is_ready());
     b16:	f9 99       	sbic	0x1f, 1	; 31
     b18:	fe cf       	rjmp	.-4      	; 0xb16 <__vector_18+0x12c>
		cli();
     b1a:	f8 94       	cli
		eeprom_write_word((uint16_t*)Baddr, adc_value);
     b1c:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <adc_value>
     b20:	70 91 b8 04 	lds	r23, 0x04B8	; 0x8004b8 <adc_value+0x1>
     b24:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Baddr>
     b28:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Baddr+0x1>
     b2c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <eeprom_write_word>
		sei();
     b30:	78 94       	sei
     b32:	7c c0       	rjmp	.+248    	; 0xc2c <__vector_18+0x242>
	}
	else if (ReceivedByte == 'D') { //read brightness stored in EEPROM
     b34:	c4 34       	cpi	r28, 0x44	; 68
     b36:	29 f5       	brne	.+74     	; 0xb82 <__vector_18+0x198>
		while (!eeprom_is_ready());
     b38:	f9 99       	sbic	0x1f, 1	; 31
     b3a:	fe cf       	rjmp	.-4      	; 0xb38 <__vector_18+0x14e>
		cli();
     b3c:	f8 94       	cli
		readValue = eeprom_read_word((uint16_t*)Baddr); // => sensorValue
     b3e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Baddr>
     b42:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Baddr+0x1>
     b46:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <eeprom_read_word>
     b4a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		sei();
     b52:	78 94       	sei
		itoa(readValue, buffer,10);
     b54:	4a e0       	ldi	r20, 0x0A	; 10
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	69 eb       	ldi	r22, 0xB9	; 185
     b5a:	74 e0       	ldi	r23, 0x04	; 4
     b5c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b60:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b64:	0e 94 ab 08 	call	0x1156	; 0x1156 <itoa>
		USART_putstring("\r \n Stored brightness value = ");
     b68:	82 e4       	ldi	r24, 0x42	; 66
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
		USART_putstring(buffer);
     b70:	89 eb       	ldi	r24, 0xB9	; 185
     b72:	94 e0       	ldi	r25, 0x04	; 4
     b74:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
		USART_putstring(" % \r \n");
     b78:	81 e6       	ldi	r24, 0x61	; 97
     b7a:	94 e0       	ldi	r25, 0x04	; 4
     b7c:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
     b80:	55 c0       	rjmp	.+170    	; 0xc2c <__vector_18+0x242>
	}
	else if (ReceivedByte == 'Q') { //store temperature (in C) in EEPROM
     b82:	c1 35       	cpi	r28, 0x51	; 81
     b84:	19 f4       	brne	.+6      	; 0xb8c <__vector_18+0x1a2>
		DHT11WriteTemperatureEEPROM();
     b86:	0e 94 a8 02 	call	0x550	; 0x550 <DHT11WriteTemperatureEEPROM>
     b8a:	50 c0       	rjmp	.+160    	; 0xc2c <__vector_18+0x242>
	}
	else if (ReceivedByte == 'G') { //read temperature (in C) stored in EEPROM
     b8c:	c7 34       	cpi	r28, 0x47	; 71
     b8e:	29 f5       	brne	.+74     	; 0xbda <__vector_18+0x1f0>
		while (!eeprom_is_ready());
     b90:	f9 99       	sbic	0x1f, 1	; 31
     b92:	fe cf       	rjmp	.-4      	; 0xb90 <__vector_18+0x1a6>
		cli();
     b94:	f8 94       	cli
		readValue = eeprom_read_word((uint16_t*)Taddr); // => sensorValue
     b96:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Taddr>
     b9a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Taddr+0x1>
     b9e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <eeprom_read_word>
     ba2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ba6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		sei();
     baa:	78 94       	sei
		itoa(readValue, buffer,10);
     bac:	4a e0       	ldi	r20, 0x0A	; 10
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	69 eb       	ldi	r22, 0xB9	; 185
     bb2:	74 e0       	ldi	r23, 0x04	; 4
     bb4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bb8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bbc:	0e 94 ab 08 	call	0x1156	; 0x1156 <itoa>
		USART_putstring("\r \n Stored temperature value = ");
     bc0:	88 e6       	ldi	r24, 0x68	; 104
     bc2:	94 e0       	ldi	r25, 0x04	; 4
     bc4:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
		USART_putstring(buffer);
     bc8:	89 eb       	ldi	r24, 0xB9	; 185
     bca:	94 e0       	ldi	r25, 0x04	; 4
     bcc:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
		USART_putstring(" C \r \n");
     bd0:	88 e8       	ldi	r24, 0x88	; 136
     bd2:	94 e0       	ldi	r25, 0x04	; 4
     bd4:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
     bd8:	29 c0       	rjmp	.+82     	; 0xc2c <__vector_18+0x242>
	}
	else if (ReceivedByte == 'J') { //store humidity in EEPROM
     bda:	ca 34       	cpi	r28, 0x4A	; 74
     bdc:	19 f4       	brne	.+6      	; 0xbe4 <__vector_18+0x1fa>
		DHT11WriteHumidityEEPROM();
     bde:	0e 94 c5 02 	call	0x58a	; 0x58a <DHT11WriteHumidityEEPROM>
     be2:	24 c0       	rjmp	.+72     	; 0xc2c <__vector_18+0x242>
	}
	else if (ReceivedByte == 'K') { //read humidity stored in EEPROMwhile (!eeprom_is_ready());
     be4:	cb 34       	cpi	r28, 0x4B	; 75
     be6:	11 f5       	brne	.+68     	; 0xc2c <__vector_18+0x242>
		cli();
     be8:	f8 94       	cli
		readValue = eeprom_read_word((uint16_t*)Haddr); // => sensorValue
     bea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Haddr>
     bee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Haddr+0x1>
     bf2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <eeprom_read_word>
     bf6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bfa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		sei();
     bfe:	78 94       	sei
		itoa(readValue, buffer,10);
     c00:	4a e0       	ldi	r20, 0x0A	; 10
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	69 eb       	ldi	r22, 0xB9	; 185
     c06:	74 e0       	ldi	r23, 0x04	; 4
     c08:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c0c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c10:	0e 94 ab 08 	call	0x1156	; 0x1156 <itoa>
		USART_putstring("\r \n Stored humidity value = ");
     c14:	8f e8       	ldi	r24, 0x8F	; 143
     c16:	94 e0       	ldi	r25, 0x04	; 4
     c18:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
		USART_putstring(buffer);
     c1c:	89 eb       	ldi	r24, 0xB9	; 185
     c1e:	94 e0       	ldi	r25, 0x04	; 4
     c20:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
		USART_putstring(" % \r \n");
     c24:	81 e6       	ldi	r24, 0x61	; 97
     c26:	94 e0       	ldi	r25, 0x04	; 4
     c28:	0e 94 9c 03 	call	0x738	; 0x738 <USART_putstring>
	}
	
	
	UDR0 = ReceivedByte; //echo
     c2c:	e6 ec       	ldi	r30, 0xC6	; 198
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	c0 83       	st	Z, r28
	ReceivedByte = UDR0; // Next char
     c32:	80 81       	ld	r24, Z
}
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	cf 91       	pop	r28
     c3a:	bf 91       	pop	r27
     c3c:	af 91       	pop	r26
     c3e:	9f 91       	pop	r25
     c40:	8f 91       	pop	r24
     c42:	7f 91       	pop	r23
     c44:	6f 91       	pop	r22
     c46:	5f 91       	pop	r21
     c48:	4f 91       	pop	r20
     c4a:	3f 91       	pop	r19
     c4c:	2f 91       	pop	r18
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	0f 90       	pop	r0
     c54:	1f 90       	pop	r1
     c56:	18 95       	reti

00000c58 <__subsf3>:
     c58:	50 58       	subi	r21, 0x80	; 128

00000c5a <__addsf3>:
     c5a:	bb 27       	eor	r27, r27
     c5c:	aa 27       	eor	r26, r26
     c5e:	0e 94 44 06 	call	0xc88	; 0xc88 <__addsf3x>
     c62:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_round>
     c66:	0e 94 b0 07 	call	0xf60	; 0xf60 <__fp_pscA>
     c6a:	38 f0       	brcs	.+14     	; 0xc7a <__addsf3+0x20>
     c6c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_pscB>
     c70:	20 f0       	brcs	.+8      	; 0xc7a <__addsf3+0x20>
     c72:	39 f4       	brne	.+14     	; 0xc82 <__addsf3+0x28>
     c74:	9f 3f       	cpi	r25, 0xFF	; 255
     c76:	19 f4       	brne	.+6      	; 0xc7e <__addsf3+0x24>
     c78:	26 f4       	brtc	.+8      	; 0xc82 <__addsf3+0x28>
     c7a:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_nan>
     c7e:	0e f4       	brtc	.+2      	; 0xc82 <__addsf3+0x28>
     c80:	e0 95       	com	r30
     c82:	e7 fb       	bst	r30, 7
     c84:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_inf>

00000c88 <__addsf3x>:
     c88:	e9 2f       	mov	r30, r25
     c8a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fp_split3>
     c8e:	58 f3       	brcs	.-42     	; 0xc66 <__addsf3+0xc>
     c90:	ba 17       	cp	r27, r26
     c92:	62 07       	cpc	r22, r18
     c94:	73 07       	cpc	r23, r19
     c96:	84 07       	cpc	r24, r20
     c98:	95 07       	cpc	r25, r21
     c9a:	20 f0       	brcs	.+8      	; 0xca4 <__addsf3x+0x1c>
     c9c:	79 f4       	brne	.+30     	; 0xcbc <__addsf3x+0x34>
     c9e:	a6 f5       	brtc	.+104    	; 0xd08 <__addsf3x+0x80>
     ca0:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_zero>
     ca4:	0e f4       	brtc	.+2      	; 0xca8 <__addsf3x+0x20>
     ca6:	e0 95       	com	r30
     ca8:	0b 2e       	mov	r0, r27
     caa:	ba 2f       	mov	r27, r26
     cac:	a0 2d       	mov	r26, r0
     cae:	0b 01       	movw	r0, r22
     cb0:	b9 01       	movw	r22, r18
     cb2:	90 01       	movw	r18, r0
     cb4:	0c 01       	movw	r0, r24
     cb6:	ca 01       	movw	r24, r20
     cb8:	a0 01       	movw	r20, r0
     cba:	11 24       	eor	r1, r1
     cbc:	ff 27       	eor	r31, r31
     cbe:	59 1b       	sub	r21, r25
     cc0:	99 f0       	breq	.+38     	; 0xce8 <__addsf3x+0x60>
     cc2:	59 3f       	cpi	r21, 0xF9	; 249
     cc4:	50 f4       	brcc	.+20     	; 0xcda <__addsf3x+0x52>
     cc6:	50 3e       	cpi	r21, 0xE0	; 224
     cc8:	68 f1       	brcs	.+90     	; 0xd24 <__addsf3x+0x9c>
     cca:	1a 16       	cp	r1, r26
     ccc:	f0 40       	sbci	r31, 0x00	; 0
     cce:	a2 2f       	mov	r26, r18
     cd0:	23 2f       	mov	r18, r19
     cd2:	34 2f       	mov	r19, r20
     cd4:	44 27       	eor	r20, r20
     cd6:	58 5f       	subi	r21, 0xF8	; 248
     cd8:	f3 cf       	rjmp	.-26     	; 0xcc0 <__addsf3x+0x38>
     cda:	46 95       	lsr	r20
     cdc:	37 95       	ror	r19
     cde:	27 95       	ror	r18
     ce0:	a7 95       	ror	r26
     ce2:	f0 40       	sbci	r31, 0x00	; 0
     ce4:	53 95       	inc	r21
     ce6:	c9 f7       	brne	.-14     	; 0xcda <__addsf3x+0x52>
     ce8:	7e f4       	brtc	.+30     	; 0xd08 <__addsf3x+0x80>
     cea:	1f 16       	cp	r1, r31
     cec:	ba 0b       	sbc	r27, r26
     cee:	62 0b       	sbc	r22, r18
     cf0:	73 0b       	sbc	r23, r19
     cf2:	84 0b       	sbc	r24, r20
     cf4:	ba f0       	brmi	.+46     	; 0xd24 <__addsf3x+0x9c>
     cf6:	91 50       	subi	r25, 0x01	; 1
     cf8:	a1 f0       	breq	.+40     	; 0xd22 <__addsf3x+0x9a>
     cfa:	ff 0f       	add	r31, r31
     cfc:	bb 1f       	adc	r27, r27
     cfe:	66 1f       	adc	r22, r22
     d00:	77 1f       	adc	r23, r23
     d02:	88 1f       	adc	r24, r24
     d04:	c2 f7       	brpl	.-16     	; 0xcf6 <__addsf3x+0x6e>
     d06:	0e c0       	rjmp	.+28     	; 0xd24 <__addsf3x+0x9c>
     d08:	ba 0f       	add	r27, r26
     d0a:	62 1f       	adc	r22, r18
     d0c:	73 1f       	adc	r23, r19
     d0e:	84 1f       	adc	r24, r20
     d10:	48 f4       	brcc	.+18     	; 0xd24 <__addsf3x+0x9c>
     d12:	87 95       	ror	r24
     d14:	77 95       	ror	r23
     d16:	67 95       	ror	r22
     d18:	b7 95       	ror	r27
     d1a:	f7 95       	ror	r31
     d1c:	9e 3f       	cpi	r25, 0xFE	; 254
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <__addsf3x+0x9a>
     d20:	b0 cf       	rjmp	.-160    	; 0xc82 <__addsf3+0x28>
     d22:	93 95       	inc	r25
     d24:	88 0f       	add	r24, r24
     d26:	08 f0       	brcs	.+2      	; 0xd2a <__addsf3x+0xa2>
     d28:	99 27       	eor	r25, r25
     d2a:	ee 0f       	add	r30, r30
     d2c:	97 95       	ror	r25
     d2e:	87 95       	ror	r24
     d30:	08 95       	ret

00000d32 <__cmpsf2>:
     d32:	0e 94 83 07 	call	0xf06	; 0xf06 <__fp_cmp>
     d36:	08 f4       	brcc	.+2      	; 0xd3a <__cmpsf2+0x8>
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	08 95       	ret

00000d3c <__divsf3>:
     d3c:	0e 94 b2 06 	call	0xd64	; 0xd64 <__divsf3x>
     d40:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_round>
     d44:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_pscB>
     d48:	58 f0       	brcs	.+22     	; 0xd60 <__divsf3+0x24>
     d4a:	0e 94 b0 07 	call	0xf60	; 0xf60 <__fp_pscA>
     d4e:	40 f0       	brcs	.+16     	; 0xd60 <__divsf3+0x24>
     d50:	29 f4       	brne	.+10     	; 0xd5c <__divsf3+0x20>
     d52:	5f 3f       	cpi	r21, 0xFF	; 255
     d54:	29 f0       	breq	.+10     	; 0xd60 <__divsf3+0x24>
     d56:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_inf>
     d5a:	51 11       	cpse	r21, r1
     d5c:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__fp_szero>
     d60:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_nan>

00000d64 <__divsf3x>:
     d64:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fp_split3>
     d68:	68 f3       	brcs	.-38     	; 0xd44 <__divsf3+0x8>

00000d6a <__divsf3_pse>:
     d6a:	99 23       	and	r25, r25
     d6c:	b1 f3       	breq	.-20     	; 0xd5a <__divsf3+0x1e>
     d6e:	55 23       	and	r21, r21
     d70:	91 f3       	breq	.-28     	; 0xd56 <__divsf3+0x1a>
     d72:	95 1b       	sub	r25, r21
     d74:	55 0b       	sbc	r21, r21
     d76:	bb 27       	eor	r27, r27
     d78:	aa 27       	eor	r26, r26
     d7a:	62 17       	cp	r22, r18
     d7c:	73 07       	cpc	r23, r19
     d7e:	84 07       	cpc	r24, r20
     d80:	38 f0       	brcs	.+14     	; 0xd90 <__divsf3_pse+0x26>
     d82:	9f 5f       	subi	r25, 0xFF	; 255
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	22 0f       	add	r18, r18
     d88:	33 1f       	adc	r19, r19
     d8a:	44 1f       	adc	r20, r20
     d8c:	aa 1f       	adc	r26, r26
     d8e:	a9 f3       	breq	.-22     	; 0xd7a <__divsf3_pse+0x10>
     d90:	35 d0       	rcall	.+106    	; 0xdfc <__divsf3_pse+0x92>
     d92:	0e 2e       	mov	r0, r30
     d94:	3a f0       	brmi	.+14     	; 0xda4 <__divsf3_pse+0x3a>
     d96:	e0 e8       	ldi	r30, 0x80	; 128
     d98:	32 d0       	rcall	.+100    	; 0xdfe <__divsf3_pse+0x94>
     d9a:	91 50       	subi	r25, 0x01	; 1
     d9c:	50 40       	sbci	r21, 0x00	; 0
     d9e:	e6 95       	lsr	r30
     da0:	00 1c       	adc	r0, r0
     da2:	ca f7       	brpl	.-14     	; 0xd96 <__divsf3_pse+0x2c>
     da4:	2b d0       	rcall	.+86     	; 0xdfc <__divsf3_pse+0x92>
     da6:	fe 2f       	mov	r31, r30
     da8:	29 d0       	rcall	.+82     	; 0xdfc <__divsf3_pse+0x92>
     daa:	66 0f       	add	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	88 1f       	adc	r24, r24
     db0:	bb 1f       	adc	r27, r27
     db2:	26 17       	cp	r18, r22
     db4:	37 07       	cpc	r19, r23
     db6:	48 07       	cpc	r20, r24
     db8:	ab 07       	cpc	r26, r27
     dba:	b0 e8       	ldi	r27, 0x80	; 128
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <__divsf3_pse+0x56>
     dbe:	bb 0b       	sbc	r27, r27
     dc0:	80 2d       	mov	r24, r0
     dc2:	bf 01       	movw	r22, r30
     dc4:	ff 27       	eor	r31, r31
     dc6:	93 58       	subi	r25, 0x83	; 131
     dc8:	5f 4f       	sbci	r21, 0xFF	; 255
     dca:	3a f0       	brmi	.+14     	; 0xdda <__divsf3_pse+0x70>
     dcc:	9e 3f       	cpi	r25, 0xFE	; 254
     dce:	51 05       	cpc	r21, r1
     dd0:	78 f0       	brcs	.+30     	; 0xdf0 <__divsf3_pse+0x86>
     dd2:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_inf>
     dd6:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__fp_szero>
     dda:	5f 3f       	cpi	r21, 0xFF	; 255
     ddc:	e4 f3       	brlt	.-8      	; 0xdd6 <__divsf3_pse+0x6c>
     dde:	98 3e       	cpi	r25, 0xE8	; 232
     de0:	d4 f3       	brlt	.-12     	; 0xdd6 <__divsf3_pse+0x6c>
     de2:	86 95       	lsr	r24
     de4:	77 95       	ror	r23
     de6:	67 95       	ror	r22
     de8:	b7 95       	ror	r27
     dea:	f7 95       	ror	r31
     dec:	9f 5f       	subi	r25, 0xFF	; 255
     dee:	c9 f7       	brne	.-14     	; 0xde2 <__divsf3_pse+0x78>
     df0:	88 0f       	add	r24, r24
     df2:	91 1d       	adc	r25, r1
     df4:	96 95       	lsr	r25
     df6:	87 95       	ror	r24
     df8:	97 f9       	bld	r25, 7
     dfa:	08 95       	ret
     dfc:	e1 e0       	ldi	r30, 0x01	; 1
     dfe:	66 0f       	add	r22, r22
     e00:	77 1f       	adc	r23, r23
     e02:	88 1f       	adc	r24, r24
     e04:	bb 1f       	adc	r27, r27
     e06:	62 17       	cp	r22, r18
     e08:	73 07       	cpc	r23, r19
     e0a:	84 07       	cpc	r24, r20
     e0c:	ba 07       	cpc	r27, r26
     e0e:	20 f0       	brcs	.+8      	; 0xe18 <__divsf3_pse+0xae>
     e10:	62 1b       	sub	r22, r18
     e12:	73 0b       	sbc	r23, r19
     e14:	84 0b       	sbc	r24, r20
     e16:	ba 0b       	sbc	r27, r26
     e18:	ee 1f       	adc	r30, r30
     e1a:	88 f7       	brcc	.-30     	; 0xdfe <__divsf3_pse+0x94>
     e1c:	e0 95       	com	r30
     e1e:	08 95       	ret

00000e20 <__fixsfsi>:
     e20:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fixunssfsi>
     e24:	68 94       	set
     e26:	b1 11       	cpse	r27, r1
     e28:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__fp_szero>
     e2c:	08 95       	ret

00000e2e <__fixunssfsi>:
     e2e:	0e 94 d7 07 	call	0xfae	; 0xfae <__fp_splitA>
     e32:	88 f0       	brcs	.+34     	; 0xe56 <__fixunssfsi+0x28>
     e34:	9f 57       	subi	r25, 0x7F	; 127
     e36:	98 f0       	brcs	.+38     	; 0xe5e <__fixunssfsi+0x30>
     e38:	b9 2f       	mov	r27, r25
     e3a:	99 27       	eor	r25, r25
     e3c:	b7 51       	subi	r27, 0x17	; 23
     e3e:	b0 f0       	brcs	.+44     	; 0xe6c <__fixunssfsi+0x3e>
     e40:	e1 f0       	breq	.+56     	; 0xe7a <__fixunssfsi+0x4c>
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	88 1f       	adc	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	1a f0       	brmi	.+6      	; 0xe52 <__fixunssfsi+0x24>
     e4c:	ba 95       	dec	r27
     e4e:	c9 f7       	brne	.-14     	; 0xe42 <__fixunssfsi+0x14>
     e50:	14 c0       	rjmp	.+40     	; 0xe7a <__fixunssfsi+0x4c>
     e52:	b1 30       	cpi	r27, 0x01	; 1
     e54:	91 f0       	breq	.+36     	; 0xe7a <__fixunssfsi+0x4c>
     e56:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__fp_zero>
     e5a:	b1 e0       	ldi	r27, 0x01	; 1
     e5c:	08 95       	ret
     e5e:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_zero>
     e62:	67 2f       	mov	r22, r23
     e64:	78 2f       	mov	r23, r24
     e66:	88 27       	eor	r24, r24
     e68:	b8 5f       	subi	r27, 0xF8	; 248
     e6a:	39 f0       	breq	.+14     	; 0xe7a <__fixunssfsi+0x4c>
     e6c:	b9 3f       	cpi	r27, 0xF9	; 249
     e6e:	cc f3       	brlt	.-14     	; 0xe62 <__fixunssfsi+0x34>
     e70:	86 95       	lsr	r24
     e72:	77 95       	ror	r23
     e74:	67 95       	ror	r22
     e76:	b3 95       	inc	r27
     e78:	d9 f7       	brne	.-10     	; 0xe70 <__fixunssfsi+0x42>
     e7a:	3e f4       	brtc	.+14     	; 0xe8a <__fixunssfsi+0x5c>
     e7c:	90 95       	com	r25
     e7e:	80 95       	com	r24
     e80:	70 95       	com	r23
     e82:	61 95       	neg	r22
     e84:	7f 4f       	sbci	r23, 0xFF	; 255
     e86:	8f 4f       	sbci	r24, 0xFF	; 255
     e88:	9f 4f       	sbci	r25, 0xFF	; 255
     e8a:	08 95       	ret

00000e8c <__floatunsisf>:
     e8c:	e8 94       	clt
     e8e:	09 c0       	rjmp	.+18     	; 0xea2 <__floatsisf+0x12>

00000e90 <__floatsisf>:
     e90:	97 fb       	bst	r25, 7
     e92:	3e f4       	brtc	.+14     	; 0xea2 <__floatsisf+0x12>
     e94:	90 95       	com	r25
     e96:	80 95       	com	r24
     e98:	70 95       	com	r23
     e9a:	61 95       	neg	r22
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	99 23       	and	r25, r25
     ea4:	a9 f0       	breq	.+42     	; 0xed0 <__floatsisf+0x40>
     ea6:	f9 2f       	mov	r31, r25
     ea8:	96 e9       	ldi	r25, 0x96	; 150
     eaa:	bb 27       	eor	r27, r27
     eac:	93 95       	inc	r25
     eae:	f6 95       	lsr	r31
     eb0:	87 95       	ror	r24
     eb2:	77 95       	ror	r23
     eb4:	67 95       	ror	r22
     eb6:	b7 95       	ror	r27
     eb8:	f1 11       	cpse	r31, r1
     eba:	f8 cf       	rjmp	.-16     	; 0xeac <__floatsisf+0x1c>
     ebc:	fa f4       	brpl	.+62     	; 0xefc <__floatsisf+0x6c>
     ebe:	bb 0f       	add	r27, r27
     ec0:	11 f4       	brne	.+4      	; 0xec6 <__floatsisf+0x36>
     ec2:	60 ff       	sbrs	r22, 0
     ec4:	1b c0       	rjmp	.+54     	; 0xefc <__floatsisf+0x6c>
     ec6:	6f 5f       	subi	r22, 0xFF	; 255
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	8f 4f       	sbci	r24, 0xFF	; 255
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	16 c0       	rjmp	.+44     	; 0xefc <__floatsisf+0x6c>
     ed0:	88 23       	and	r24, r24
     ed2:	11 f0       	breq	.+4      	; 0xed8 <__floatsisf+0x48>
     ed4:	96 e9       	ldi	r25, 0x96	; 150
     ed6:	11 c0       	rjmp	.+34     	; 0xefa <__floatsisf+0x6a>
     ed8:	77 23       	and	r23, r23
     eda:	21 f0       	breq	.+8      	; 0xee4 <__floatsisf+0x54>
     edc:	9e e8       	ldi	r25, 0x8E	; 142
     ede:	87 2f       	mov	r24, r23
     ee0:	76 2f       	mov	r23, r22
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <__floatsisf+0x5e>
     ee4:	66 23       	and	r22, r22
     ee6:	71 f0       	breq	.+28     	; 0xf04 <__floatsisf+0x74>
     ee8:	96 e8       	ldi	r25, 0x86	; 134
     eea:	86 2f       	mov	r24, r22
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	2a f0       	brmi	.+10     	; 0xefc <__floatsisf+0x6c>
     ef2:	9a 95       	dec	r25
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	da f7       	brpl	.-10     	; 0xef2 <__floatsisf+0x62>
     efc:	88 0f       	add	r24, r24
     efe:	96 95       	lsr	r25
     f00:	87 95       	ror	r24
     f02:	97 f9       	bld	r25, 7
     f04:	08 95       	ret

00000f06 <__fp_cmp>:
     f06:	99 0f       	add	r25, r25
     f08:	00 08       	sbc	r0, r0
     f0a:	55 0f       	add	r21, r21
     f0c:	aa 0b       	sbc	r26, r26
     f0e:	e0 e8       	ldi	r30, 0x80	; 128
     f10:	fe ef       	ldi	r31, 0xFE	; 254
     f12:	16 16       	cp	r1, r22
     f14:	17 06       	cpc	r1, r23
     f16:	e8 07       	cpc	r30, r24
     f18:	f9 07       	cpc	r31, r25
     f1a:	c0 f0       	brcs	.+48     	; 0xf4c <__fp_cmp+0x46>
     f1c:	12 16       	cp	r1, r18
     f1e:	13 06       	cpc	r1, r19
     f20:	e4 07       	cpc	r30, r20
     f22:	f5 07       	cpc	r31, r21
     f24:	98 f0       	brcs	.+38     	; 0xf4c <__fp_cmp+0x46>
     f26:	62 1b       	sub	r22, r18
     f28:	73 0b       	sbc	r23, r19
     f2a:	84 0b       	sbc	r24, r20
     f2c:	95 0b       	sbc	r25, r21
     f2e:	39 f4       	brne	.+14     	; 0xf3e <__fp_cmp+0x38>
     f30:	0a 26       	eor	r0, r26
     f32:	61 f0       	breq	.+24     	; 0xf4c <__fp_cmp+0x46>
     f34:	23 2b       	or	r18, r19
     f36:	24 2b       	or	r18, r20
     f38:	25 2b       	or	r18, r21
     f3a:	21 f4       	brne	.+8      	; 0xf44 <__fp_cmp+0x3e>
     f3c:	08 95       	ret
     f3e:	0a 26       	eor	r0, r26
     f40:	09 f4       	brne	.+2      	; 0xf44 <__fp_cmp+0x3e>
     f42:	a1 40       	sbci	r26, 0x01	; 1
     f44:	a6 95       	lsr	r26
     f46:	8f ef       	ldi	r24, 0xFF	; 255
     f48:	81 1d       	adc	r24, r1
     f4a:	81 1d       	adc	r24, r1
     f4c:	08 95       	ret

00000f4e <__fp_inf>:
     f4e:	97 f9       	bld	r25, 7
     f50:	9f 67       	ori	r25, 0x7F	; 127
     f52:	80 e8       	ldi	r24, 0x80	; 128
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	08 95       	ret

00000f5a <__fp_nan>:
     f5a:	9f ef       	ldi	r25, 0xFF	; 255
     f5c:	80 ec       	ldi	r24, 0xC0	; 192
     f5e:	08 95       	ret

00000f60 <__fp_pscA>:
     f60:	00 24       	eor	r0, r0
     f62:	0a 94       	dec	r0
     f64:	16 16       	cp	r1, r22
     f66:	17 06       	cpc	r1, r23
     f68:	18 06       	cpc	r1, r24
     f6a:	09 06       	cpc	r0, r25
     f6c:	08 95       	ret

00000f6e <__fp_pscB>:
     f6e:	00 24       	eor	r0, r0
     f70:	0a 94       	dec	r0
     f72:	12 16       	cp	r1, r18
     f74:	13 06       	cpc	r1, r19
     f76:	14 06       	cpc	r1, r20
     f78:	05 06       	cpc	r0, r21
     f7a:	08 95       	ret

00000f7c <__fp_round>:
     f7c:	09 2e       	mov	r0, r25
     f7e:	03 94       	inc	r0
     f80:	00 0c       	add	r0, r0
     f82:	11 f4       	brne	.+4      	; 0xf88 <__fp_round+0xc>
     f84:	88 23       	and	r24, r24
     f86:	52 f0       	brmi	.+20     	; 0xf9c <__fp_round+0x20>
     f88:	bb 0f       	add	r27, r27
     f8a:	40 f4       	brcc	.+16     	; 0xf9c <__fp_round+0x20>
     f8c:	bf 2b       	or	r27, r31
     f8e:	11 f4       	brne	.+4      	; 0xf94 <__fp_round+0x18>
     f90:	60 ff       	sbrs	r22, 0
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <__fp_round+0x20>
     f94:	6f 5f       	subi	r22, 0xFF	; 255
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	8f 4f       	sbci	r24, 0xFF	; 255
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255
     f9c:	08 95       	ret

00000f9e <__fp_split3>:
     f9e:	57 fd       	sbrc	r21, 7
     fa0:	90 58       	subi	r25, 0x80	; 128
     fa2:	44 0f       	add	r20, r20
     fa4:	55 1f       	adc	r21, r21
     fa6:	59 f0       	breq	.+22     	; 0xfbe <__fp_splitA+0x10>
     fa8:	5f 3f       	cpi	r21, 0xFF	; 255
     faa:	71 f0       	breq	.+28     	; 0xfc8 <__fp_splitA+0x1a>
     fac:	47 95       	ror	r20

00000fae <__fp_splitA>:
     fae:	88 0f       	add	r24, r24
     fb0:	97 fb       	bst	r25, 7
     fb2:	99 1f       	adc	r25, r25
     fb4:	61 f0       	breq	.+24     	; 0xfce <__fp_splitA+0x20>
     fb6:	9f 3f       	cpi	r25, 0xFF	; 255
     fb8:	79 f0       	breq	.+30     	; 0xfd8 <__fp_splitA+0x2a>
     fba:	87 95       	ror	r24
     fbc:	08 95       	ret
     fbe:	12 16       	cp	r1, r18
     fc0:	13 06       	cpc	r1, r19
     fc2:	14 06       	cpc	r1, r20
     fc4:	55 1f       	adc	r21, r21
     fc6:	f2 cf       	rjmp	.-28     	; 0xfac <__fp_split3+0xe>
     fc8:	46 95       	lsr	r20
     fca:	f1 df       	rcall	.-30     	; 0xfae <__fp_splitA>
     fcc:	08 c0       	rjmp	.+16     	; 0xfde <__fp_splitA+0x30>
     fce:	16 16       	cp	r1, r22
     fd0:	17 06       	cpc	r1, r23
     fd2:	18 06       	cpc	r1, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	f1 cf       	rjmp	.-30     	; 0xfba <__fp_splitA+0xc>
     fd8:	86 95       	lsr	r24
     fda:	71 05       	cpc	r23, r1
     fdc:	61 05       	cpc	r22, r1
     fde:	08 94       	sec
     fe0:	08 95       	ret

00000fe2 <__fp_zero>:
     fe2:	e8 94       	clt

00000fe4 <__fp_szero>:
     fe4:	bb 27       	eor	r27, r27
     fe6:	66 27       	eor	r22, r22
     fe8:	77 27       	eor	r23, r23
     fea:	cb 01       	movw	r24, r22
     fec:	97 f9       	bld	r25, 7
     fee:	08 95       	ret

00000ff0 <__gesf2>:
     ff0:	0e 94 83 07 	call	0xf06	; 0xf06 <__fp_cmp>
     ff4:	08 f4       	brcc	.+2      	; 0xff8 <__gesf2+0x8>
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	08 95       	ret

00000ffa <__mulsf3>:
     ffa:	0e 94 10 08 	call	0x1020	; 0x1020 <__mulsf3x>
     ffe:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_round>
    1002:	0e 94 b0 07 	call	0xf60	; 0xf60 <__fp_pscA>
    1006:	38 f0       	brcs	.+14     	; 0x1016 <__mulsf3+0x1c>
    1008:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_pscB>
    100c:	20 f0       	brcs	.+8      	; 0x1016 <__mulsf3+0x1c>
    100e:	95 23       	and	r25, r21
    1010:	11 f0       	breq	.+4      	; 0x1016 <__mulsf3+0x1c>
    1012:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_inf>
    1016:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_nan>
    101a:	11 24       	eor	r1, r1
    101c:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__fp_szero>

00001020 <__mulsf3x>:
    1020:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fp_split3>
    1024:	70 f3       	brcs	.-36     	; 0x1002 <__mulsf3+0x8>

00001026 <__mulsf3_pse>:
    1026:	95 9f       	mul	r25, r21
    1028:	c1 f3       	breq	.-16     	; 0x101a <__mulsf3+0x20>
    102a:	95 0f       	add	r25, r21
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	55 1f       	adc	r21, r21
    1030:	62 9f       	mul	r22, r18
    1032:	f0 01       	movw	r30, r0
    1034:	72 9f       	mul	r23, r18
    1036:	bb 27       	eor	r27, r27
    1038:	f0 0d       	add	r31, r0
    103a:	b1 1d       	adc	r27, r1
    103c:	63 9f       	mul	r22, r19
    103e:	aa 27       	eor	r26, r26
    1040:	f0 0d       	add	r31, r0
    1042:	b1 1d       	adc	r27, r1
    1044:	aa 1f       	adc	r26, r26
    1046:	64 9f       	mul	r22, r20
    1048:	66 27       	eor	r22, r22
    104a:	b0 0d       	add	r27, r0
    104c:	a1 1d       	adc	r26, r1
    104e:	66 1f       	adc	r22, r22
    1050:	82 9f       	mul	r24, r18
    1052:	22 27       	eor	r18, r18
    1054:	b0 0d       	add	r27, r0
    1056:	a1 1d       	adc	r26, r1
    1058:	62 1f       	adc	r22, r18
    105a:	73 9f       	mul	r23, r19
    105c:	b0 0d       	add	r27, r0
    105e:	a1 1d       	adc	r26, r1
    1060:	62 1f       	adc	r22, r18
    1062:	83 9f       	mul	r24, r19
    1064:	a0 0d       	add	r26, r0
    1066:	61 1d       	adc	r22, r1
    1068:	22 1f       	adc	r18, r18
    106a:	74 9f       	mul	r23, r20
    106c:	33 27       	eor	r19, r19
    106e:	a0 0d       	add	r26, r0
    1070:	61 1d       	adc	r22, r1
    1072:	23 1f       	adc	r18, r19
    1074:	84 9f       	mul	r24, r20
    1076:	60 0d       	add	r22, r0
    1078:	21 1d       	adc	r18, r1
    107a:	82 2f       	mov	r24, r18
    107c:	76 2f       	mov	r23, r22
    107e:	6a 2f       	mov	r22, r26
    1080:	11 24       	eor	r1, r1
    1082:	9f 57       	subi	r25, 0x7F	; 127
    1084:	50 40       	sbci	r21, 0x00	; 0
    1086:	9a f0       	brmi	.+38     	; 0x10ae <__mulsf3_pse+0x88>
    1088:	f1 f0       	breq	.+60     	; 0x10c6 <__mulsf3_pse+0xa0>
    108a:	88 23       	and	r24, r24
    108c:	4a f0       	brmi	.+18     	; 0x10a0 <__mulsf3_pse+0x7a>
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	bb 1f       	adc	r27, r27
    1094:	66 1f       	adc	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	91 50       	subi	r25, 0x01	; 1
    109c:	50 40       	sbci	r21, 0x00	; 0
    109e:	a9 f7       	brne	.-22     	; 0x108a <__mulsf3_pse+0x64>
    10a0:	9e 3f       	cpi	r25, 0xFE	; 254
    10a2:	51 05       	cpc	r21, r1
    10a4:	80 f0       	brcs	.+32     	; 0x10c6 <__mulsf3_pse+0xa0>
    10a6:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_inf>
    10aa:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__fp_szero>
    10ae:	5f 3f       	cpi	r21, 0xFF	; 255
    10b0:	e4 f3       	brlt	.-8      	; 0x10aa <__mulsf3_pse+0x84>
    10b2:	98 3e       	cpi	r25, 0xE8	; 232
    10b4:	d4 f3       	brlt	.-12     	; 0x10aa <__mulsf3_pse+0x84>
    10b6:	86 95       	lsr	r24
    10b8:	77 95       	ror	r23
    10ba:	67 95       	ror	r22
    10bc:	b7 95       	ror	r27
    10be:	f7 95       	ror	r31
    10c0:	e7 95       	ror	r30
    10c2:	9f 5f       	subi	r25, 0xFF	; 255
    10c4:	c1 f7       	brne	.-16     	; 0x10b6 <__mulsf3_pse+0x90>
    10c6:	fe 2b       	or	r31, r30
    10c8:	88 0f       	add	r24, r24
    10ca:	91 1d       	adc	r25, r1
    10cc:	96 95       	lsr	r25
    10ce:	87 95       	ror	r24
    10d0:	97 f9       	bld	r25, 7
    10d2:	08 95       	ret

000010d4 <__divmodsi4>:
    10d4:	05 2e       	mov	r0, r21
    10d6:	97 fb       	bst	r25, 7
    10d8:	1e f4       	brtc	.+6      	; 0x10e0 <__divmodsi4+0xc>
    10da:	00 94       	com	r0
    10dc:	0e 94 81 08 	call	0x1102	; 0x1102 <__negsi2>
    10e0:	57 fd       	sbrc	r21, 7
    10e2:	07 d0       	rcall	.+14     	; 0x10f2 <__divmodsi4_neg2>
    10e4:	0e 94 89 08 	call	0x1112	; 0x1112 <__udivmodsi4>
    10e8:	07 fc       	sbrc	r0, 7
    10ea:	03 d0       	rcall	.+6      	; 0x10f2 <__divmodsi4_neg2>
    10ec:	4e f4       	brtc	.+18     	; 0x1100 <__divmodsi4_exit>
    10ee:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__negsi2>

000010f2 <__divmodsi4_neg2>:
    10f2:	50 95       	com	r21
    10f4:	40 95       	com	r20
    10f6:	30 95       	com	r19
    10f8:	21 95       	neg	r18
    10fa:	3f 4f       	sbci	r19, 0xFF	; 255
    10fc:	4f 4f       	sbci	r20, 0xFF	; 255
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255

00001100 <__divmodsi4_exit>:
    1100:	08 95       	ret

00001102 <__negsi2>:
    1102:	90 95       	com	r25
    1104:	80 95       	com	r24
    1106:	70 95       	com	r23
    1108:	61 95       	neg	r22
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	8f 4f       	sbci	r24, 0xFF	; 255
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	08 95       	ret

00001112 <__udivmodsi4>:
    1112:	a1 e2       	ldi	r26, 0x21	; 33
    1114:	1a 2e       	mov	r1, r26
    1116:	aa 1b       	sub	r26, r26
    1118:	bb 1b       	sub	r27, r27
    111a:	fd 01       	movw	r30, r26
    111c:	0d c0       	rjmp	.+26     	; 0x1138 <__udivmodsi4_ep>

0000111e <__udivmodsi4_loop>:
    111e:	aa 1f       	adc	r26, r26
    1120:	bb 1f       	adc	r27, r27
    1122:	ee 1f       	adc	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	a2 17       	cp	r26, r18
    1128:	b3 07       	cpc	r27, r19
    112a:	e4 07       	cpc	r30, r20
    112c:	f5 07       	cpc	r31, r21
    112e:	20 f0       	brcs	.+8      	; 0x1138 <__udivmodsi4_ep>
    1130:	a2 1b       	sub	r26, r18
    1132:	b3 0b       	sbc	r27, r19
    1134:	e4 0b       	sbc	r30, r20
    1136:	f5 0b       	sbc	r31, r21

00001138 <__udivmodsi4_ep>:
    1138:	66 1f       	adc	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	1a 94       	dec	r1
    1142:	69 f7       	brne	.-38     	; 0x111e <__udivmodsi4_loop>
    1144:	60 95       	com	r22
    1146:	70 95       	com	r23
    1148:	80 95       	com	r24
    114a:	90 95       	com	r25
    114c:	9b 01       	movw	r18, r22
    114e:	ac 01       	movw	r20, r24
    1150:	bd 01       	movw	r22, r26
    1152:	cf 01       	movw	r24, r30
    1154:	08 95       	ret

00001156 <itoa>:
    1156:	45 32       	cpi	r20, 0x25	; 37
    1158:	51 05       	cpc	r21, r1
    115a:	20 f4       	brcc	.+8      	; 0x1164 <itoa+0xe>
    115c:	42 30       	cpi	r20, 0x02	; 2
    115e:	10 f0       	brcs	.+4      	; 0x1164 <itoa+0xe>
    1160:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__itoa_ncheck>
    1164:	fb 01       	movw	r30, r22
    1166:	10 82       	st	Z, r1
    1168:	cb 01       	movw	r24, r22
    116a:	08 95       	ret

0000116c <__itoa_ncheck>:
    116c:	bb 27       	eor	r27, r27
    116e:	4a 30       	cpi	r20, 0x0A	; 10
    1170:	31 f4       	brne	.+12     	; 0x117e <__itoa_ncheck+0x12>
    1172:	99 23       	and	r25, r25
    1174:	22 f4       	brpl	.+8      	; 0x117e <__itoa_ncheck+0x12>
    1176:	bd e2       	ldi	r27, 0x2D	; 45
    1178:	90 95       	com	r25
    117a:	81 95       	neg	r24
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__utoa_common>

00001182 <__utoa_ncheck>:
    1182:	bb 27       	eor	r27, r27

00001184 <__utoa_common>:
    1184:	fb 01       	movw	r30, r22
    1186:	55 27       	eor	r21, r21
    1188:	aa 27       	eor	r26, r26
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	aa 1f       	adc	r26, r26
    1190:	a4 17       	cp	r26, r20
    1192:	10 f0       	brcs	.+4      	; 0x1198 <__utoa_common+0x14>
    1194:	a4 1b       	sub	r26, r20
    1196:	83 95       	inc	r24
    1198:	50 51       	subi	r21, 0x10	; 16
    119a:	b9 f7       	brne	.-18     	; 0x118a <__utoa_common+0x6>
    119c:	a0 5d       	subi	r26, 0xD0	; 208
    119e:	aa 33       	cpi	r26, 0x3A	; 58
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <__utoa_common+0x20>
    11a2:	a9 5d       	subi	r26, 0xD9	; 217
    11a4:	a1 93       	st	Z+, r26
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	79 f7       	brne	.-34     	; 0x1188 <__utoa_common+0x4>
    11aa:	b1 11       	cpse	r27, r1
    11ac:	b1 93       	st	Z+, r27
    11ae:	11 92       	st	Z+, r1
    11b0:	cb 01       	movw	r24, r22
    11b2:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <strrev>

000011b6 <strrev>:
    11b6:	dc 01       	movw	r26, r24
    11b8:	fc 01       	movw	r30, r24
    11ba:	67 2f       	mov	r22, r23
    11bc:	71 91       	ld	r23, Z+
    11be:	77 23       	and	r23, r23
    11c0:	e1 f7       	brne	.-8      	; 0x11ba <strrev+0x4>
    11c2:	32 97       	sbiw	r30, 0x02	; 2
    11c4:	04 c0       	rjmp	.+8      	; 0x11ce <strrev+0x18>
    11c6:	7c 91       	ld	r23, X
    11c8:	6d 93       	st	X+, r22
    11ca:	70 83       	st	Z, r23
    11cc:	62 91       	ld	r22, -Z
    11ce:	ae 17       	cp	r26, r30
    11d0:	bf 07       	cpc	r27, r31
    11d2:	c8 f3       	brcs	.-14     	; 0x11c6 <strrev+0x10>
    11d4:	08 95       	ret

000011d6 <eeprom_read_word>:
    11d6:	a8 e1       	ldi	r26, 0x18	; 24
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	42 e0       	ldi	r20, 0x02	; 2
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <eeprom_read_blraw>

000011e2 <eeprom_write_word>:
    11e2:	0e 94 06 09 	call	0x120c	; 0x120c <eeprom_write_byte>
    11e6:	27 2f       	mov	r18, r23
    11e8:	0c 94 07 09 	jmp	0x120e	; 0x120e <eeprom_write_r18>

000011ec <eeprom_read_block>:
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22

000011f0 <eeprom_read_blraw>:
    11f0:	fc 01       	movw	r30, r24
    11f2:	f9 99       	sbic	0x1f, 1	; 31
    11f4:	fe cf       	rjmp	.-4      	; 0x11f2 <eeprom_read_blraw+0x2>
    11f6:	06 c0       	rjmp	.+12     	; 0x1204 <eeprom_read_blraw+0x14>
    11f8:	f2 bd       	out	0x22, r31	; 34
    11fa:	e1 bd       	out	0x21, r30	; 33
    11fc:	f8 9a       	sbi	0x1f, 0	; 31
    11fe:	31 96       	adiw	r30, 0x01	; 1
    1200:	00 b4       	in	r0, 0x20	; 32
    1202:	0d 92       	st	X+, r0
    1204:	41 50       	subi	r20, 0x01	; 1
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	b8 f7       	brcc	.-18     	; 0x11f8 <eeprom_read_blraw+0x8>
    120a:	08 95       	ret

0000120c <eeprom_write_byte>:
    120c:	26 2f       	mov	r18, r22

0000120e <eeprom_write_r18>:
    120e:	f9 99       	sbic	0x1f, 1	; 31
    1210:	fe cf       	rjmp	.-4      	; 0x120e <eeprom_write_r18>
    1212:	1f ba       	out	0x1f, r1	; 31
    1214:	92 bd       	out	0x22, r25	; 34
    1216:	81 bd       	out	0x21, r24	; 33
    1218:	20 bd       	out	0x20, r18	; 32
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	fa 9a       	sbi	0x1f, 2	; 31
    1220:	f9 9a       	sbi	0x1f, 1	; 31
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	08 95       	ret

00001228 <_exit>:
    1228:	f8 94       	cli

0000122a <__stop_program>:
    122a:	ff cf       	rjmp	.-2      	; 0x122a <__stop_program>
